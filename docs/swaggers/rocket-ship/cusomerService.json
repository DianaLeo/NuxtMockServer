{
  "openapi": "3.0.1",
  "info": {
    "title": "customer-service (Thu, 20 Jun 2024 13:13:47 GMT)",
    "version": "0.0.1-SNAPSHOT"
  },
  "servers": [
    {
      "url": "https://platform-gateway.rocketship.cash/customer-service",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "customer",
      "description": "com.lis.platform.integration.customer.controller.CustomerController"
    },
    {
      "name": "Visitor id devices controller",
      "description": "com.lis.platform.integration.customer.controller.DeviceController"
    },
    {
      "name": "loyalty-history",
      "description": "com.lis.platform.integration.customer.controller.LoyaltyHistoryController"
    },
    {
      "name": "Frontend reset password",
      "description": "Reset password api"
    },
    {
      "name": "bet-history",
      "description": "com.lis.platform.integration.customer.controller.BetHistoryController"
    },
    {
      "name": "Veriff",
      "description": "Veriff Webhook API"
    },
    {
      "name": "frontend payment",
      "description": "Payments api"
    },
    {
      "name": "tracking-data",
      "description": "com.lis.platform.integration.customer.controller.TrackingDataController"
    },
    {
      "name": "affiliate-data",
      "description": "com.lis.platform.integration.customer.controller.AffiliateController"
    },
    {
      "name": "sportsbook-bet-history",
      "description": "com.lis.platform.integration.customer.controller.SportsbookBetHistoryController"
    },
    {
      "name": "kyc",
      "description": "KYC verification api"
    },
    {
      "name": "bonus-history",
      "description": "com.lis.platform.integration.customer.controller.BonusHistoryController"
    },
    {
      "name": "frontend kyc",
      "description": "KYC verification api"
    },
    {
      "name": "transaction",
      "description": "com.lis.platform.integration.customer.controller.TransactionsController"
    },
    {
      "name": "login",
      "description": "com.lis.platform.integration.customer.login.controller.LoginController"
    },
    {
      "name": "Tracking",
      "description": "Tracking api"
    },
    {
      "name": "DevCode identity",
      "description": "DevCode identity"
    }
  ],
  "paths": {
    "/internal/new-brand/create-db": {
      "post": {
        "tags": [
          "new-brand-controller"
        ],
        "operationId": "createDb",
        "parameters": [
          {
            "name": "api-create-auth-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.tenant.automation.controller.NewBrandController$DbCredentialsXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/veriff/webhook/decision/idv": {
      "post": {
        "tags": [
          "Veriff"
        ],
        "operationId": "decisionIdvWebhook",
        "parameters": [
          {
            "name": "X-HMAC-SIGNATURE",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/transaction/search": {
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "transactions search",
        "description": "Search by transaction params",
        "operationId": "transactionSearch",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.TransactionHistorySearchRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Pageable result of searched transactions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.WalletTransactionXto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "jwt token is invalid or expired"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/transaction/search/withdrawals": {
      "post": {
        "tags": [
          "withdrawal",
          "transaction"
        ],
        "summary": "withdrawals search",
        "description": "Search by multiple params",
        "operationId": "withdrawalSearch",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.WalletTransactionSearchRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "jwt token is invalid or expired"
          },
          "200": {
            "description": "Pageable result of searched withdrawal transactions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.WalletTransactionBasicResponseXto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/transaction/search/deposits": {
      "post": {
        "tags": [
          "deposit",
          "transaction"
        ],
        "summary": "deposits search",
        "description": "Search by multiple params",
        "operationId": "depositSearch",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.WalletTransactionSearchRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Pageable result of searched deposit transactions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.WalletTransactionBasicResponseXto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "jwt token is invalid or expired"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/sportsbook-bet-history/search": {
      "post": {
        "tags": [
          "sportsbook-bet-history"
        ],
        "summary": "Sportsbook bet history search",
        "operationId": "sportsbookBetSearch",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.SportsbookBetHistorySearchRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return a pageable result of searched sportsbook bet history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.SportsbookBetHistoryResponseXto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/loyalty-history/searchV2": {
      "post": {
        "tags": [
          "loyalty-history"
        ],
        "summary": "loyalty history search",
        "operationId": "customerSearch",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.kafka.xto.loyalty.LoyaltyHistorySearchRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return a pageable result of searched loyalty history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.LoyaltyHistoryController$PartitionedLoyaltyHistoryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/kyc/poa/trigger": {
      "post": {
        "tags": [
          "kyc"
        ],
        "summary": "start idv verification process",
        "description": "Initiate idv verification process for a customer. This can be done with pending or finished old verification,which is removed ",
        "operationId": "startPoaVerification",
        "parameters": [
          {
            "name": "cid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Error while processing validation"
          },
          "200": {
            "description": "Initiated IDV verification data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.service.kyc.dto.VerificationDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/kyc/poa/complete": {
      "post": {
        "tags": [
          "kyc"
        ],
        "summary": "completes poa verification flow",
        "description": "Completes POA verification flow",
        "operationId": "completePoa",
        "parameters": [
          {
            "name": "cid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.service.kyc.dto.CompleteVerificationRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "POA Verification flow is completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.service.kyc.dto.CompleteVerificationResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Error while processing verification"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/kyc/idv/trigger": {
      "post": {
        "tags": [
          "kyc"
        ],
        "summary": "start idv verification process",
        "description": "Initiate idv verification process for a customer. This can be done with pending or finished old verification,which is removed ",
        "operationId": "startIdvVerification",
        "parameters": [
          {
            "name": "cid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Error while processing validation"
          },
          "200": {
            "description": "Initiated IDV verification data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.service.kyc.dto.VerificationDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/kyc/idv/complete": {
      "post": {
        "tags": [
          "kyc"
        ],
        "summary": "completes idv verification flow",
        "description": "Completes IDV verification flow",
        "operationId": "completeIdv",
        "parameters": [
          {
            "name": "cid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.service.kyc.dto.CompleteVerificationRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Error while processing verification"
          },
          "200": {
            "description": "IDV Verification flow is completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.service.kyc.dto.CompleteVerificationResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/hcaptcha/verify": {
      "post": {
        "tags": [
          "hcaptcha-controller"
        ],
        "summary": "Verify whether the request is suspicious",
        "description": "True if the request is suspicious, false otherwise",
        "operationId": "verifyHcaptchaToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.HcaptchaVerifyRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Successful check",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/tracking": {
      "post": {
        "tags": [
          "Tracking",
          "tracking"
        ],
        "summary": "Send tracking data",
        "description": "send tracking data",
        "operationId": "sendTrackingEvent",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "visitorId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenant",
            "in": "header",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.TrackingEventXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/frontend/sweepstakes/top-up": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Top up social currency balance",
        "description": "Top up social currency balance",
        "operationId": "topUpSocialBalance",
        "parameters": [
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Customer has successfully topped up social currency."
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/sweepstakes/periodic-bonus/opt-in": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Customer Opts-in for a periodic sweepstakes bonus",
        "description": "Indicates that a customer is willing to be given a periodic sweepstakes bonus.",
        "operationId": "optInForPeriodicBonus",
        "parameters": [
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Customer has successfully opted-in for periodic sweepstakes bonus.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.rest.dto.SweepstakesPeriodicBonusOptInResponse"
                }
              }
            }
          },
          "400": {
            "description": "The bonus can't be opted-in."
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/payment/vault/withdraw": {
      "post": {
        "tags": [
          "frontend payment",
          "withdraw",
          "crypto"
        ],
        "summary": "vault withdraw transactions",
        "description": "Create vault withdraw",
        "operationId": "vaultWithdraw",
        "parameters": [
          {
            "name": "visitorId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.VaultWithdrawRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Vault withdraw",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Error while processing validation"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/payment/vault/deposit": {
      "post": {
        "tags": [
          "frontend payment",
          "deposit",
          "crypto"
        ],
        "summary": "vault deposit transactions",
        "description": "Create vault deposit",
        "operationId": "vaultDeposit",
        "parameters": [
          {
            "name": "visitorId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.VaultTransactionRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Vault deposit",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Error while processing validation"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/payment/v2/crypto/withdraw": {
      "post": {
        "tags": [
          "frontend payment",
          "withdraw",
          "crypto"
        ],
        "summary": "initiate crypto withdrawal",
        "description": "initiate crypto withdrawal ",
        "operationId": "initiateWithdrawV2",
        "parameters": [
          {
            "name": "visitorId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CryptoWithdrawRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Initiated withdraw",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CryptoWithdrawResponseXto"
                }
              }
            }
          },
          "422": {
            "description": "Error while processing validation"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/payment/v2/crypto/withdraw/cancel": {
      "post": {
        "tags": [
          "frontend payment",
          "withdraw"
        ],
        "summary": "cancel customer withdraw transactions",
        "description": "Cancel customer withdraw transaction",
        "operationId": "cancelWithdraw",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CancelWalletTransactionRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Vault withdraw",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Error while processing validation"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/payment/deposit": {
      "post": {
        "tags": [
          "frontend payment",
          "deposit",
          "crypto"
        ],
        "summary": "initiate crypto deposit",
        "description": "initiate crypto deposit ",
        "operationId": "initiateDeposit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.InitiateWalletTransactionRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Initiated deposit",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.InitiateWalletTransactionResponseXto"
                }
              }
            }
          },
          "422": {
            "description": "Error while processing validation"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/payment/crypto/withdraw": {
      "post": {
        "tags": [
          "frontend payment",
          "withdraw",
          "crypto"
        ],
        "summary": "initiate crypto withdrawal",
        "description": "initiate crypto withdrawal ",
        "operationId": "initiateWithdraw",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CryptoWithdrawRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Initiated withdraw"
          },
          "422": {
            "description": "Error while processing validation"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/password/reset": {
      "post": {
        "tags": [
          "password",
          "Frontend reset password",
          "reset"
        ],
        "summary": "Reset password",
        "description": "Reset password",
        "operationId": "resetPassword",
        "parameters": [
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.ResetPasswordXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/frontend/password/reset/status/{token}": {
      "post": {
        "tags": [
          "password",
          "Frontend reset password",
          "reset"
        ],
        "summary": "Check password reset link is valid",
        "description": "Check password reset link is valid",
        "operationId": "checkTokenValid",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.ResetPasswordTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.TokenValidResponseXto"
                }
              }
            }
          }
        }
      }
    },
    "/api/frontend/password/reset/social-login/initiate": {
      "post": {
        "tags": [
          "password",
          "Frontend reset password",
          "reset"
        ],
        "summary": "Initiate social login password reset",
        "description": "initiate social login password reset",
        "operationId": "initiateSocialLoginPasswordReset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.InitiateResetPasswordXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/frontend/password/reset/initiate/v2": {
      "post": {
        "tags": [
          "password",
          "Frontend reset password",
          "reset"
        ],
        "summary": "Initiate password reset",
        "description": "initiate password reset",
        "operationId": "initiatePasswordResetNew",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.InitiateResetPasswordXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/frontend/password/reset/initiate-migration": {
      "post": {
        "tags": [
          "password",
          "Frontend reset password",
          "reset"
        ],
        "summary": "Initiate migration password reset",
        "description": "initiate migration password reset",
        "operationId": "initiateMigrationPasswordReset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.InitiateResetPasswordXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/frontend/kyc/poa/trigger": {
      "post": {
        "tags": [
          "kyc",
          "frontend kyc"
        ],
        "summary": "start poa verification process",
        "description": "Initiate poa verification process for a customer. This can be done with pending or finished old verification,which is removed ",
        "operationId": "startPoaVerification_1",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Initiated poa verification data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.service.kyc.dto.VerificationDto"
                }
              }
            }
          },
          "422": {
            "description": "Error while processing validation"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/kyc/poa/complete": {
      "post": {
        "tags": [
          "kyc",
          "frontend kyc"
        ],
        "summary": "completes poa verification flow",
        "description": "Completes POA verification flow",
        "operationId": "completeKycPoaVerification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.service.kyc.dto.CompleteVerificationRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "POA Verification flow is completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.service.kyc.dto.CompleteVerificationResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Error while processing verification"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/kyc/idv/trigger": {
      "post": {
        "tags": [
          "kyc",
          "frontend kyc"
        ],
        "summary": "start idv verification process",
        "description": "Initiate idv verification process for a customer. This can be done with pending or finished old verification,which is removed ",
        "operationId": "startIdvVerification_1",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Initiated poa verification data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.service.kyc.dto.VerificationDto"
                }
              }
            }
          },
          "422": {
            "description": "Error while processing validation"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/kyc/idv/complete": {
      "post": {
        "tags": [
          "kyc",
          "frontend kyc"
        ],
        "summary": "completes idv verification flow",
        "description": "Completes IDV verification flow",
        "operationId": "completeKycIdvVerification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.service.kyc.dto.CompleteVerificationRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Error while processing verification"
          },
          "200": {
            "description": "IDV Verification flow is completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.service.kyc.dto.CompleteVerificationResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/wallet-connect/login": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Wallet connect login",
        "operationId": "loginWalletConnect",
        "parameters": [
          {
            "name": "visitorId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.FrontendWalletConnectLoginXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return successfully logged in customer connected to wallet id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerAccountResponseXto"
                }
              }
            }
          },
          "400": {
            "description": "Request validation error(s)"
          },
          "401": {
            "description": "Invalid authentication with error",
            "content": {
              "text/plain": {}
            }
          }
        }
      }
    },
    "/api/frontend/customer/wallet-connect/generate-message-v2": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Generate wallet connect message",
        "operationId": "generateWalletConnectMessageV2",
        "parameters": [
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.WalletConnectGenerateMsgRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Request validation error(s)"
          },
          "200": {
            "description": "Will return successfully generated wallet connect message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerAccountResponseXto"
                }
              }
            }
          }
        }
      }
    },
    "/api/frontend/customer/wallet-connect/create": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Register customer by wallet connect from frontend app",
        "operationId": "registerFrontendPlayerAccountWithWalletConnect",
        "parameters": [
          {
            "name": "visitorId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.registration.FrontendWalletConnectRegistrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return successfully created customer with all his/her data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerAccountResponseXto"
                }
              }
            }
          },
          "400": {
            "description": "Request validation error(s)"
          }
        }
      }
    },
    "/api/frontend/customer/verify-factor": {
      "post": {
        "tags": [
          "mfa",
          "frontend"
        ],
        "summary": "Verifies existing Mfa factor",
        "operationId": "verifyFactor",
        "parameters": [
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "200": {
            "description": "True if factor is verified successfully and false otherwise",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "422": {
            "description": "Mfa for the brand is disabled or blocked temporarily"
          },
          "404": {
            "description": "Factor not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/verification-files": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Upload verification files",
        "operationId": "uploadVerificationFiles",
        "parameters": [
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "images",
                  "request"
                ],
                "type": "object",
                "properties": {
                  "request": {
                    "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.sportsbook.VerificationFilesXto"
                  },
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "jwt token is invalid or expired"
          },
          "400": {
            "description": "Request validation error(s)"
          },
          "403": {
            "description": "unauthorized"
          },
          "422": {
            "description": "Error while processing validation"
          },
          "201": {
            "description": "Successfully uploaded files"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/valid-v2/{field}": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Valid email is not existing one",
        "operationId": "isValidFieldV2",
        "parameters": [
          {
            "name": "field",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.ValidFieldRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "ValidFieldResponse.valid = true in case validation is successValidFieldResponse.valid = false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.ValidFieldResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/frontend/customer/valid-user-field/{field}": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Valid email is not existing one",
        "operationId": "isValidUserField",
        "parameters": [
          {
            "name": "field",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.ValidFieldRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "ValidFieldResponse.valid = true in case validation is successValidFieldResponse.valid = false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.ValidFieldResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/frontend/customer/user-exist-by/nick-name": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Customer exist by nick name",
        "operationId": "userNickNameUsed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CustomerExistsByNicknameRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "In case that customer with such nick name doesn't exist"
          },
          "200": {
            "description": "In case that customer with such nick name exist"
          }
        }
      }
    },
    "/api/frontend/customer/transaction-history": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "transaction history search",
        "operationId": "transactionHistorySearch",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.FrontendTransactionHistorySearchRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "206": {
            "description": "Will return a chunk of searched transaction history. There are more chunks.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.FrontendTransactionHistoryResponseXto"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Will return a chunk of searched transaction history. There are no more chunks.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.FrontendTransactionHistoryResponseXto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/telegram-social-register": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Register Telegram player coming from the website's TG Login widget",
        "operationId": "telegramSocialRegister",
        "parameters": [
          {
            "name": "visitorId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.registration.TelegramSocialRegistrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Token and customer basic data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerAccountResponseXto"
                }
              }
            }
          },
          "422": {
            "description": "Suspicious user behavior detected during registration"
          },
          "400": {
            "description": "Request validation error(s)"
          }
        }
      }
    },
    "/api/frontend/customer/telegram-social-login": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Login Telegram player coming from the website's TG Login widget, return 404 if user is not registered",
        "operationId": "telegramSocialLogin",
        "parameters": [
          {
            "name": "visitorId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.TelegramSocialLoginRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Token and customer basic data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CustomerDataXto"
                }
              }
            }
          },
          "404": {
            "description": "User not found, they must register first"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Request validation error(s)"
          }
        }
      }
    },
    "/api/frontend/customer/telegram-login": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Login Telegram player coming from the chat bot, register them first if they are a new user",
        "operationId": "telegramChatBotLogin",
        "parameters": [
          {
            "name": "visitorId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.TelegramChatbotLoginRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Token and customer basic data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CustomerDataXto"
                }
              }
            }
          },
          "422": {
            "description": "Suspicious user behavior detected during registration or login"
          },
          "400": {
            "description": "Request validation error(s)"
          }
        }
      }
    },
    "/api/frontend/customer/sportsbook-bet-history": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "bet history search",
        "operationId": "sportsbookBetHistorySearch",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.sportsbook.FrontendSportsbookBetHistorySearchRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return a pageable result of searched sportsbook bet history. There are no more pages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.sportsbook.FrontendSportsbookBetHistoryResponseXto"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Will return a pageable result of searched sportsbook bet history. There are more pages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.sportsbook.FrontendSportsbookBetHistoryResponseXto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/social-info": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Customer Social info",
        "operationId": "playerSocialInfo",
        "parameters": [
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.SocialInfoRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Request validation error(s)"
          },
          "422": {
            "description": "Business logic errors"
          },
          "200": {
            "description": "Player info from social provider. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.service.sociallogin.xto.SocialInfoResponseXto"
                }
              }
            }
          }
        }
      }
    },
    "/api/frontend/customer/renew-token-v2": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Customer token renew",
        "operationId": "renewTokenV2",
        "parameters": [
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "The new token",
            "content": {
              "application/text": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/renew-token-external": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Renew external provider token",
        "operationId": "renewExternalToken",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "The new token",
            "content": {
              "application/text": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/logout-v2": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Customer Logout",
        "operationId": "playerLogoutV2",
        "parameters": [
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/login-v2": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Customer Login",
        "operationId": "playerLoginV2",
        "parameters": [
          {
            "name": "visitorId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.FrontendLoginXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Request validation error(s)"
          },
          "200": {
            "description": "Token and customer basic data. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CustomerDataXto"
                }
              }
            }
          },
          "422": {
            "description": "Business logic errors"
          },
          "202": {
            "description": "Player email and mfa login reference id. To be used for completing login after totp is provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CustomerDataXto"
                }
              }
            }
          }
        }
      }
    },
    "/api/frontend/customer/login-social": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Customer Social Login",
        "operationId": "playerLoginSocial",
        "parameters": [
          {
            "name": "visitorId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.FrontendSocialLoginXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Request validation error(s)"
          },
          "200": {
            "description": "Token and customer basic data. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CustomerDataXto"
                }
              }
            }
          },
          "422": {
            "description": "Business logic errors"
          },
          "202": {
            "description": "Player email and mfa login reference id. To be used for completing login after totp is provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CustomerDataXto"
                }
              }
            }
          }
        }
      }
    },
    "/api/frontend/customer/invoices": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Create an invoice",
        "operationId": "createInvoice",
        "parameters": [
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CreateInvoiceRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return a URL for proceeding with payment.",
            "content": {
              "application/text": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Request validation error(s)"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/get-or-create-factor": {
      "post": {
        "tags": [
          "mfa",
          "frontend"
        ],
        "summary": "Gets existing or creates Mfa factor",
        "operationId": "getOrCreateFactor",
        "parameters": [
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "422": {
            "description": "Mfa for the brand is disabled"
          },
          "200": {
            "description": "Factor details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.dto.FactorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/first-login-v2": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Check if the user has logged in before, by specifying an email.",
        "operationId": "firstLoginV2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.FirstLoginRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/frontend/customer/exist-v2": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Customer exist by email",
        "operationId": "emailRegisteredV2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CustomerExistsByEmailRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "In case that customer exist"
          },
          "204": {
            "description": "In case that customer doesn't exist"
          }
        }
      }
    },
    "/api/frontend/customer/exist-by-v2/nick-name": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Customer exist by nick name",
        "operationId": "nickNameUsedV2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CustomerExistsByNicknameRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "In case that customer with such nick name doesn't exist"
          },
          "200": {
            "description": "In case that customer with such nick name exist"
          }
        }
      }
    },
    "/api/frontend/customer/create/v2": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Register customer directly from frontend app",
        "operationId": "registerFrontendPlayerAccountV2",
        "parameters": [
          {
            "name": "visitorId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.registration.FrontendRegistrationRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return successfully created customer with all his/her data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerAccountResponseXto"
                }
              }
            }
          },
          "400": {
            "description": "Request validation error(s)"
          }
        }
      }
    },
    "/api/frontend/customer/create-social/v2": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Register customer by social network from frontend app",
        "operationId": "registerSocialFrontendPlayerAccountV2",
        "parameters": [
          {
            "name": "visitorId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.registration.FrontendSocialRegistrationRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return successfully created customer with all his/her data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.registration.FrontendRegistrationRequestV2"
                }
              }
            }
          },
          "400": {
            "description": "Request validation error(s)"
          }
        }
      }
    },
    "/api/frontend/customer/complete-mfa-v2": {
      "post": {
        "tags": [
          "mfa",
          "frontend"
        ],
        "summary": "Customer Login complete mfa",
        "operationId": "completeMfaV2",
        "parameters": [
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CompleteMfaXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Token and customer basic data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CustomerDataXto"
                }
              }
            }
          },
          "401": {
            "description": "User is not found"
          },
          "400": {
            "description": "Request validation error(s)"
          },
          "422": {
            "description": "Mfa validation not successful or not configured"
          }
        }
      }
    },
    "/api/frontend/customer/bonus/{bonusId}/opt-in": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Customer Opts-in for a bonus",
        "description": "Indicates that a customer is willing to be given a bonus.",
        "operationId": "optInForBonus",
        "parameters": [
          {
            "name": "bonusId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Customer has successfully opted-in for an bonus.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "The bonus can't be opted-in."
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/bonus/opt-in-bonus-code/{bonusCode}": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "Customer Opts-in for a bonus",
        "description": "Indicates that a customer is willing to be given a bonus.",
        "operationId": "optInForBonusWithCode",
        "parameters": [
          {
            "name": "bonusCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Customer has successfully opted-in for an bonus.",
            "content": {
              "application/text": {}
            }
          },
          "400": {
            "description": "The bonus can't be opted-in."
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/bet-history-v2": {
      "post": {
        "tags": [
          "frontend"
        ],
        "summary": "bet history search",
        "operationId": "betHistorySearchV2",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.FrontendBetHistorySearchRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return a pageable result of searched bet history. There are no more pages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.CustomerFrontendController$BetHistoryFrontendResponseXto"
                }
              }
            }
          },
          "206": {
            "description": "Will return a pageable result of searched bet history. There are more pages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.CustomerFrontendController$BetHistoryFrontendResponseXto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/devcode-identity/login": {
      "post": {
        "tags": [
          "devcode identity token",
          "DevCode identity"
        ],
        "summary": "Performs Devcode code validation",
        "description": "And returns a PLATFORM token in exchange, in case the user is successfully authenticated. In case the user does not exist in the system - he's created.",
        "operationId": "login",
        "parameters": [
          {
            "name": "visitorId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DevcodeIdentityTokenRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Platform token",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CustomerDataXto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/devcode-identity/callback/user": {
      "get": {
        "tags": [
          "devcode identity user",
          "DevCode identity"
        ],
        "summary": "DevCode user GET",
        "description": "DevCode user GET",
        "operationId": "userGet",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone_number",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ssn",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ssn_type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nickname",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Authorization URL",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DevcodeIdentityUserResponseXto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        }
      },
      "post": {
        "tags": [
          "devcode identity user",
          "DevCode identity"
        ],
        "summary": "DevCode user POST",
        "description": "DevCode user POST",
        "operationId": "userPost",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "affiliateClickId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "affiliatePublisherId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "affiliateToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "affiliateWebsiteId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "affiliateOfflineCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "affiliateProvider",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referredBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ipAddress",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DevcodeIdentityUserRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Authorization URL",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DevcodeIdentityUserResponseXto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        }
      }
    },
    "/api/devcode-identity/callback/session": {
      "post": {
        "tags": [
          "devcode identity session",
          "DevCode identity"
        ],
        "summary": "DevCode session",
        "description": "DevCode session",
        "operationId": "session",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DevcodeIdentitySessionRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Authorization URL",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DevcodeIdentitySessionResponseXto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        }
      }
    },
    "/api/devcode-identity/auth-url": {
      "post": {
        "tags": [
          "devcode identity",
          "DevCode identity"
        ],
        "summary": "Performs Devcode Identity authorization",
        "description": "Performs Devcode Identity authorization",
        "operationId": "auth",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DevcodeIdentityAuthRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Authorization URL",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/devcode-identity/auth-url-v2": {
      "post": {
        "tags": [
          "devcode identity",
          "DevCode identity"
        ],
        "summary": "Performs Devcode Identity authorization",
        "description": "Performs Devcode Identity authorization",
        "operationId": "authV2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DevcodeIdentityAuthRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Authorization URL",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.AuthUrlXto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/{cid}/login-history": {
      "post": {
        "tags": [
          "login",
          "customer"
        ],
        "summary": "Login history",
        "description": "All successful and unsuccessful login attempts matching a search criteria.",
        "operationId": "loginHistory",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.commons.web.rest.DateRangeXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return a pageable result of searched login history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.commons.web.rest.PageableResponseXto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/search": {
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "customer search",
        "description": "Search by customer data",
        "operationId": "customerSearch_1",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "registrationDate"
            }
          },
          {
            "name": "desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "reportingCurrency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "EUR"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerSearchParamsXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return a pageable result of searched customers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerPageableXto"
                }
              }
            }
          },
          "422": {
            "description": "Invalid full text search pattern"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/renew-token-v2": {
      "post": {
        "tags": [
          "login",
          "customer"
        ],
        "summary": "Customer token renew",
        "description": "Proxy call to player-service /api/core/player/renew-token-v2",
        "operationId": "renewTokenV2_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/logout-v2": {
      "post": {
        "tags": [
          "login",
          "customer"
        ],
        "summary": "Customer Logout",
        "description": "Proxy call to player-service /api/core/player/logout-v2",
        "operationId": "playerLogoutV2_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/login-v2": {
      "post": {
        "tags": [
          "login",
          "customer"
        ],
        "summary": "Customer Login",
        "description": "Proxy call to player-service /api/core/player/login-v2",
        "operationId": "playerLoginV2_1",
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "localhost"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.LoginXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.dto.LoginResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/get-or-create-factor/{cid}": {
      "post": {
        "tags": [
          "mfa",
          "frontend",
          "customer"
        ],
        "summary": "Gets existing or creates Mfa factor",
        "operationId": "getOrCreateFactor_1",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "404": {
            "description": "No user with such cid"
          },
          "422": {
            "description": "Mfa for the brand is disabled"
          },
          "200": {
            "description": "Factor details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.dto.FactorDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/exists-by/external-system-id/{cid}": {
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "Get customer by external system id",
        "operationId": "isExternalSystemIdUsed",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.ExternalSystemIdUsedRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "jwt token is invalid or expired"
          },
          "200": {
            "description": "True if external system id exists for login type and false if it does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "Player is not found "
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/customer-files-data/{cid}": {
      "get": {
        "tags": [
          "customer-files-data",
          "customer"
        ],
        "summary": "Retrieve customer's related files",
        "operationId": "getCustomerFilesData_1",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Request validation error(s)",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerFilesDataXto"
                  }
                }
              }
            }
          },
          "200": {
            "description": "List all customer's related files.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerFilesDataXto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "post": {
        "tags": [
          "customer-files-data",
          "customer"
        ],
        "summary": "Upload customer files data",
        "operationId": "uploadCustomerFiles",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "files",
                  "request"
                ],
                "type": "object",
                "properties": {
                  "request": {
                    "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.UploadCustomerFilesDataRequestXto"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Upload customer files."
          },
          "400": {
            "description": "Request validation error(s)"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/customer-files-data/search": {
      "post": {
        "tags": [
          "customer-files-data",
          "customer"
        ],
        "summary": "Search for customers files data",
        "operationId": "searchCustomerFilesData",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerFilesSearchXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Request validation error(s)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.commons.web.rest.PageableResponseXtoCom.lis.platform.integration.customer.controller.xto.CustomerFilesDataXto"
                }
              }
            }
          },
          "200": {
            "description": "Will return a pageable result of searched customer files data",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.commons.web.rest.PageableResponseXtoCom.lis.platform.integration.customer.controller.xto.CustomerFilesDataXto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/create": {
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "Register customer",
        "description": "Proxy call to core/player-service - /api/core/player",
        "operationId": "registerPlayerAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerAccountRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return successfully created customer with all his/her data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerAccountResponseXto"
                }
              }
            }
          },
          "400": {
            "description": "Request validation error(s)"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/count": {
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "customer search count",
        "description": "Search by customer data",
        "operationId": "customersCount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerSearchParamsXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return a pageable result of searched customers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/complete-mfa-v2": {
      "post": {
        "tags": [
          "login",
          "customer"
        ],
        "summary": "Customer Complete mfa",
        "description": "Proxy call to player-service /api/core/player/complete-mfa-v2  Returns accessToken and refresh token cookie",
        "operationId": "completeMfaV2_1",
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "localhost"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.dto.MfaResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/by-email": {
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "Customer details by id",
        "operationId": "getCustomerDetails",
        "parameters": [
          {
            "name": "includeOnlineStatus",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerByEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "jwt token is invalid or expired"
          },
          "404": {
            "description": "Customer not found "
          },
          "200": {
            "description": "Customer details",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerDataXto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/bulk-update": {
      "post": {
        "tags": [
          "bulk",
          "customer"
        ],
        "summary": "Edit bulk customer details",
        "operationId": "bulkUpdatePlayerAccount",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Successful edit of players data"
          },
          "400": {
            "description": "Request validation error(s)",
            "content": {
              "application/text": {}
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/bonus/opt-in": {
      "post": {
        "tags": [
          "bonus opt-in",
          "customer"
        ],
        "summary": "Customer Opts-in for a bonus",
        "description": "Indicates that a customer is willing to be given a bonus.",
        "operationId": "optInForBonus_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.BonusOptinXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Customer has successfully opted-in for an bonus.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "The bonus can't be opted-in."
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/affiliates/decode-token": {
      "post": {
        "tags": [
          "affiliate-data"
        ],
        "summary": "Return decoded affiliate data",
        "description": "Will be used to from cms-service to decode tokens for non-logged in users",
        "operationId": "decodeAffiliateToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.AffiliateDataXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return decoded affiliate data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.AffiliateController$AffiliateXto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/affiliates/decode-token-full": {
      "post": {
        "tags": [
          "affiliate-data"
        ],
        "summary": "Return all decoded affiliate data",
        "description": "Will be used to from backoffice-service to decode tokens and set all affiliate data fields",
        "operationId": "decodeAffiliateTokenFull",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.AffiliateDataXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return decoded affiliate data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.AffiliateController$AffiliateXto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/bonus-history/search": {
      "post": {
        "tags": [
          "bonus-history",
          "frontend"
        ],
        "summary": "bonus history search",
        "operationId": "searchPlayerBonuses",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.BonusHistorySearchRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return a pageable result of searched bonus history. There are no more pages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.FrontendBonusHistoryResponseXto"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Will return a pageable result of searched bonus history. There are more pages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.FrontendBonusHistoryResponseXto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/bet-history/searchV2": {
      "post": {
        "tags": [
          "bet-history"
        ],
        "summary": "bet history search",
        "operationId": "customerSearchV2",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.BetHistorySearchRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "206": {
            "description": "Will return a pageable result of searched bet history. There are more pages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.BetHistoryController$BetHistorySearchResponseXto"
                }
              }
            }
          },
          "200": {
            "description": "Will return a pageable result of searched bet history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.BetHistoryController$BetHistorySearchResponseXto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/bet-history/searchV2/lightweight": {
      "post": {
        "tags": [
          "bet-history",
          "frontend"
        ],
        "summary": "bet history search",
        "operationId": "betHistorySearch",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.BetHistorySearchRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return a pageable result of searched bet history. There are no more pages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.BetHistoryController$BetHistoryFrontendResponseXto"
                }
              }
            }
          },
          "206": {
            "description": "Will return a pageable result of searched bet history. There are more pages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.BetHistoryController$BetHistoryFrontendResponseXto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/bet-history/export": {
      "post": {
        "tags": [
          "bet-history"
        ],
        "summary": "bet history export",
        "operationId": "export",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.BetHistorySearchRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "206": {
            "description": "Will export the searched bet history."
          },
          "200": {
            "description": "Will export the searched bet history."
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/update": {
      "patch": {
        "tags": [
          "frontend"
        ],
        "summary": "Edit customer details from frontend app",
        "operationId": "editFrontendPlayerAccount",
        "parameters": [
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.FrontendEditCustomerRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Successful edit of player data"
          },
          "400": {
            "description": "Request validation error(s)",
            "content": {
              "application/text": {}
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/update-info": {
      "patch": {
        "tags": [
          "frontend"
        ],
        "summary": "Edit customer details from frontend app",
        "operationId": "patchFrontendPlayerAccount",
        "parameters": [
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.FrontendCustomerInfoRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Successful edit of player data"
          },
          "400": {
            "description": "Request validation error(s)",
            "content": {
              "application/text": {}
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/update-currency": {
      "patch": {
        "tags": [
          "frontend"
        ],
        "summary": "Customer update currency",
        "operationId": "updateCurrency",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.UpdateCurrencyRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "The currency update request completed successfully ",
            "content": {
              "application/text": {}
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/change-status": {
      "patch": {
        "tags": [
          "frontend"
        ],
        "summary": "Customer self exclude or cool off",
        "operationId": "changeStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.FrontendChangeStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Endpoint is still under development",
            "content": {}
          },
          "404": {
            "description": "Player not found"
          },
          "400": {
            "description": "Validation errors"
          },
          "200": {
            "description": "Status is updated successfully",
            "content": {
              "application/text": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/change-password": {
      "patch": {
        "tags": [
          "frontend"
        ],
        "summary": "Customer change password",
        "operationId": "changePassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.ChangePasswordXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "The password is successfully changed",
            "content": {
              "application/text": {}
            }
          },
          "400": {
            "description": "Request validation error(s)"
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/change-mfa-preferences": {
      "patch": {
        "tags": [
          "frontend"
        ],
        "summary": "Update players mfa preferences",
        "operationId": "changeMfaPreferences",
        "parameters": [
          {
            "name": "useTotp",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.rest.PlayerServiceProvider$MfaDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Password/totp is wrong"
          },
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/{cid}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Customer details by id",
        "operationId": "getCustomerDetails_1",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeOnlineStatus",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "jwt token is invalid or expired"
          },
          "404": {
            "description": "Player is not found "
          },
          "200": {
            "description": "Customer details",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerDataXto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "patch": {
        "tags": [
          "customer"
        ],
        "summary": "Edit customer data",
        "operationId": "edit",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.PlayerEditXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Authentication unsuccessful"
          },
          "200": {
            "description": "Successful edit of player data"
          },
          "400": {
            "description": "Request validation error(s)"
          },
          "404": {
            "description": "Player is not found "
          },
          "403": {
            "description": "request doesn't have required permissions"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/update-registration-metadata/{cid}": {
      "patch": {
        "tags": [
          "customer"
        ],
        "summary": "Updates the registration metadata (Registration IP, Registration IP Country, Registration Fingerprint) for a player",
        "operationId": "updateRegistrationMetadata",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.UpdateRegistrationMetadataRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Updates the registration metadata of the player and returns TRUE (returns FALSE if the player registration metadata was same as the provided and did not actually change)",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/update-currency/{cid}": {
      "patch": {
        "tags": [
          "customer"
        ],
        "summary": "Customer update currency",
        "operationId": "updateCurrency_1",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.UpdateCurrencyRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "The currency update request completed successfully ",
            "content": {
              "application/text": {}
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/customer-files-data/{id}": {
      "patch": {
        "tags": [
          "customer-files-data",
          "customer"
        ],
        "summary": "Update customer files data",
        "operationId": "getCustomerFilesData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerFilesDataRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "Update customer files data."
          },
          "400": {
            "description": "Request validation error(s)"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/transaction/static": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "Static data",
        "description": "processors, sub processors,  payment methods",
        "operationId": "getStaticData",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "jwt token is invalid or expired"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.TransactionsController$StaticDataModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/sportsbook-bet-history/{betId}/selections": {
      "get": {
        "tags": [
          "sportsbook-bet-history"
        ],
        "summary": "Sportsbook selections for a given bet",
        "operationId": "sportsbookBetSearch_1",
        "parameters": [
          {
            "name": "betId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return all selections for a given bet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.SportsbookBetHistorySelectionResponseXto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/kyc/poa/check": {
      "get": {
        "tags": [
          "kyc"
        ],
        "summary": "KYC POA status of customer",
        "operationId": "checkCustomerKycPoaStatus",
        "parameters": [
          {
            "name": "cid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "KYC POA status of customer",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "NOT_VERIFIED",
                    "PROCESSING",
                    "FAILED",
                    "VERIFIED",
                    "REQUIRED",
                    "MANUAL_DECISION"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/kyc/idv/check": {
      "get": {
        "tags": [
          "kyc"
        ],
        "summary": "KYC IDV status of customer",
        "operationId": "checkCustomerKycIdvStatus",
        "parameters": [
          {
            "name": "cid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "KYC IDV status of customer",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "NOT_VERIFIED",
                    "PROCESSING",
                    "FAILED",
                    "VERIFIED",
                    "REQUIRED",
                    "MANUAL_DECISION"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/sweepstakes/periodic-bonus/opt-in-info": {
      "get": {
        "tags": [
          "frontend"
        ],
        "summary": "Sweepstakes periodic bonus opt-in info",
        "operationId": "getPeriodicBonusOptInInfo",
        "parameters": [
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Sweepstakes periodic bonus opt-in info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.rest.dto.SweepstakesPeriodicBonusOptInInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/kyc/poa/check": {
      "get": {
        "tags": [
          "kyc",
          "frontend kyc"
        ],
        "summary": "kyc idv status of customer",
        "operationId": "checkCustomerKycPoaStatus_1",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "KYC POA status of customer",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "NOT_VERIFIED",
                    "PROCESSING",
                    "FAILED",
                    "VERIFIED",
                    "REQUIRED",
                    "MANUAL_DECISION"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/kyc/info": {
      "get": {
        "tags": [
          "kyc",
          "frontend kyc"
        ],
        "summary": "KYC related information for the customer",
        "description": "Returns KYC related information for the customer",
        "operationId": "getKycInfo",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Returns KYC related information for the customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.KycInfoXto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/kyc/idv/check": {
      "get": {
        "tags": [
          "kyc",
          "frontend kyc"
        ],
        "summary": "kyc idv status of customer",
        "operationId": "checkCustomerKycIdvStatus_1",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "KYC IDV status of customer",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "NOT_VERIFIED",
                    "PROCESSING",
                    "FAILED",
                    "VERIFIED",
                    "REQUIRED",
                    "MANUAL_DECISION"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Customer is not found"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/details": {
      "get": {
        "tags": [
          "frontend"
        ],
        "summary": "Customer Details",
        "operationId": "playerData",
        "parameters": [
          {
            "name": "tenant",
            "in": "header"
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Customer basic data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CustomerDataXto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/frontend/customer/chat-token/{provider}": {
      "get": {
        "tags": [
          "frontend"
        ],
        "summary": "Chat token get/renew",
        "operationId": "chatToken",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ZENDESK"
              ]
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "The new token",
            "content": {
              "application/text": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/devices/{cid}": {
      "get": {
        "tags": [
          "Visitor id devices controller"
        ],
        "summary": "Get customer's devices visitorIds ",
        "operationId": "devices",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "List of DeviceXto",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DeviceXto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "jwt token is invalid or expired"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/devices/count/{visitorId}": {
      "get": {
        "tags": [
          "Visitor id devices controller"
        ],
        "summary": "Get customer count by device visitorId ",
        "operationId": "customers",
        "parameters": [
          {
            "name": "visitorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "jwt token is invalid or expired"
          },
          "200": {
            "description": "Number of customers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/tracking-data": {
      "get": {
        "tags": [
          "tracking-data"
        ],
        "summary": "Tracking data values",
        "description": "Will be used to preselect the available values for the search",
        "operationId": "customerSearch_2",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return all searchable tracking data items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.TrackingDataXto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/telegram-id/{cid}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get telegram id by customer id",
        "operationId": "getTelegramId",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "jwt token is invalid or expired"
          },
          "200": {
            "description": "Customer telegram id",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Player is not found "
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/balances/{cid}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get customer balances",
        "operationId": "getCustomerBalances",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Customer real and bonus balances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.BalanceXto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/balance/{cid}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get customer balances",
        "operationId": "getCustomerBalance",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Customer real and bonus balances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.BalanceXto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/all-bonus-names": {
      "get": {
        "tags": [
          "bonus",
          "customer"
        ],
        "summary": "bonus names",
        "description": "List all bonus names given to customers",
        "operationId": "getAllBonusNames",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "jwt token is invalid or expired"
          },
          "200": {
            "description": "List of bonus names",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/affiliates": {
      "get": {
        "tags": [
          "tracking-data",
          "affiliate-data"
        ],
        "summary": "Return all available affiliates in customers table",
        "description": "Will be used to preselect the available values in cms banner dropdown",
        "operationId": "getAllAffiliates",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Will return all searchable affiliate data items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.AffiliateController$AffiliateXto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/api/customer/delete-factor/{cid}": {
      "delete": {
        "tags": [
          "mfa",
          "frontend",
          "customer"
        ],
        "summary": "Deletes user's mfa factor",
        "operationId": "deleteFactor",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "200": {
            "description": "True if factor is deleted, False if it didn't exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "No user with such cid"
          },
          "422": {
            "description": "Validation errors"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "com.lis.platform.tenant.automation.controller.NewBrandController$DbCredentialsXto": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "int32"
          },
          "databaseName": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.commons.web.rest.DateRangeXto": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.SearchAmount": {
        "type": "object",
        "properties": {
          "operator": {
            "type": "string",
            "example": "LESS_THAN",
            "enum": [
              "LESS_THAN",
              "GREATER_THAN",
              "EQUAL",
              "BETWEEN"
            ]
          },
          "values": {
            "type": "array",
            "example": [
              "4.5",
              "100"
            ],
            "items": {
              "type": "number"
            }
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.TransactionHistorySearchRequestXto": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string",
            "example": "10110000003"
          },
          "type": {
            "type": "string",
            "example": "DEPOSIT",
            "deprecated": true,
            "enum": [
              "DEPOSIT",
              "WITHDRAWAL",
              "VAULT_DEPOSIT",
              "VAULT_WITHDRAW",
              "MANUAL_DEPOSIT",
              "MANUAL_WITHDRAWAL",
              "MANUAL_CASHBACK_REMOVAL",
              "MANUAL_VAULT_DEPOSIT",
              "MANUAL_VAULT_WITHDRAW"
            ]
          },
          "types": {
            "type": "array",
            "example": [
              "DEPOSIT",
              "WITHDRAWAL",
              "MANUAL_DEPOSIT",
              "VAULT_DEPOSIT",
              "VAULT_WITHDRAW",
              "MANUAL_WITHDRAWAL",
              "MANUAL_CASHBACK_REMOVAL",
              "MANUAL_VAULT_DEPOSIT",
              "MANUAL_VAULT_WITHDRAW"
            ],
            "items": {
              "type": "string",
              "example": "[\"DEPOSIT\",\"WITHDRAWAL\",\"MANUAL_DEPOSIT\",\"VAULT_DEPOSIT\",\"VAULT_WITHDRAW\",\"MANUAL_WITHDRAWAL\",\"MANUAL_CASHBACK_REMOVAL\",\"MANUAL_VAULT_DEPOSIT\",\"MANUAL_VAULT_WITHDRAW\"]",
              "enum": [
                "DEPOSIT",
                "WITHDRAWAL",
                "VAULT_DEPOSIT",
                "VAULT_WITHDRAW",
                "MANUAL_DEPOSIT",
                "MANUAL_WITHDRAWAL",
                "MANUAL_CASHBACK_REMOVAL",
                "MANUAL_VAULT_DEPOSIT",
                "MANUAL_VAULT_WITHDRAW"
              ]
            }
          },
          "dateRange": {
            "$ref": "#/components/schemas/com.lis.platform.commons.web.rest.DateRangeXto"
          },
          "amount": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.SearchAmount"
          },
          "paymentProcessor": {
            "type": "string"
          },
          "subProcessors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subPaymentMethod": {
            "type": "string"
          },
          "createdBy": {
            "type": "string",
            "example": "Admin"
          },
          "transactionStatuses": {
            "type": "array",
            "example": [
              "REQUESTED",
              "REVIEW",
              "APPROVED",
              "REJECTED",
              "INITIATED",
              "PAID",
              "DECLINED",
              "CANCELED"
            ],
            "items": {
              "type": "string",
              "example": "[\"REQUESTED\",\"REVIEW\",\"APPROVED\",\"REJECTED\",\"INITIATED\",\"PAID\",\"DECLINED\",\"CANCELED\"]",
              "enum": [
                "REQUESTED",
                "REVIEW",
                "APPROVED",
                "REJECTED",
                "INITIATED",
                "PAID",
                "DECLINED",
                "CANCELED",
                "EXPIRED",
                "ERROR",
                "PENDING_REPROCESS"
              ]
            }
          },
          "isTest": {
            "type": "boolean"
          },
          "registrationCountries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "currencies": {
            "type": "array",
            "example": [
              "ETH",
              "BTC",
              "USD"
            ],
            "items": {
              "type": "string",
              "example": "[\"ETH\",\"BTC\",\"USD\"]"
            }
          },
          "transactionId": {
            "type": "string",
            "description": "Platform transaction id",
            "example": "ffd4fc11-9cf1-4436-a86a-901a3cc6af69"
          },
          "externalTransactionId": {
            "type": "string",
            "description": "External transaction id",
            "example": "ffd4fc11-9cf1-4436-a86a-901a3cc6af69"
          },
          "approverIds": {
            "type": "array",
            "description": "Id of approver - may be BO user id or rule id",
            "example": "ffd4fc11-9cf1-4436-a86a-901a3cc6af69",
            "items": {
              "type": "string",
              "description": "Id of approver - may be BO user id or rule id",
              "example": "ffd4fc11-9cf1-4436-a86a-901a3cc6af69"
            }
          },
          "approverType": {
            "type": "string",
            "description": "type of approver, may be RULE or BO_OPERATOR",
            "example": "RULE"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.WalletTransactionXto": {
        "type": "object",
        "properties": {
          "balanceAfter": {
            "type": "number"
          },
          "balanceBefore": {
            "type": "number"
          },
          "balanceAfterSettlement": {
            "type": "number"
          },
          "balanceBeforeSettlement": {
            "type": "number"
          },
          "transactionId": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "currencyPlayer": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "DEPOSIT",
              "WITHDRAWAL",
              "VAULT_DEPOSIT",
              "VAULT_WITHDRAW",
              "MANUAL_DEPOSIT",
              "MANUAL_WITHDRAWAL",
              "MANUAL_CASHBACK_REMOVAL",
              "MANUAL_VAULT_DEPOSIT",
              "MANUAL_VAULT_WITHDRAW"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "REQUESTED",
              "REVIEW",
              "APPROVED",
              "REJECTED",
              "INITIATED",
              "PAID",
              "DECLINED",
              "CANCELED",
              "EXPIRED",
              "ERROR",
              "PENDING_REPROCESS"
            ]
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "paymentProcessor": {
            "type": "string"
          },
          "subProcessor": {
            "type": "string"
          },
          "paymentMethod": {
            "type": "string"
          },
          "subPaymentMethod": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "visitorId": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.WalletTransactionSearchRequestXto": {
        "type": "object",
        "properties": {
          "dateRange": {
            "$ref": "#/components/schemas/com.lis.platform.commons.web.rest.DateRangeXto"
          },
          "paymentProcessor": {
            "type": "string"
          },
          "subProcessors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "transactionStatuses": {
            "type": "array",
            "example": [
              "REQUESTED",
              "REVIEW",
              "APPROVED"
            ],
            "items": {
              "type": "string",
              "example": "[\"REQUESTED\",\"REVIEW\",\"APPROVED\"]",
              "enum": [
                "REQUESTED",
                "REVIEW",
                "APPROVED",
                "REJECTED",
                "INITIATED",
                "PAID",
                "DECLINED",
                "CANCELED",
                "EXPIRED",
                "ERROR",
                "PENDING_REPROCESS"
              ]
            }
          },
          "registrationCountries": {
            "type": "array",
            "example": [
              "CL",
              "BG"
            ],
            "items": {
              "type": "string",
              "example": "[\"CL\",\"BG\"]"
            }
          },
          "createdBy": {
            "type": "string",
            "example": "Admin"
          },
          "isTest": {
            "type": "boolean",
            "example": false
          },
          "currencies": {
            "type": "array",
            "example": [
              "ETH",
              "BTC",
              "USD"
            ],
            "items": {
              "type": "string",
              "example": "[\"ETH\",\"BTC\",\"USD\"]"
            }
          },
          "approverIds": {
            "type": "array",
            "description": "List of ids of approver - may be BO user id or rule id",
            "example": "ffd4fc11-9cf1-4436-a86a-901a3cc6af69",
            "items": {
              "type": "string",
              "description": "List of ids of approver - may be BO user id or rule id",
              "example": "ffd4fc11-9cf1-4436-a86a-901a3cc6af69"
            }
          },
          "approverType": {
            "type": "string",
            "description": "type of approver, may be RULE or BO_OPERATOR",
            "example": "RULE"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.WalletTransactionBasicResponseXto": {
        "type": "object",
        "properties": {
          "balanceAfter": {
            "type": "number"
          },
          "balanceBefore": {
            "type": "number"
          },
          "balanceAfterSettlement": {
            "type": "number"
          },
          "balanceBeforeSettlement": {
            "type": "number"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "transactionId": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "playerCurrency": {
            "type": "string"
          },
          "amountPlayerCurrency": {
            "type": "number"
          },
          "amountBrandCurrency": {
            "type": "number"
          },
          "paymentProcessor": {
            "type": "string"
          },
          "subProcessor": {
            "type": "string"
          },
          "paymentMethod": {
            "type": "string"
          },
          "transactionStatus": {
            "type": "string",
            "enum": [
              "REQUESTED",
              "REVIEW",
              "APPROVED",
              "REJECTED",
              "INITIATED",
              "PAID",
              "DECLINED",
              "CANCELED",
              "EXPIRED",
              "ERROR",
              "PENDING_REPROCESS"
            ]
          },
          "cid": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "registrationCountry": {
            "type": "string"
          },
          "ggr": {
            "type": "number"
          },
          "accountStatus": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "BLOCKED",
              "SELF_EXCLUDED",
              "COOL_OFF"
            ]
          },
          "playerEmail": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.DateTimeRangeXto": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.SportsbookBetHistorySearchRequestXto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "11 digits unique across all brands customer id",
            "example": "10110000003"
          },
          "statuses": {
            "type": "array",
            "description": "List of bet statuses",
            "example": [
              "OPEN",
              "WON"
            ],
            "items": {
              "type": "string",
              "description": "List of bet statuses",
              "example": "[\"OPEN\",\"WON\"]",
              "enum": [
                "OPEN",
                "WON",
                "LOST",
                "REFUNDED",
                "REJECTED"
              ]
            }
          },
          "dateTimeRangeXto": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DateTimeRangeXto"
          },
          "transactionId": {
            "type": "string",
            "description": "Platform transaction id",
            "example": "ffd4fc11-9cf1-4436-a86a-901a3cc6af69"
          },
          "externalTransactionId": {
            "type": "string",
            "description": "External transaction id",
            "example": "ffd4fc11-9cf1-4436-a86a-901a3cc6af69"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.SportsbookBetHistoryResponseXto": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "betType": {
            "type": "string",
            "enum": [
              "SINGLE",
              "COMBO",
              "SYSTEM"
            ]
          },
          "externalTransactionId": {
            "type": "string"
          },
          "transactionId": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "transactionCurrency": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "winAmount": {
            "type": "number"
          },
          "transactionAmount": {
            "type": "number"
          },
          "transactionWinAmount": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "OPEN",
              "WON",
              "LOST",
              "REFUNDED",
              "REJECTED"
            ]
          },
          "isCashout": {
            "type": "boolean"
          }
        }
      },
      "com.lis.platform.integration.customer.kafka.xto.loyalty.LoyaltyHistorySearchRequestXto": {
        "required": [
          "customerId"
        ],
        "type": "object",
        "properties": {
          "nextItemId": {
            "type": "integer",
            "format": "int64"
          },
          "nextRangeId": {
            "type": "integer",
            "format": "int64"
          },
          "customerId": {
            "type": "string",
            "description": "11 digits unique across all brands customer id",
            "example": "10110000003"
          },
          "eventTypes": {
            "type": "array",
            "description": "The TYPE of the event which caused granting of points. It can be 'LOGIN' or 'DEPOSIT' or 'BET'",
            "example": [
              "LOGIN",
              "DEPOSIT"
            ],
            "items": {
              "type": "string",
              "description": "The TYPE of the event which caused granting of points. It can be 'LOGIN' or 'DEPOSIT' or 'BET'",
              "example": "[\"LOGIN\",\"DEPOSIT\"]",
              "enum": [
                "BET",
                "DEPOSIT",
                "LOGIN",
                "SPORTS_BET",
                "CASINO_BET"
              ]
            }
          },
          "dateRange": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DateTimeRangeXto"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.LoyaltyHistoryController$PartitionedLoyaltyHistoryResponse": {
        "type": "object",
        "properties": {
          "nextItemId": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/com.lis.platform.integration.customer.kafka.xto.loyalty.LoyaltyHistoryXto"
            }
          }
        }
      },
      "com.lis.platform.integration.customer.kafka.xto.loyalty.LoyaltyHistoryXto": {
        "type": "object",
        "properties": {
          "eventType": {
            "type": "string",
            "description": "The TYPE of the event which caused granting of points. It can be 'LOGIN' or 'DEPOSIT' or 'BET'",
            "example": "LOGIN",
            "enum": [
              "BET",
              "DEPOSIT",
              "LOGIN",
              "SPORTS_BET",
              "CASINO_BET"
            ]
          },
          "platformId": {
            "type": "string",
            "description": "The ID of the event which caused granting of points.",
            "example": "XXX"
          },
          "eventTime": {
            "type": "string",
            "description": "The time of the event.",
            "format": "date-time",
            "example": "2021-10-11T12:13:14+02:00"
          },
          "pointsGiven": {
            "type": "number",
            "description": "Amount of points given with this event.",
            "example": 1
          },
          "currentPoints": {
            "type": "number",
            "description": "The total number of points which the player have at that moment. This includes the points given with this event.",
            "example": 1500
          }
        }
      },
      "com.lis.platform.integration.customer.service.kyc.dto.VerificationDto": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "example": "606434a7cc70ad00014e04ba"
          },
          "cid": {
            "type": "string",
            "example": "10210000000"
          },
          "status": {
            "type": "string",
            "example": "VERIFIED",
            "enum": [
              "CREATED",
              "STARTED",
              "SUBMITTED",
              "RESUBMISSION",
              "PROCESSING",
              "APPROVED",
              "REJECTED",
              "FAILED",
              "MANUAL_DECISION",
              "CLOSED"
            ]
          },
          "verificationFlowUrl": {
            "type": "string",
            "example": "https://magic.veriff.me/v/eyer.Q3YzIifQ.QprNLx81"
          }
        }
      },
      "com.lis.platform.integration.customer.service.kyc.dto.CompleteVerificationRequestDto": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "example": "10210000000"
          }
        }
      },
      "com.lis.platform.integration.customer.service.kyc.dto.CompleteVerificationResponseDto": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "example": "10210000000"
          },
          "cid": {
            "type": "string",
            "example": "10210000000"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.HcaptchaVerifyRequestXto": {
        "type": "object",
        "properties": {
          "ipAddress": {
            "type": "string"
          },
          "flow": {
            "type": "string",
            "enum": [
              "LOGIN",
              "REGISTRATION",
              "PASSWORD_RESET",
              "UNAUTHORIZED_RESOURCES",
              "FIELD_VALIDATION"
            ]
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.TrackingEventXto": {
        "required": [
          "eventType"
        ],
        "type": "object",
        "properties": {
          "eventType": {
            "type": "string",
            "description": "Event type",
            "example": "REGISTRATION_OPEN",
            "enum": [
              "REGISTRATION_OPEN",
              "REGISTRATION_SUCCESS",
              "LOGIN_OPEN",
              "LOGIN_SUCCESS",
              "DEPOSIT_SUCCESS",
              "WITHDRAWAL_OPEN",
              "WITHDRAWAL_SUCCESS",
              "SPORTSBOOK_BET",
              "SPORTSBOOK_CASHOUT",
              "CASINO_BET",
              "SEARCH"
            ]
          },
          "extraAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "additional attributes to be sent"
            },
            "description": "additional attributes to be sent"
          }
        }
      },
      "com.lis.platform.integration.customer.rest.dto.SweepstakesPeriodicBonusOptInResponse": {
        "type": "object",
        "properties": {
          "claimable": {
            "type": "boolean",
            "description": "Whether bonuses are claimable at this moment",
            "example": true
          },
          "remainingTimeToClaim": {
            "type": "integer",
            "description": "Number of minutes after which sweepstakes bonuses can be claimed. Possible values:\nnull - this will be the value if claimable field is false and if bonus can not claimed in the future\n0 - no remaining time, bonuses can be claimed immediately\nother than 0 - remaining minutes until bonuses will be claimable\n\n",
            "format": "int32",
            "example": 60
          },
          "claimBonusConfigured": {
            "type": "boolean",
            "description": "Whether claim bonus configuration is present",
            "example": false
          },
          "claimLimitsReached": {
            "type": "boolean",
            "description": "Whether some claim limits are reached.\n",
            "example": true
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.VaultWithdrawRequestXto": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "activeVault": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "totp": {
            "pattern": "\\d+",
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.VaultTransactionRequestXto": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "activeVault": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.CryptoWithdrawRequestXto": {
        "required": [
          "address",
          "amount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "BTC"
          },
          "address": {
            "type": "string",
            "description": "Address in the blockchain",
            "example": "39mFf3X46YzUtfdwVQpYXPCMydc74ccbAZ"
          },
          "tag": {
            "type": "string",
            "description": "Tag(in case of crypto) used to receive money for transaction",
            "example": "1755105"
          },
          "amount": {
            "type": "number",
            "description": "Amount to withdraw",
            "example": 0.0001
          },
          "totp": {
            "pattern": "\\d+",
            "type": "string",
            "description": "One time password if 2fa is enabled",
            "example": "123456"
          },
          "network": {
            "type": "string",
            "description": "Network (in case of crypto) in which the transaction will be executed",
            "example": "USDTE"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.CryptoWithdrawResponseXto": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string"
          },
          "amountSystem": {
            "type": "number"
          },
          "brandSystemCurrency": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.CancelWalletTransactionRequestXto": {
        "required": [
          "transactionId"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.InitiateWalletTransactionRequestXto": {
        "required": [
          "amount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "BTC"
          },
          "amount": {
            "type": "number",
            "description": "Amount to withdraw",
            "example": 0.0001
          },
          "network": {
            "type": "string",
            "description": "Network (in case of crypto) in which the transaction will be executed",
            "example": "USDTE"
          },
          "tag": {
            "type": "string",
            "description": "Tag(in case of crypto) used to receive money for transaction",
            "example": "1755105"
          },
          "totp": {
            "pattern": "\\d+",
            "type": "string",
            "description": "One time password if 2fa is enabled",
            "example": "123456"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.InitiateWalletTransactionResponseXto": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string"
          },
          "transactionFlowUrl": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.ResetPasswordXto": {
        "required": [
          "newPassword",
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.ResetPasswordTokenRequest": {
        "type": "object",
        "properties": {
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.TokenValidResponseXto": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.InitiateResetPasswordXto": {
        "required": [
          "email",
          "resetPasswordPageUrl"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "resetPasswordPageUrl": {
            "type": "string"
          },
          "bodyTemplate": {
            "type": "string"
          },
          "bodyParameters": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "RESET_PASSWORD_LINK",
                "MIGRATION_RESET_PASSWORD_LINK",
                "SOCIAL_LOGIN_RESET_PASSWORD_LINK",
                "SOCIAL_LOGIN_TYPE_DISPLAY_NAME"
              ]
            }
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.FrontendWalletConnectLoginXto": {
        "required": [
          "walletAddress",
          "walletMessage",
          "walletSignature"
        ],
        "type": "object",
        "properties": {
          "walletAddress": {
            "type": "string",
            "example": "walletAddress"
          },
          "walletSignature": {
            "type": "string",
            "example": "walletSignature"
          },
          "walletMessage": {
            "type": "string",
            "example": "walletMessage"
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.AffiliateDataResponseXto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "affiliateProvider": {
            "type": "string",
            "enum": [
              "MYAFFILIATES",
              "NETREFER",
              "GENERIC"
            ]
          },
          "content": {
            "type": "string"
          },
          "affiliateId": {
            "type": "string"
          },
          "affiliateName": {
            "type": "string"
          },
          "affiliateGroupId": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.CustomerAccountResponseXto": {
        "type": "object",
        "properties": {
          "nickName": {
            "type": "string",
            "description": "Nick name",
            "example": "nick-name"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "example": "First"
          },
          "middleName": {
            "type": "string",
            "description": "Middle name",
            "example": "Middle"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "example": "Last"
          },
          "gender": {
            "type": "string",
            "description": "The player gender",
            "example": "MALE",
            "enum": [
              "MALE",
              "FEMALE",
              "OTHER"
            ]
          },
          "email": {
            "type": "string",
            "description": "Player email. This is the main identifier of the player, thus it must be unique for a brand",
            "example": "john.doe@test.com"
          },
          "countryCode": {
            "type": "string",
            "description": "Two digit country code",
            "example": "US"
          },
          "ipCountryCode": {
            "type": "string",
            "description": "Two digit country code based on the playe ip from which he/she is registring. Used for fraud detection if it is different than the countryCode",
            "example": "US"
          },
          "languageCode": {
            "type": "string",
            "description": "The language code of the player",
            "example": "en"
          },
          "currencyCode": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number containing all the phone data: country code + phone number",
            "example": "9123459"
          },
          "phoneCode": {
            "type": "string",
            "description": "The phone number code",
            "example": "+2"
          },
          "registrationDate": {
            "type": "string",
            "description": "Registration date. ZonedDateTime",
            "format": "date-time",
            "example": "2020-06-11T17:31:32+03:00"
          },
          "address": {
            "type": "string",
            "description": "Full address",
            "example": "Sofia, blv. Car Osvoboditel 10"
          },
          "city": {
            "type": "string",
            "description": "City name",
            "example": "Varna"
          },
          "zip": {
            "type": "string",
            "description": "Zip code. Only for countries where it is applicable",
            "example": "1000"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth. ZonedDateTime",
            "format": "date"
          },
          "timeZone": {
            "type": "string",
            "description": "Player country time zone",
            "example": "Pacific/Midway"
          },
          "testAccount": {
            "type": "boolean",
            "description": "Marks account as test",
            "example": true
          },
          "contactEmail": {
            "type": "boolean",
            "description": "Whether the player agrees to contact him via email using his/her contact data",
            "example": true
          },
          "contactSms": {
            "type": "boolean",
            "description": "Whether the player agrees to contact him via sms using his/her contact data",
            "example": true
          },
          "customerId": {
            "type": "string",
            "description": "The generated customer id, which is unique for all brands",
            "example": "10010000024"
          },
          "externalId": {
            "type": "string",
            "description": "Player external Id",
            "example": "LWVnV5ZtlWVlxhtw"
          },
          "affiliateData": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.AffiliateDataResponseXto"
          },
          "preferences": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerPreferencesXto"
          },
          "status": {
            "type": "string",
            "description": "Player's account status",
            "example": "ACTIVE",
            "enum": [
              "ACTIVE",
              "BLOCKED",
              "SELF_EXCLUDED",
              "COOL_OFF"
            ]
          },
          "loginType": {
            "type": "string",
            "description": "Player's login type",
            "example": "PASSWORD",
            "enum": [
              "PASSWORD",
              "GOOGLE",
              "WALLET_CONNECT",
              "FACEBOOK",
              "DEVCODE_IDENTITY",
              "TELEGRAM"
            ]
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.CustomerPreferencesXto": {
        "type": "object",
        "properties": {
          "preferredFiatCurrency": {
            "type": "string"
          },
          "preferredGameLaunchCurrency": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          }
        },
        "description": "Player preferences",
        "example": {
          "preferredFiatCurrency": "EUR"
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.WalletConnectGenerateMsgRequestXto": {
        "type": "object",
        "properties": {
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.registration.FrontendAccountPreferencesXto": {
        "type": "object",
        "properties": {
          "languageCode": {
            "type": "string"
          },
          "timezoneOffsetMinutesUtc": {
            "type": "integer",
            "format": "int32"
          },
          "contactMe": {
            "type": "boolean"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.registration.FrontendWalletConnectRegistrationRequest": {
        "required": [
          "account"
        ],
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.registration.WalletConnectAccountXto"
          },
          "ipAddress": {
            "type": "string"
          },
          "affiliateToken": {
            "type": "string"
          },
          "affiliateOfflineCode": {
            "type": "string"
          },
          "affiliateClickId": {
            "type": "string"
          },
          "affiliateWebsiteId": {
            "type": "string"
          },
          "affiliatePublisherId": {
            "type": "string"
          },
          "affiliateProvider": {
            "type": "string",
            "enum": [
              "MYAFFILIATES",
              "NETREFER",
              "GENERIC"
            ]
          },
          "referredBy": {
            "type": "string"
          },
          "externalSystemId": {
            "type": "string"
          },
          "externalSystemUsername": {
            "type": "string"
          },
          "preferences": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.registration.FrontendAccountPreferencesXto"
          },
          "contactMe": {
            "type": "boolean"
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.registration.WalletConnectAccountXto": {
        "required": [
          "walletAddress",
          "walletMessage",
          "walletSignature"
        ],
        "type": "object",
        "properties": {
          "nickName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "timeZone": {
            "type": "string"
          },
          "selectedBonusId": {
            "type": "string",
            "format": "uuid"
          },
          "countryCode": {
            "type": "string"
          },
          "currencyCode": {
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          },
          "phoneCode": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "walletAddress": {
            "type": "string"
          },
          "walletSignature": {
            "type": "string"
          },
          "walletMessage": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.sportsbook.VerificationFilesXto": {
        "type": "object",
        "properties": {
          "flow": {
            "type": "string",
            "description": "possible values : KYC_IDV, KYC_POA",
            "example": "KYC_IDV",
            "enum": [
              "KYC_IDV",
              "KYC_POA",
              "RESET_PASSWORD",
              "OTHER"
            ]
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.ValidFieldRequestXto": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value of the validated field",
            "example": "admin@supremo.com"
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.ValidFieldResponse": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.CustomerExistsByNicknameRequestXto": {
        "required": [
          "nickName"
        ],
        "type": "object",
        "properties": {
          "nickName": {
            "type": "string",
            "description": "Nickname to be checked for existence",
            "example": "test"
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.FrontendTransactionHistorySearchRequestXto": {
        "type": "object",
        "properties": {
          "transactionType": {
            "type": "string",
            "description": "Transaction Type",
            "example": "DEPOSIT",
            "enum": [
              "DEPOSIT",
              "WITHDRAWAL",
              "VAULT_DEPOSIT",
              "VAULT_WITHDRAW",
              "MANUAL_DEPOSIT",
              "MANUAL_WITHDRAWAL",
              "MANUAL_VAULT_DEPOSIT",
              "MANUAL_VAULT_WITHDRAW"
            ]
          },
          "dateRange": {
            "$ref": "#/components/schemas/com.lis.platform.commons.web.rest.DateRangeXto"
          },
          "currency": {
            "type": "string",
            "description": "currency",
            "example": "BTC"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.FrontendTransactionHistoryResponseXto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "DEPOSIT",
              "WITHDRAWAL",
              "VAULT_DEPOSIT",
              "VAULT_WITHDRAW",
              "MANUAL_DEPOSIT",
              "MANUAL_WITHDRAWAL",
              "MANUAL_VAULT_DEPOSIT",
              "MANUAL_VAULT_WITHDRAW"
            ]
          },
          "currency": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "REQUESTED",
              "REVIEW",
              "APPROVED",
              "REJECTED",
              "INITIATED",
              "PAID",
              "DECLINED",
              "CANCELED",
              "EXPIRED",
              "ERROR",
              "PENDING_REPROCESS"
            ]
          },
          "confirmation": {
            "type": "string"
          },
          "transactionId": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.registration.TelegramAccountXto": {
        "type": "object",
        "properties": {
          "nickName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "timeZone": {
            "type": "string"
          },
          "selectedBonusId": {
            "type": "string",
            "format": "uuid"
          },
          "countryCode": {
            "type": "string"
          },
          "currencyCode": {
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          },
          "phoneCode": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "telegramUsername": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.registration.TelegramSocialRegistrationRequest": {
        "required": [
          "account"
        ],
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.registration.TelegramAccountXto"
          },
          "ipAddress": {
            "type": "string"
          },
          "affiliateToken": {
            "type": "string"
          },
          "affiliateOfflineCode": {
            "type": "string"
          },
          "affiliateClickId": {
            "type": "string"
          },
          "affiliateWebsiteId": {
            "type": "string"
          },
          "affiliatePublisherId": {
            "type": "string"
          },
          "affiliateProvider": {
            "type": "string",
            "enum": [
              "MYAFFILIATES",
              "NETREFER",
              "GENERIC"
            ]
          },
          "referredBy": {
            "type": "string"
          },
          "externalSystemId": {
            "type": "string"
          },
          "externalSystemUsername": {
            "type": "string"
          },
          "contactMe": {
            "type": "boolean"
          },
          "termsAndConditionsAccepted": {
            "type": "boolean"
          },
          "authDate": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "dataCheckString": {
            "type": "string"
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.TelegramSocialLoginRequestXto": {
        "type": "object",
        "properties": {
          "authDate": {
            "type": "string",
            "description": "Epoch seconds of the login, send by TG",
            "example": "1713260579"
          },
          "id": {
            "type": "string",
            "description": "Telegram user id",
            "example": "100000000"
          },
          "hash": {
            "type": "string",
            "description": "Hash string that is signed by TG with the auth token of the bot"
          },
          "dataCheckString": {
            "type": "string",
            "description": "String of all properties sent by TG, ordered alphabetically, that should be signed and verified against the hash"
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.CustomerDataXto": {
        "type": "object",
        "properties": {
          "freeBets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "address": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "countryISO3": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "phoneCode": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "accountPreferences": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.AccountPreferencesXto"
          },
          "communicationsVerified": {
            "type": "boolean"
          },
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CustomerDataXto$Balance"
            }
          },
          "tokenRenewUrl": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "mfaLogin": {
            "type": "boolean"
          },
          "mfaWithdrawal": {
            "type": "boolean"
          },
          "mfaStatus": {
            "type": "string",
            "enum": [
              "NOT_SET",
              "ACTIVE",
              "DELETED"
            ]
          },
          "mfaReferenceId": {
            "type": "string"
          },
          "remind2FA": {
            "type": "boolean"
          },
          "kycData": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.CustomerDataXto$KycData"
          },
          "loginType": {
            "type": "string",
            "enum": [
              "PASSWORD",
              "GOOGLE",
              "WALLET_CONNECT",
              "FACEBOOK",
              "DEVCODE_IDENTITY",
              "TELEGRAM"
            ]
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.CustomerDataXto$Balance": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "currencyPrecision": {
            "type": "integer",
            "format": "int32"
          },
          "balance": {
            "type": "number"
          },
          "bonusBalance": {
            "type": "number"
          },
          "vaultBalance": {
            "type": "number"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.CustomerDataXto$KycData": {
        "type": "object",
        "properties": {
          "idvStatus": {
            "type": "string",
            "enum": [
              "NOT_VERIFIED",
              "PROCESSING",
              "FAILED",
              "VERIFIED",
              "REQUIRED",
              "MANUAL_DECISION"
            ]
          },
          "poaStatus": {
            "type": "string",
            "enum": [
              "NOT_VERIFIED",
              "PROCESSING",
              "FAILED",
              "VERIFIED",
              "REQUIRED",
              "MANUAL_DECISION"
            ]
          },
          "displayType": {
            "type": "string",
            "enum": [
              "IDV_EXPIRATION_REMINDER",
              "IDV_PROMPT",
              "IDV_VERIFICATION",
              "POA_PROMPT",
              "POA_VERIFICATION",
              "VERIFICATION_BOTH",
              "NONE"
            ]
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.AccountPreferencesXto": {
        "type": "object",
        "properties": {
          "zoneId": {
            "type": "string",
            "description": "Player country time zone",
            "example": "Pacific/Midway"
          },
          "languageCode": {
            "type": "string",
            "description": "The language code of the player",
            "example": "en"
          },
          "preferredFiatCurrency": {
            "type": "string",
            "description": "The player preferred Fiat currency",
            "example": "USD"
          },
          "preferredGameLaunchCurrency": {
            "type": "string",
            "description": "The player game launchCurrency for the player",
            "example": "USD"
          },
          "hidden": {
            "type": "boolean",
            "description": "player username is hidden on public pages",
            "example": true
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.TelegramChatbotLoginRequestXto": {
        "required": [
          "initData"
        ],
        "type": "object",
        "properties": {
          "initData": {
            "type": "string",
            "description": "Forwarded by front end when opening the website through Telegram chat bot"
          },
          "referredBy": {
            "type": "string",
            "description": "Customer id of referring player",
            "example": "1000000001"
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.sportsbook.FrontendSportsbookBetHistorySearchRequestXto": {
        "type": "object",
        "properties": {
          "dateRange": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DateTimeRangeXto"
          },
          "currency": {
            "type": "string",
            "description": "Bet currency",
            "example": "BTC"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.sportsbook.FrontendSportsbookBetHistoryResponseXto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "betType": {
            "type": "string",
            "enum": [
              "SINGLE",
              "COMBO",
              "SYSTEM"
            ]
          },
          "currency": {
            "type": "string"
          },
          "stake": {
            "type": "number"
          },
          "gain": {
            "type": "number"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.SocialInfoRequestXto": {
        "required": [
          "connectionToken"
        ],
        "type": "object",
        "properties": {
          "connectionToken": {
            "type": "string",
            "example": "connectionToken"
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.service.sociallogin.xto.SocialInfoResponseXto": {
        "type": "object",
        "properties": {
          "fieldsWithProviderValue": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.FrontendLoginXto": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john.doe@test.com"
          },
          "password": {
            "type": "string",
            "example": "password"
          },
          "nickname": {
            "type": "string",
            "description": "used only when email field is null or not present",
            "example": "johnDoe"
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.FrontendSocialLoginXto": {
        "required": [
          "connectionToken"
        ],
        "type": "object",
        "properties": {
          "connectionToken": {
            "type": "string",
            "example": "connectionToken"
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.CreateInvoiceRequestXto": {
        "required": [
          "failureUrl",
          "packageId",
          "successUrl"
        ],
        "type": "object",
        "properties": {
          "packageId": {
            "type": "string"
          },
          "successUrl": {
            "type": "string"
          },
          "failureUrl": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.dto.FactorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "qrUri": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          },
          "codeLength": {
            "type": "integer",
            "format": "int32"
          },
          "verified": {
            "type": "boolean"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.FirstLoginRequestXto": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email",
            "example": "supremo@abv.com"
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.CustomerExistsByEmailRequestXto": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email to be checked for existence",
            "example": "admin@supremo.com"
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.registration.FrontendRegistrationRequestV2": {
        "required": [
          "account"
        ],
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.registration.PasswordAccountXto"
          },
          "ipAddress": {
            "type": "string"
          },
          "affiliateToken": {
            "type": "string"
          },
          "affiliateOfflineCode": {
            "type": "string"
          },
          "affiliateClickId": {
            "type": "string"
          },
          "affiliateWebsiteId": {
            "type": "string"
          },
          "affiliatePublisherId": {
            "type": "string"
          },
          "affiliateProvider": {
            "type": "string",
            "enum": [
              "MYAFFILIATES",
              "NETREFER",
              "GENERIC"
            ]
          },
          "referredBy": {
            "type": "string"
          },
          "externalSystemId": {
            "type": "string"
          },
          "externalSystemUsername": {
            "type": "string"
          },
          "contactMe": {
            "type": "boolean"
          },
          "termsAndConditionsAccepted": {
            "type": "boolean"
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.registration.PasswordAccountXto": {
        "type": "object",
        "properties": {
          "nickName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "timeZone": {
            "type": "string"
          },
          "selectedBonusId": {
            "type": "string",
            "format": "uuid"
          },
          "countryCode": {
            "type": "string"
          },
          "currencyCode": {
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          },
          "phoneCode": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.registration.FrontendSocialRegistrationRequestV2": {
        "required": [
          "account"
        ],
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.registration.SocialAccountXto"
          },
          "ipAddress": {
            "type": "string"
          },
          "affiliateToken": {
            "type": "string"
          },
          "affiliateOfflineCode": {
            "type": "string"
          },
          "affiliateClickId": {
            "type": "string"
          },
          "affiliateWebsiteId": {
            "type": "string"
          },
          "affiliatePublisherId": {
            "type": "string"
          },
          "affiliateProvider": {
            "type": "string",
            "enum": [
              "MYAFFILIATES",
              "NETREFER",
              "GENERIC"
            ]
          },
          "referredBy": {
            "type": "string"
          },
          "externalSystemId": {
            "type": "string"
          },
          "externalSystemUsername": {
            "type": "string"
          },
          "contactMe": {
            "type": "boolean"
          },
          "termsAndConditionsAccepted": {
            "type": "boolean"
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.registration.SocialAccountXto": {
        "required": [
          "connectionToken"
        ],
        "type": "object",
        "properties": {
          "nickName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "timeZone": {
            "type": "string"
          },
          "selectedBonusId": {
            "type": "string",
            "format": "uuid"
          },
          "countryCode": {
            "type": "string"
          },
          "currencyCode": {
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          },
          "phoneCode": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "connectionToken": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.CompleteMfaXto": {
        "required": [
          "mfaReferenceId",
          "totp"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john.doe@test.com"
          },
          "mfaReferenceId": {
            "type": "string",
            "example": "8LqDGbMX5BN9HM01uJiVHxInb47Q98xtEdiGsQKHRSg="
          },
          "totp": {
            "pattern": "\\d+",
            "type": "string",
            "example": "123456"
          },
          "nickname": {
            "type": "string",
            "description": "used only when email field is null or not present",
            "example": "johnDoe"
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.FrontendBetHistorySearchRequestXto": {
        "type": "object",
        "properties": {
          "nextItemId": {
            "type": "integer",
            "format": "int64"
          },
          "nextRangeId": {
            "type": "integer",
            "format": "int64"
          },
          "gameIds": {
            "type": "array",
            "description": "List of provider game ids",
            "example": [
              "evo_powerblackjak",
              "evo_firstpersonbaccarat"
            ],
            "items": {
              "type": "string",
              "description": "List of provider game ids",
              "example": "[\"evo_powerblackjak\",\"evo_firstpersonbaccarat\"]"
            }
          },
          "gameTypes": {
            "type": "array",
            "description": "List of game types",
            "example": [
              "SLOTS",
              "TABLE_CARD"
            ],
            "items": {
              "type": "string",
              "description": "List of game types",
              "example": "[\"SLOTS\",\"TABLE_CARD\"]",
              "enum": [
                "SLOTS",
                "JACKPOTS",
                "VIDEO_POKER",
                "ROULETTE",
                "TABLE_CARD",
                "BLACKJACK",
                "BACCARAT",
                "MINIGAMES",
                "OTHERS",
                "DEFAULT",
                "OTHERS_LIVE",
                "LIVE_BACCARAT",
                "LIVE_BLACKJACK",
                "GAME_SHOW",
                "LIVE_ROULETTE",
                "DICE",
                "DRAGON_TIGER",
                "CRASH",
                "SCRATCH",
                "ARCADE",
                "LOTTERY",
                "BINGO",
                "VIRTUAL",
                "PLAYER_PROPS",
                "OTHERS_TABLE",
                "LIVE_DICE",
                "LIVE_DRAGON_TIGER",
                "LIVE_POKER"
              ]
            }
          },
          "dateTimeRangeXto": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DateTimeRangeXto"
          },
          "betCurrency": {
            "type": "string",
            "description": "Bet currency",
            "example": "BTC"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.CustomerFrontendController$BetHistoryFrontendResponseXto": {
        "type": "object",
        "properties": {
          "nextItemId": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.FrontendBetHistoryResponseXto"
            }
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.FrontendBetHistoryResponseXto": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "platformGameId": {
            "type": "string"
          },
          "betCurrency": {
            "type": "string"
          },
          "totalBetAmount": {
            "type": "number"
          },
          "wonAmount": {
            "type": "number"
          },
          "externalTransactionId": {
            "type": "string",
            "deprecated": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "betStatus": {
            "type": "string",
            "enum": [
              "LOST",
              "WON",
              "CASH_DROP",
              "JACKPOT",
              "PENDING"
            ]
          },
          "roundId": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.DevcodeIdentityTokenRequestXto": {
        "required": [
          "code",
          "state"
        ],
        "type": "object",
        "properties": {
          "state": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "hcaptchaToken": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.DevcodeIdentityUserRequestXto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DevcodeIdentityUserRequestXto$Address"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DevcodeIdentityUserRequestXto$Address"
            }
          },
          "affiliateToken": {
            "type": "string"
          },
          "affiliateOfflineCode": {
            "type": "string"
          },
          "affiliateClickId": {
            "type": "string"
          },
          "affiliateWebsiteId": {
            "type": "string"
          },
          "affiliatePublisherId": {
            "type": "string"
          },
          "affiliateProvider": {
            "type": "string",
            "enum": [
              "MYAFFILIATES",
              "NETREFER",
              "GENERIC"
            ]
          },
          "referredBy": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string"
          },
          "enduser_id": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "phone_number": {
            "type": "string"
          },
          "phone_number_verified": {
            "type": "boolean"
          },
          "family_name": {
            "type": "string"
          },
          "given_name": {
            "type": "string"
          },
          "birthdate": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.DevcodeIdentityUserRequestXto$Address": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "formatted": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "street_address": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "locality": {
            "type": "string"
          },
          "is_verified": {
            "type": "boolean"
          },
          "country_alpha2": {
            "type": "string"
          },
          "checked_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.DevcodeIdentityUserResponseXto": {
        "type": "object",
        "properties": {
          "enduser_id": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.DevcodeIdentitySessionRequestXto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "enduser_id": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.DevcodeIdentitySessionResponseXto": {
        "type": "object",
        "properties": {
          "session_id": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.DevcodeIdentityAuthRequestXto": {
        "required": [
          "country",
          "redirectUrl"
        ],
        "type": "object",
        "properties": {
          "redirectUrl": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "affiliateToken": {
            "type": "string"
          },
          "affiliateOfflineCode": {
            "type": "string"
          },
          "affiliateClickId": {
            "type": "string"
          },
          "affiliateWebsiteId": {
            "type": "string"
          },
          "affiliatePublisherId": {
            "type": "string"
          },
          "affiliateProvider": {
            "type": "string",
            "enum": [
              "MYAFFILIATES",
              "NETREFER",
              "GENERIC"
            ]
          },
          "referredBy": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.AuthUrlXto": {
        "type": "object",
        "properties": {
          "authUrl": {
            "type": "string"
          },
          "sseUUID": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.commons.web.rest.PageableResponseXto": {
        "type": "object",
        "properties": {
          "hasMore": {
            "type": "boolean",
            "description": "if this is the last page of items",
            "example": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of available items",
            "format": "int64",
            "example": 200
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of available pages",
            "format": "int32",
            "example": 3
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.CustomerSearchParamsXto": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string",
            "description": "11 digits unique across all brands customer id",
            "example": "10110000003"
          },
          "nickname": {
            "type": "string",
            "description": "nickname (username) of the customer",
            "example": "jdoe"
          },
          "name": {
            "type": "string",
            "description": "The full name of the customer",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Customer email.",
            "example": "john.doe@test.com"
          },
          "includeTestAccounts": {
            "type": "boolean",
            "description": "Whether to add test accounts to the search result",
            "example": true
          },
          "regCountries": {
            "type": "array",
            "description": "List of country codes",
            "example": [
              "BG",
              "US"
            ],
            "items": {
              "type": "string",
              "description": "List of country codes",
              "example": "[\"BG\",\"US\"]"
            }
          },
          "regIpCountries": {
            "type": "array",
            "description": "List of ip country codes",
            "example": [
              "BG",
              "US"
            ],
            "items": {
              "type": "string",
              "description": "List of ip country codes",
              "example": "[\"BG\",\"US\"]"
            }
          },
          "languages": {
            "type": "array",
            "description": "List of language codes",
            "example": [
              "bg",
              "us"
            ],
            "items": {
              "type": "string",
              "description": "List of language codes",
              "example": "[\"bg\",\"us\"]"
            }
          },
          "accountStatuses": {
            "type": "array",
            "description": "List of account statues",
            "example": [
              "ACTIVE",
              "BLOCKED"
            ],
            "items": {
              "type": "string",
              "description": "List of account statues",
              "example": "[\"ACTIVE\",\"BLOCKED\"]",
              "enum": [
                "ACTIVE",
                "BLOCKED",
                "SELF_EXCLUDED",
                "COOL_OFF"
              ]
            }
          },
          "kycIdvStatuses": {
            "type": "array",
            "description": "List of KYC (Know Your Customer) statuses",
            "example": [
              "NOT_VERIFIED",
              "VERIFIED"
            ],
            "items": {
              "type": "string",
              "description": "List of KYC (Know Your Customer) statuses",
              "example": "[\"NOT_VERIFIED\",\"VERIFIED\"]",
              "enum": [
                "NOT_VERIFIED",
                "PROCESSING",
                "FAILED",
                "VERIFIED",
                "REQUIRED",
                "MANUAL_DECISION"
              ]
            }
          },
          "kycPoaStatuses": {
            "type": "array",
            "description": "List of KYC (Know Your Customer) statuses",
            "example": [
              "NOT_VERIFIED",
              "VERIFIED"
            ],
            "items": {
              "type": "string",
              "description": "List of KYC (Know Your Customer) statuses",
              "example": "[\"NOT_VERIFIED\",\"VERIFIED\"]",
              "enum": [
                "NOT_VERIFIED",
                "PROCESSING",
                "FAILED",
                "VERIFIED",
                "REQUIRED",
                "MANUAL_DECISION"
              ]
            }
          },
          "currencies": {
            "type": "array",
            "description": "List of KYC currency codes",
            "example": [
              "BGR",
              "USD"
            ],
            "items": {
              "type": "string",
              "description": "List of KYC currency codes",
              "example": "[\"BGR\",\"USD\"]"
            }
          },
          "mobileNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "123455898"
          },
          "phoneCode": {
            "type": "string",
            "description": "Phone code",
            "example": "359"
          },
          "regDateRange": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DateTimeRangeXto"
          },
          "regType": {
            "type": "array",
            "description": "Whether the registration is full or not",
            "example": [
              "FULL",
              "PROSPECT"
            ],
            "items": {
              "type": "string",
              "description": "Whether the registration is full or not",
              "example": "[\"FULL\",\"PROSPECT\"]",
              "enum": [
                "PROSPECT",
                "FULL"
              ]
            }
          },
          "lastLoginRange": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DateTimeRangeXto"
          },
          "address": {
            "type": "string",
            "description": "Full address",
            "example": "Some street"
          },
          "city": {
            "type": "string",
            "description": "City name",
            "example": "Amsterdam"
          },
          "zip": {
            "type": "string",
            "description": "Zip code. Applicable only for countries where this code is present",
            "example": "1000"
          },
          "dobRange": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DateTimeRangeXto"
          },
          "utmCampaignIds": {
            "type": "array",
            "example": [
              "1",
              "2"
            ],
            "deprecated": true,
            "items": {
              "type": "string",
              "example": "[\"1\",\"2\"]"
            }
          },
          "utmSources": {
            "type": "array",
            "example": [
              "1",
              "2"
            ],
            "items": {
              "type": "string",
              "example": "[\"1\",\"2\"]"
            }
          },
          "affiliateUserIds": {
            "type": "array",
            "example": [
              "1",
              "2"
            ],
            "items": {
              "type": "string",
              "example": "[\"1\",\"2\"]"
            }
          },
          "affiliateMediaIds": {
            "type": "array",
            "example": [
              "1",
              "2"
            ],
            "items": {
              "type": "string",
              "example": "[\"1\",\"2\"]"
            }
          },
          "affiliateBannerIds": {
            "type": "array",
            "example": [
              "1",
              "2"
            ],
            "items": {
              "type": "string",
              "example": "[\"1\",\"2\"]"
            }
          },
          "affiliateCampaignIds": {
            "type": "array",
            "example": [
              "1",
              "2"
            ],
            "items": {
              "type": "string",
              "example": "[\"1\",\"2\"]"
            }
          },
          "affiliateUsernames": {
            "type": "array",
            "example": [
              "1",
              "2"
            ],
            "items": {
              "type": "string",
              "example": "[\"1\",\"2\"]"
            }
          },
          "bonusName": {
            "type": "string",
            "description": "The name of the bonus given to player",
            "example": "Chtristmas bonus"
          },
          "bonusStatus": {
            "type": "string",
            "example": "CLOSED"
          },
          "changeReasons": {
            "type": "array",
            "example": "LOST",
            "items": {
              "type": "string",
              "example": "LOST"
            }
          },
          "statusChangeRange": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DateTimeRangeXto"
          },
          "firstDepositRange": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DateTimeRangeXto"
          },
          "walletTransactionId": {
            "type": "string",
            "description": "Platform wallet transaction id",
            "example": "56a6a9a7-72a1-45ed-a77b-0b832a30b00c"
          },
          "recipientAddress": {
            "type": "string",
            "description": "Address(in case of crypto) used to receive money for transaction",
            "example": "39mFf3X46YzUtfdwVQpYXPCMydc74ccbAZ"
          },
          "senderAddress": {
            "type": "string",
            "description": "Address(in case of crypto) used to send money for transaction",
            "example": "2NCgbXs28VWwmDW92YsqqLPPrsgMDKpt2fK"
          },
          "externalWalletTransactionId": {
            "type": "string",
            "description": "External wallet transaction id",
            "example": "201936"
          },
          "visitorId": {
            "type": "string",
            "description": "device fingerprint on registration",
            "example": "7YGyH2Tjw2M9MU71Ti6Z"
          },
          "filesDataStatus": {
            "type": "array",
            "description": "Player files data status",
            "example": [
              "PROCESSED"
            ],
            "items": {
              "type": "string",
              "description": "Player files data status",
              "example": "[\"PROCESSED\"]",
              "enum": [
                "NEW",
                "PROCESSED",
                "APPROVED",
                "REJECTED",
                "RESUBMISSION_REQUESTED"
              ]
            }
          },
          "segmentation": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerSearchParamsXto$SegmentationXto"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.CustomerSearchParamsXto$SegmentationXto": {
        "type": "object",
        "properties": {
          "operator": {
            "type": "string",
            "description": "values: IN, NOT_IN",
            "example": "IN",
            "enum": [
              "IN",
              "NOT_IN"
            ]
          },
          "ids": {
            "type": "array",
            "description": "list of segment ids",
            "example": [
              "56a6a9a7-72a1-45ed-a77b-0b832a30b00c",
              "66a6a9a7-72a1-45ed-a77b-0b832a30b00d"
            ],
            "items": {
              "type": "string",
              "description": "list of segment ids",
              "example": "[\"56a6a9a7-72a1-45ed-a77b-0b832a30b00c\",\"66a6a9a7-72a1-45ed-a77b-0b832a30b00d\"]"
            }
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.CustomerPageableXto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "description": "Total number of available pages",
            "format": "int32",
            "example": 200
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of available records",
            "format": "int64",
            "example": 200
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.SearchCustomerXto"
            }
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.SearchCustomerXto": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string",
            "description": "11 digits unique across all brands customer id",
            "example": "10110000003"
          },
          "fullName": {
            "type": "string",
            "description": "The full name of the customer",
            "example": "John Doe"
          },
          "nickname": {
            "type": "string",
            "description": "nickname (username) of the customer",
            "example": "JDoe"
          },
          "email": {
            "type": "string",
            "description": "Customer email.",
            "example": "john.doe@test.com"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number without phone code",
            "example": "9123459"
          },
          "phoneCode": {
            "type": "string",
            "description": "The phone code with or without +, as stored in the database",
            "example": "359"
          },
          "countryCode": {
            "type": "string",
            "description": "Two digit country code",
            "example": "BG"
          },
          "languageCode": {
            "type": "string",
            "description": "The language code of the player",
            "example": "bg"
          },
          "accountStatus": {
            "type": "string",
            "description": "Customer account status",
            "enum": [
              "ACTIVE",
              "BLOCKED",
              "SELF_EXCLUDED",
              "COOL_OFF"
            ]
          },
          "kycIdvStatus": {
            "type": "string",
            "description": "KYC IDV status",
            "enum": [
              "NOT_VERIFIED",
              "PROCESSING",
              "FAILED",
              "VERIFIED",
              "REQUIRED",
              "MANUAL_DECISION"
            ]
          },
          "kycPoaStatus": {
            "type": "string",
            "description": "KYC POA status",
            "enum": [
              "NOT_VERIFIED",
              "PROCESSING",
              "FAILED",
              "VERIFIED",
              "REQUIRED",
              "MANUAL_DECISION"
            ]
          },
          "balanceCurrencyCode": {
            "type": "string",
            "description": "Currency code in which the balance is calculated",
            "example": "BGR"
          },
          "systemBalanceCurrencyCode": {
            "type": "string",
            "description": "Currency code in which the system balance is calculated",
            "example": "BGR"
          },
          "ftd": {
            "type": "boolean",
            "description": "Whether the customer is new one and has only one deposit by now",
            "example": true
          },
          "balance": {
            "type": "number",
            "description": "The customer balance in the actual currency",
            "example": 1.0
          },
          "systemBalance": {
            "type": "number",
            "description": "The customer balance in the system currency, calculated dynamically from the balance property and system currency settings",
            "example": 1.0
          },
          "registrationDate": {
            "type": "string",
            "description": "Registration date. ZonedDateTime",
            "format": "date-time",
            "example": "2020-06-11T17:31:32+03:00"
          },
          "testAccount": {
            "type": "boolean",
            "description": "Whether account is test",
            "example": false
          },
          "visitorId": {
            "type": "string",
            "description": "device fingerprint on registration",
            "example": "7YGyH2Tjw2M9MU71Ti6Z"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.LoginXto": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john.doe@test.com"
          },
          "password": {
            "type": "string",
            "example": "password"
          },
          "accountType": {
            "type": "string",
            "example": "service"
          },
          "metadata": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.LoginXto$LoginMetadataXto"
          },
          "nickname": {
            "type": "string",
            "example": "johnDoe"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.LoginXto$LoginMetadataXto": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "The ip from which player is attempting a login",
            "example": "192.168.1.1"
          },
          "ipCountry": {
            "type": "string",
            "description": "The country from which the player is attempting a login. Derived from the ip address",
            "example": "BG"
          },
          "device": {
            "type": "string",
            "example": "MOBILE_WEB",
            "enum": [
              "MOBILE_WEB",
              "MOBILE_NATIVE",
              "WEB",
              "UNKNOWN"
            ]
          },
          "os": {
            "type": "string",
            "example": "Windows"
          },
          "browser": {
            "type": "string",
            "example": "chrome"
          },
          "domain": {
            "type": "string",
            "example": "crypto.rocketship.cash"
          }
        }
      },
      "com.lis.platform.integration.customer.dto.LoginResponseDto": {
        "type": "object",
        "properties": {
          "mfaRequired": {
            "type": "boolean"
          },
          "token": {
            "type": "string"
          },
          "mfaReferenceId": {
            "type": "string"
          },
          "cookie": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.ExternalSystemIdUsedRequestXto": {
        "type": "object",
        "properties": {
          "extSystemId": {
            "type": "string"
          },
          "loginType": {
            "type": "string",
            "enum": [
              "PASSWORD",
              "GOOGLE",
              "WALLET_CONNECT",
              "FACEBOOK",
              "DEVCODE_IDENTITY",
              "TELEGRAM"
            ]
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.UploadCustomerFilesDataRequestXto": {
        "required": [
          "documentsTypes",
          "flow",
          "source",
          "status"
        ],
        "type": "object",
        "properties": {
          "documentsTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ID_CARD",
                "DRIVER_LICENSE",
                "PASSPORT",
                "RESIDENCE_PERMIT",
                "VISA",
                "SELFIE",
                "UTILITY_BILL",
                "OTHER"
              ]
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "NEW",
              "PROCESSED",
              "APPROVED",
              "REJECTED",
              "RESUBMISSION_REQUESTED"
            ]
          },
          "flow": {
            "type": "string",
            "enum": [
              "KYC_IDV",
              "KYC_POA",
              "RESET_PASSWORD",
              "OTHER"
            ]
          },
          "source": {
            "type": "string",
            "enum": [
              "VERIFF",
              "WEB"
            ]
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.CustomerFilesSearchXto": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string",
            "description": "customer ID",
            "example": "1000000534"
          },
          "dateRange": {
            "$ref": "#/components/schemas/com.lis.platform.commons.web.rest.DateRangeXto"
          },
          "sources": {
            "type": "array",
            "description": "Source that the file record is associated with",
            "example": [
              "VERIFF",
              "WEB"
            ],
            "items": {
              "type": "string",
              "description": "Source that the file record is associated with",
              "example": "[\"VERIFF\",\"WEB\"]",
              "enum": [
                "VERIFF",
                "WEB"
              ]
            }
          },
          "flows": {
            "type": "array",
            "description": "Flow that the file record is associated with",
            "example": [
              "VERIFF",
              "WEB"
            ],
            "items": {
              "type": "string",
              "description": "Flow that the file record is associated with",
              "example": "[\"VERIFF\",\"WEB\"]",
              "enum": [
                "KYC_IDV",
                "KYC_POA",
                "RESET_PASSWORD",
                "OTHER"
              ]
            }
          },
          "documentsTypes": {
            "type": "array",
            "description": "Documents type of the file record",
            "example": [
              "ID_CARD",
              "VISA"
            ],
            "items": {
              "type": "string",
              "description": "Documents type of the file record",
              "example": "[\"ID_CARD\",\"VISA\"]",
              "enum": [
                "ID_CARD",
                "DRIVER_LICENSE",
                "PASSPORT",
                "RESIDENCE_PERMIT",
                "VISA",
                "SELFIE",
                "UTILITY_BILL",
                "OTHER"
              ]
            }
          },
          "statuses": {
            "type": "array",
            "description": "Status of the file record",
            "example": [
              "NEW",
              "PROCESSED"
            ],
            "items": {
              "type": "string",
              "description": "Status of the file record",
              "example": "[\"NEW\",\"PROCESSED\"]",
              "enum": [
                "NEW",
                "PROCESSED",
                "APPROVED",
                "REJECTED",
                "RESUBMISSION_REQUESTED"
              ]
            }
          }
        }
      },
      "com.lis.platform.commons.web.rest.PageableResponseXtoCom.lis.platform.integration.customer.controller.xto.CustomerFilesDataXto": {
        "type": "object",
        "properties": {
          "hasMore": {
            "type": "boolean",
            "description": "if this is the last page of items",
            "example": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of available items",
            "format": "int64",
            "example": 200
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of available pages",
            "format": "int32",
            "example": 3
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.CustomerFilesDataXto"
            }
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.CustomerFilesDataXto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the files data entity",
            "format": "int64",
            "example": 1
          },
          "cid": {
            "type": "string",
            "description": "Id of the player",
            "example": "1000000534"
          },
          "source": {
            "type": "string",
            "description": "Name of the automated process or WEB.",
            "example": "VERIFF, WEB",
            "enum": [
              "VERIFF",
              "WEB"
            ]
          },
          "flow": {
            "type": "string",
            "description": "The flow that the file is associated with.",
            "example": "KYC_IDV",
            "enum": [
              "KYC_IDV",
              "KYC_POA",
              "RESET_PASSWORD",
              "OTHER"
            ]
          },
          "status": {
            "type": "string",
            "description": "Shows if the files data is reviewed or not.",
            "example": "PROCESSED",
            "enum": [
              "NEW",
              "PROCESSED",
              "APPROVED",
              "REJECTED",
              "RESUBMISSION_REQUESTED"
            ]
          },
          "filesReceivedAt": {
            "type": "string",
            "description": "When were the files received",
            "format": "date-time",
            "example": "2023-10-11T12:13:14+02:00"
          },
          "documentsTypes": {
            "type": "array",
            "description": "Documents types containing in files data",
            "example": [
              "DRIVER_LICENSE"
            ],
            "items": {
              "type": "string",
              "description": "Documents types containing in files data",
              "example": "[\"DRIVER_LICENSE\"]",
              "enum": [
                "ID_CARD",
                "DRIVER_LICENSE",
                "PASSPORT",
                "RESIDENCE_PERMIT",
                "VISA",
                "SELFIE",
                "UTILITY_BILL",
                "OTHER"
              ]
            }
          },
          "filesPaths": {
            "type": "array",
            "description": "Each file URL to GCP bucket",
            "example": [
              "crypto/verification-documents/10110000534/asd.txt"
            ],
            "items": {
              "type": "string",
              "description": "Each file URL to GCP bucket",
              "example": "[\"crypto/verification-documents/10110000534/asd.txt\"]"
            }
          },
          "note": {
            "type": "string",
            "description": "any additional info",
            "example": "this is a note"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.AffiliateDataXto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Affiliate token\n",
            "example": "ieQz0IK_kMJle7k9EBL5XGNd7ZgqdRLk"
          },
          "affiliateProvider": {
            "type": "string",
            "example": "MYAFFILIATES",
            "enum": [
              "MYAFFILIATES",
              "NETREFER",
              "GENERIC"
            ]
          },
          "content": {
            "type": "object",
            "description": "The data provided by an affiliate provider related to the affiliate token.\n",
            "example": {
              "tokenContent": {
                "TOKEN": {
                  "USER": {
                    "EMAIL": "anna.slavkova+test@liveinteractive.bg",
                    "STATUS": "accepted",
                    "USERNAME": "testaffiliate"
                  },
                  "SETUP": {
                    "PLAN_ID": "2",
                    "SITE_ID": "",
                    "SITE_URL": "",
                    "OBJECT_ID": "1",
                    "SITE_NAME": "",
                    "OBJECT_DATA": {
                      "DATA": {
                        "VALUE": "http://www.supremo.com/?affiliateId=%PREFIX%"
                      }
                    },
                    "OPERATION_ID": "1",
                    "OBJECT_DESCRIPTION": "Supremo Home"
                  },
                  "PREFIX": "ieQz0IK_kMJle7k9EBL5XGNd7ZgqdRLk",
                  "COUNTRY": "xx",
                  "PLAN_ID": "2",
                  "USER_ID": "1",
                  "AUTHCODE": "2",
                  "MEDIA_ID": "0",
                  "SETUP_ID": "1",
                  "BANNER_ID": "1",
                  "IP_ADDRESS": "0.0.0.0",
                  "TIME_STAMP": "2020-12-09T09:00:39+00:00",
                  "CAMPAIGN_ID": "1",
                  "REFERRING_URL": ""
                }
              }
            }
          },
          "affiliateId": {
            "type": "string",
            "description": "Affiliate ID",
            "example": "affid123"
          },
          "affiliateName": {
            "type": "string",
            "description": "Affiliate name",
            "example": "affname123"
          },
          "affiliateGroupId": {
            "type": "string",
            "description": "Affiliate group id",
            "example": "affgid123"
          },
          "affiliateClickId": {
            "type": "string",
            "description": "Affiliate click id",
            "example": "affClickId"
          },
          "affiliateOfflineCode": {
            "type": "string",
            "description": "Affiliate offline tracking code (referral code)",
            "example": "affRefCode007"
          },
          "affiliateUtmSource": {
            "type": "string",
            "description": "Affiliate UTM source",
            "example": "affUtmSrc123"
          },
          "affiliateUtmTerm": {
            "type": "string",
            "description": "Affiliate UTM term",
            "example": "affUtmTerm123"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.CustomerAccountRequestXto": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "nickName": {
            "type": "string",
            "description": "Nick name",
            "example": "nick-name"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "example": "First"
          },
          "middleName": {
            "type": "string",
            "description": "Middle name",
            "example": "Middle"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "example": "Last"
          },
          "gender": {
            "type": "string",
            "description": "The player gender",
            "example": "MALE",
            "enum": [
              "MALE",
              "FEMALE",
              "OTHER"
            ]
          },
          "email": {
            "type": "string",
            "description": "Player email. This is the main identifier of the player, thus it must be unique for a brand",
            "example": "john.doe@test.com"
          },
          "countryCode": {
            "pattern": "[a-zA-Z]{2}",
            "type": "string",
            "description": "Two digit country code",
            "example": "US"
          },
          "stateCode": {
            "pattern": "[a-zA-Z0-9]{2}",
            "type": "string",
            "description": "Two digit state code",
            "example": "AL"
          },
          "ip": {
            "type": "string",
            "description": "Ip from which the registration request is initiated",
            "example": "1.1.1.1"
          },
          "languageCode": {
            "type": "string",
            "description": "The language code of the player",
            "example": "en"
          },
          "currencyCode": {
            "pattern": "[a-zA-Z]{3,4}",
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number (only digits)",
            "example": "9123459"
          },
          "phoneCode": {
            "pattern": "(?:\\+?(\\d{1,5}))?",
            "type": "string",
            "description": "The phone number code",
            "example": "+2"
          },
          "address": {
            "type": "string",
            "description": "Full address",
            "example": "Sofia, blv. Car Osvoboditel 10"
          },
          "city": {
            "type": "string",
            "description": "City name",
            "example": "Varna"
          },
          "zip": {
            "type": "string",
            "description": "Zip code. Only for countries where it is applicable",
            "example": "1000"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth. ZonedDateTime",
            "format": "date"
          },
          "timeZone": {
            "type": "string",
            "description": "Player country time zone",
            "example": "Pacific/Midway"
          },
          "testAccount": {
            "type": "boolean",
            "description": "Marks account as test",
            "example": true
          },
          "contactEmail": {
            "type": "boolean",
            "description": "Whether the player agrees to contact him via email using his/her contact data",
            "example": true
          },
          "contactSms": {
            "type": "boolean",
            "description": "Whether the player agrees to contact him via sms using his/her contact data",
            "example": true
          },
          "password": {
            "type": "string",
            "description": "player's password",
            "example": "password"
          },
          "externalId": {
            "type": "string",
            "description": "Player external Id",
            "example": "LWVnV5ZtlWVlxhtw"
          },
          "channel": {
            "type": "string",
            "description": "Exclude from bonuses",
            "example": "true",
            "enum": [
              "WEB",
              "NATIVE_APP",
              "TELEGRAM",
              "DIRECT_API"
            ]
          },
          "vip": {
            "type": "boolean",
            "description": "Whether or not the player has VIP status",
            "example": false
          },
          "referredBy": {
            "type": "string",
            "description": "Customer id of referring player",
            "example": "1000000001"
          },
          "affiliateData": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.AffiliateDataXto"
          }
        }
      },
      "com.lis.platform.integration.customer.dto.MfaResponseDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "cookie": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.CustomerByEmailRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.CustomerDataXto": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string",
            "description": "11 digits unique across all brands customer id",
            "example": "10110000003"
          },
          "testAccount": {
            "type": "boolean",
            "description": "Whether account is test",
            "example": false
          },
          "online": {
            "type": "boolean",
            "description": "Whether account is online",
            "example": false
          },
          "accountStatus": {
            "type": "string",
            "description": "Customer account status",
            "enum": [
              "ACTIVE",
              "BLOCKED",
              "SELF_EXCLUDED",
              "COOL_OFF"
            ]
          },
          "fullName": {
            "type": "string",
            "description": "The full name of the customer",
            "example": "John Doe"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the customer",
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "description": "Middle name of the customer",
            "example": "Mid"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the customer",
            "example": "Doe"
          },
          "nickName": {
            "type": "string",
            "description": "Customer nick name.",
            "example": "John-nick"
          },
          "email": {
            "type": "string",
            "description": "Customer email.",
            "example": "john.doe@test.com"
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Whether customer's email is verified",
            "example": true
          },
          "phoneNumber": {
            "type": "string",
            "description": "Customer phone number",
            "example": "9123459"
          },
          "phoneCode": {
            "type": "string",
            "description": "Customer country phone code",
            "example": "+25"
          },
          "phoneVerified": {
            "type": "boolean",
            "description": "Whether customer's phone number is verified",
            "example": true
          },
          "dob": {
            "type": "string",
            "format": "date",
            "example": "2021-10-11"
          },
          "gender": {
            "type": "string",
            "example": "MALE"
          },
          "contactEmail": {
            "type": "boolean",
            "description": "Whether customer accepts marketing email offers",
            "example": true
          },
          "contactSms": {
            "type": "boolean",
            "description": "Whether customer accepts marketing sms offers",
            "example": true
          },
          "regDate": {
            "type": "string",
            "format": "date-time",
            "example": "2021-10-11T12:13:14+02:00"
          },
          "regIpCountry": {
            "type": "string",
            "description": "Two digit country code",
            "example": "BG"
          },
          "lastLoginDate": {
            "type": "string",
            "format": "date-time",
            "example": "2021-10-11T12:13:14+02:00"
          },
          "affiliateId": {
            "type": "string",
            "example": "123"
          },
          "affiliateToken": {
            "type": "string",
            "example": "ieQz0IK_kMJle7k9EBL5XGNd7ZgqdRLk"
          },
          "affiliateGroupId": {
            "type": "string",
            "example": "456"
          },
          "affiliateName": {
            "type": "string",
            "example": "aff 1"
          },
          "affiliateProvider": {
            "type": "string",
            "example": "MYAFFILIATES",
            "enum": [
              "MYAFFILIATES",
              "NETREFER",
              "GENERIC"
            ]
          },
          "affiliateWebsiteId": {
            "type": "string",
            "example": "affWeb.com"
          },
          "affiliatePublisherId": {
            "type": "string",
            "example": "affPubId123"
          },
          "address": {
            "type": "string",
            "example": "123 Dondukov bld"
          },
          "city": {
            "type": "string",
            "example": "Sofia"
          },
          "zip": {
            "type": "string",
            "description": "zip code",
            "example": "111"
          },
          "country": {
            "type": "string",
            "description": "Two digit country code",
            "example": "BG"
          },
          "state": {
            "type": "string",
            "description": "Two digit state code",
            "example": "AL"
          },
          "balance": {
            "type": "number",
            "description": "The customer balance in the actual currency",
            "example": 1.0
          },
          "playerCurrency": {
            "type": "string",
            "description": "Currently active player currency",
            "example": "BGR"
          },
          "balanceCurrency": {
            "type": "string",
            "description": "The currency in which the balance is calculated",
            "example": "EUR"
          },
          "bonusBalance": {
            "type": "number",
            "description": "The customer bonus balance in the actual currency",
            "example": 1.0
          },
          "ltDeposits": {
            "type": "number",
            "description": "The customer life time deposits in the actual currency",
            "example": 1.0
          },
          "casinoTurnover": {
            "type": "number",
            "description": "The customer life time casino turnover in the actual currency",
            "example": 1.0
          },
          "sportsTurnover": {
            "type": "number",
            "description": "The customer life time sports turnover in the actual currency",
            "example": 1.0
          },
          "ltValue": {
            "type": "number",
            "description": "The customer life time value in the actual currency",
            "example": 1.0
          },
          "ggr": {
            "type": "number",
            "description": "The customer gross gaming revenue in the actual currency",
            "example": 1.0
          },
          "kycIdvStatus": {
            "type": "string",
            "description": "Player KYC IDV status",
            "example": "VERIFIED",
            "enum": [
              "NOT_VERIFIED",
              "PROCESSING",
              "FAILED",
              "VERIFIED",
              "REQUIRED",
              "MANUAL_DECISION"
            ]
          },
          "kycPoaStatus": {
            "type": "string",
            "description": "Player KYC POA status",
            "example": "VERIFIED",
            "enum": [
              "NOT_VERIFIED",
              "PROCESSING",
              "FAILED",
              "VERIFIED",
              "REQUIRED",
              "MANUAL_DECISION"
            ]
          },
          "loginMfa": {
            "type": "boolean",
            "description": "player login mfa enabled preference",
            "example": true
          },
          "withdrawalMfa": {
            "type": "boolean",
            "description": "player withdrawal mfa enabled preference",
            "example": true
          },
          "mfaStatus": {
            "type": "string",
            "description": "Player Mfa status. Possible values:  NOT_SET, ACTIVE, DELETED",
            "example": "ACTIVE",
            "enum": [
              "NOT_SET",
              "ACTIVE",
              "DELETED"
            ]
          },
          "accountPreferences": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.AccountPreferencesXto"
          },
          "autoWithdrawExcluded": {
            "type": "boolean",
            "description": "Exclude from auto withdraws",
            "example": true
          },
          "bonusExcluded": {
            "type": "boolean",
            "description": "Exclude from bonuses",
            "example": true
          },
          "bonusExcludedBy": {
            "type": "string",
            "description": "Player excluded from bonuses by",
            "example": "admin@supremo.com"
          },
          "visitorId": {
            "type": "string",
            "description": "device fingerprint on registration",
            "example": "7YGyH2Tjw2M9MU71Ti6Z"
          },
          "vaultBalance": {
            "type": "number",
            "description": "The customer vault balance in the actual currency",
            "example": 1.0
          },
          "walletBalance": {
            "type": "number",
            "description": "The customer wallet balance in the actual currency",
            "example": 1.0
          },
          "ltWithdrawals": {
            "type": "number",
            "description": "The customer life time withdrawals in the actual currency",
            "example": 1.0
          },
          "requestedWithdrawals": {
            "type": "number",
            "description": "The customer life time withdrawals, which are not in ‘initiated’, ‘rejected’ or ‘approved' status, in the actual currency",
            "example": 1.0
          },
          "errorWithdrawals": {
            "type": "number",
            "description": "The customer life time withdrawals with 'error' status, in the actual currency",
            "example": 1.0
          },
          "initiatedWithdrawals": {
            "type": "number",
            "description": "The customer life time withdrawals with 'initated' status in the actual currency",
            "example": 1.0
          },
          "bonusAwarded": {
            "type": "number",
            "description": "Sum of the face value of the bonuses which have been awarded to the customer in their lifetime in the actual currency",
            "example": 1.0
          },
          "bonusUsed": {
            "type": "number",
            "description": "Sum of the face value of the bonuses less the value of the bonuses which have been cancelled or expired in their lifetime in the actual currency",
            "example": 1.0
          },
          "bonusConverted": {
            "type": "number",
            "description": "Sum of the value of bonuses which have been flushed to cash in the actual currency",
            "example": 1.0
          },
          "loginType": {
            "type": "string",
            "description": "User's login type",
            "example": "PASSWORD",
            "enum": [
              "PASSWORD",
              "GOOGLE",
              "WALLET_CONNECT",
              "FACEBOOK",
              "DEVCODE_IDENTITY",
              "TELEGRAM"
            ]
          },
          "documentTypeIdv": {
            "type": "string",
            "description": "ID document type",
            "example": "PASSPORT"
          },
          "documentInfoIdv": {
            "type": "string",
            "description": "ID Document additional info in json format",
            "example": "{\"prop1\":\"value1\",\"prop2\":\"value2\"}"
          },
          "documentTypePoa": {
            "type": "string",
            "description": "POA document type",
            "example": "PASSPORT"
          },
          "documentInfoPoa": {
            "type": "string",
            "description": "POA additional info in json format",
            "example": "{\"prop1\":\"value1\",\"prop2\":\"value2\"}"
          },
          "vip": {
            "type": "boolean",
            "description": "Whether or not the player has VIP status",
            "example": false
          },
          "kycIdvExpiryTime": {
            "type": "string",
            "description": "KYC IDV expiration time",
            "format": "date-time",
            "example": "2020-06-11T23:59:59+03:00"
          },
          "blockedUntil": {
            "type": "string",
            "description": "last date of SELF-EXCLUDE or COOL-OFF period",
            "format": "date",
            "example": "2020-06-11"
          },
          "blockedOn": {
            "type": "string",
            "description": "date time of SELF-EXCLUDE or COOL-OFF block",
            "format": "date-time",
            "example": "2025-06-11T23:59:59+03:00"
          },
          "referredBy": {
            "type": "string",
            "description": "Customer id of referring player",
            "example": "1000000001"
          },
          "externalSystemId": {
            "type": "string",
            "description": "Player external system ID (i.e. Telegram ID)",
            "example": "0987654321"
          },
          "externalSystemUsername": {
            "type": "string",
            "description": "Player external system username (i.e. Telegram username)",
            "example": "SampleExtUsername"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.BonusOptinXto": {
        "required": [
          "bonusId",
          "cid",
          "source"
        ],
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "bonusId": {
            "type": "string"
          },
          "source": {
            "type": "string",
            "enum": [
              "CRM",
              "SYSTEM",
              "BO_OPERATOR",
              "CUSTOMER"
            ]
          }
        }
      },
      "com.lis.platform.integration.customer.controller.AffiliateController$AffiliateXto": {
        "type": "object",
        "properties": {
          "affiliateId": {
            "type": "string"
          },
          "affiliateUsername": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.BonusHistorySearchRequestXto": {
        "required": [
          "customerId"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "11 digits unique across all brands customer id",
            "example": "10110000003"
          },
          "type": {
            "type": "string",
            "description": "Bonus type",
            "example": "CASINO_CASHBACK"
          },
          "dateTimeRangeXto": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DateTimeRangeXto"
          },
          "currency": {
            "type": "string",
            "description": "Bonus currency",
            "example": "BTC"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.FrontendBonusHistoryResponseXto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "bonusName": {
            "type": "string"
          },
          "initialAmount": {
            "type": "number"
          },
          "initialWageringAmount": {
            "type": "number",
            "deprecated": true
          },
          "type": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "bonusCreateTime": {
            "type": "string",
            "format": "date-time"
          },
          "remainingWageringAmount": {
            "type": "number"
          },
          "freeSpinCurrency": {
            "type": "string"
          },
          "freeSpinCount": {
            "type": "integer",
            "format": "int32"
          },
          "freeSpinValue": {
            "type": "number"
          },
          "cbid": {
            "type": "string"
          },
          "bonusId": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.BetHistorySearchRequestXto": {
        "type": "object",
        "properties": {
          "nextItemId": {
            "type": "integer",
            "format": "int64"
          },
          "nextRangeId": {
            "type": "integer",
            "format": "int64"
          },
          "customerId": {
            "type": "string",
            "description": "11 digits unique across all brands customer id",
            "example": "10110000003"
          },
          "gameIds": {
            "type": "array",
            "description": "List of provider game ids",
            "example": [
              "evo_powerblackjak",
              "evo_firstpersonbaccarat"
            ],
            "items": {
              "type": "string",
              "description": "List of provider game ids",
              "example": "[\"evo_powerblackjak\",\"evo_firstpersonbaccarat\"]"
            }
          },
          "gameTypes": {
            "type": "array",
            "description": "List of game types",
            "example": [
              "SLOTS",
              "TABLE_CARD"
            ],
            "items": {
              "type": "string",
              "description": "List of game types",
              "example": "[\"SLOTS\",\"TABLE_CARD\"]",
              "enum": [
                "SLOTS",
                "JACKPOTS",
                "VIDEO_POKER",
                "ROULETTE",
                "TABLE_CARD",
                "BLACKJACK",
                "BACCARAT",
                "MINIGAMES",
                "OTHERS",
                "DEFAULT",
                "OTHERS_LIVE",
                "LIVE_BACCARAT",
                "LIVE_BLACKJACK",
                "GAME_SHOW",
                "LIVE_ROULETTE",
                "DICE",
                "DRAGON_TIGER",
                "CRASH",
                "SCRATCH",
                "ARCADE",
                "LOTTERY",
                "BINGO",
                "VIRTUAL",
                "PLAYER_PROPS",
                "OTHERS_TABLE",
                "LIVE_DICE",
                "LIVE_DRAGON_TIGER",
                "LIVE_POKER"
              ]
            }
          },
          "dateTimeRangeXto": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.DateTimeRangeXto"
          },
          "betCurrency": {
            "type": "string",
            "description": "Bet currency",
            "example": "BTC"
          },
          "transactionId": {
            "type": "string",
            "description": "Platform bet transaction id",
            "example": "ffd4fc11-9cf1-4436-a86a-901a3cc6af69"
          },
          "externalTransactionId": {
            "type": "string",
            "description": "External bet transaction id",
            "example": "ffd4fc11-9cf1-4436-a86a-901a3cc6af69"
          },
          "winTransactionId": {
            "type": "string",
            "description": "Platform win transaction id",
            "example": "ffd4fc11-9cf1-4436-a86a-901a3cc6af69"
          },
          "winExternalTransactionId": {
            "type": "string",
            "description": "External win transaction id",
            "example": "ffd4fc11-9cf1-4436-a86a-901a3cc6af69"
          },
          "userEmail": {
            "type": "string",
            "description": "The email address of the BO user who initiated the request.",
            "example": "admin@supremo.com"
          },
          "roundId": {
            "type": "string",
            "description": "The id of the round.",
            "example": "12345"
          },
          "playerGain": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.SearchPlayerGain"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.SearchPlayerGain": {
        "type": "object",
        "properties": {
          "operator": {
            "type": "string",
            "example": "LESS_THAN",
            "enum": [
              "LESS_THAN",
              "GREATER_THAN",
              "EQUAL",
              "BETWEEN"
            ]
          },
          "values": {
            "type": "array",
            "example": [
              "4.5",
              "100"
            ],
            "items": {
              "type": "number"
            }
          }
        }
      },
      "com.lis.platform.integration.customer.controller.BetHistoryController$BetHistorySearchResponseXto": {
        "type": "object",
        "properties": {
          "nextItemId": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.BetHistoryResponseXto"
            }
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.BetHistoryResponseXto": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "platformGameId": {
            "type": "string"
          },
          "betCurrency": {
            "type": "string"
          },
          "totalBetAmount": {
            "type": "number"
          },
          "wonAmount": {
            "type": "number"
          },
          "externalTransactionId": {
            "type": "string",
            "deprecated": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "betStatus": {
            "type": "string",
            "enum": [
              "LOST",
              "WON",
              "CASH_DROP",
              "JACKPOT",
              "PENDING"
            ]
          },
          "roundId": {
            "type": "string"
          },
          "externalGameId": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "subProvider": {
            "type": "string"
          },
          "bonusAmount": {
            "type": "number"
          },
          "bonusGameAmount": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "LOST",
              "WON",
              "CASH_DROP",
              "JACKPOT",
              "PENDING"
            ]
          },
          "gameType": {
            "type": "string",
            "enum": [
              "SLOTS",
              "JACKPOTS",
              "VIDEO_POKER",
              "ROULETTE",
              "TABLE_CARD",
              "BLACKJACK",
              "BACCARAT",
              "MINIGAMES",
              "OTHERS",
              "DEFAULT",
              "OTHERS_LIVE",
              "LIVE_BACCARAT",
              "LIVE_BLACKJACK",
              "GAME_SHOW",
              "LIVE_ROULETTE",
              "DICE",
              "DRAGON_TIGER",
              "CRASH",
              "SCRATCH",
              "ARCADE",
              "LOTTERY",
              "BINGO",
              "VIRTUAL",
              "PLAYER_PROPS",
              "OTHERS_TABLE",
              "LIVE_DICE",
              "LIVE_DRAGON_TIGER",
              "LIVE_POKER"
            ]
          },
          "freeBet": {
            "type": "boolean"
          },
          "freeBets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.xto.FreeBetHistoryResponseXto"
            }
          },
          "conversionRate": {
            "type": "number"
          },
          "playerCurrency": {
            "type": "string"
          },
          "transactionId": {
            "type": "string"
          },
          "winTransactionId": {
            "type": "string"
          },
          "winExternalTransactionId": {
            "type": "string"
          },
          "totalBetGameAmount": {
            "type": "number"
          },
          "wonGameAmount": {
            "type": "number"
          },
          "gameSessionId": {
            "type": "string"
          },
          "winTimestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.FreeBetHistoryResponseXto": {
        "type": "object",
        "properties": {
          "betAmount": {
            "type": "number"
          },
          "wonAmount": {
            "type": "number"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "externalTransactionId": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.BetHistoryController$BetHistoryFrontendResponseXto": {
        "type": "object",
        "properties": {
          "nextItemId": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.FrontendBetHistoryResponseXto"
            }
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.FrontendEditCustomerRequestXto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name",
            "example": "First"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "example": "Last"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "example": "user123@test.com"
          },
          "nickName": {
            "type": "string",
            "description": "Nickname (username)",
            "example": "user123"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth. ZonedDateTime",
            "format": "date"
          },
          "countryCode": {
            "pattern": "[a-zA-Z]{2}",
            "type": "string",
            "description": "Two digit country code",
            "example": "US"
          },
          "zip": {
            "type": "string",
            "description": "Zip code. Only for countries where it is applicable",
            "example": "1000"
          },
          "address": {
            "type": "string",
            "description": "Full address",
            "example": "Sofia, blv. Car Osvoboditel 10"
          },
          "city": {
            "type": "string",
            "description": "City name",
            "example": "Varna"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number, containing only digits",
            "example": "9123459"
          },
          "phoneCode": {
            "type": "string",
            "description": "Phone code",
            "example": "+359"
          },
          "fiatCurrencyCode": {
            "type": "string",
            "description": "Preferred Fiat currency code",
            "example": "USD"
          },
          "gameLaunchCurrencyCode": {
            "type": "string",
            "description": "Preferred game launch currency code",
            "example": "USD"
          },
          "languageCode": {
            "type": "string",
            "description": "The language code of the player",
            "example": "en"
          },
          "contactSms": {
            "type": "boolean",
            "description": "Whether the player agrees to contact him via email using his/her contact data",
            "example": true
          },
          "contactEmail": {
            "type": "boolean",
            "description": "Whether the player agrees to contact him via sms using his/her contact data",
            "example": true
          },
          "hidden": {
            "type": "boolean",
            "description": "Hidden player username on public pages",
            "example": true
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.FrontendCustomerInfoRequestXto": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.FrontendCustomerInfoRequestXto$AccountInfo"
          },
          "preferences": {
            "$ref": "#/components/schemas/com.lis.platform.integration.customer.controller.frontend.xto.FrontendCustomerInfoRequestXto$AccountInfoPreferences"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.FrontendCustomerInfoRequestXto$AccountInfo": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name",
            "example": "First"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "example": "Last"
          },
          "dob": {
            "type": "string",
            "description": "Date of birth. ZonedDateTime",
            "format": "date"
          },
          "country": {
            "pattern": "[a-zA-Z]{2}",
            "type": "string",
            "description": "Two digit country code",
            "example": "US"
          },
          "postalCode": {
            "type": "string",
            "description": "Zip code. Only for countries where it is applicable",
            "example": "1000"
          },
          "address": {
            "type": "string",
            "description": "Full address",
            "example": "Sofia, blv. Car Osvoboditel 10"
          },
          "city": {
            "type": "string",
            "description": "City name",
            "example": "Varna"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number, containing only digits",
            "example": "9123459"
          },
          "phoneCode": {
            "type": "string",
            "description": "The phone number code (can contain +)",
            "example": "+2"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.FrontendCustomerInfoRequestXto$AccountInfoPreferences": {
        "type": "object",
        "properties": {
          "preferredFiatCurrency": {
            "type": "string",
            "description": "Preferred Fiat currency code",
            "example": "USD"
          },
          "preferredGameLaunchCurrency": {
            "type": "string",
            "description": "Preferred game launch currency code",
            "example": "USD"
          },
          "languageCode": {
            "type": "string",
            "description": "The language code of the player",
            "example": "en"
          },
          "receiveMarketingSms": {
            "type": "boolean",
            "description": "Whether the player agrees to contact him via email using his/her contact data",
            "example": true
          },
          "receiveMarketingEmails": {
            "type": "boolean",
            "description": "Whether the player agrees to contact him via sms using his/her contact data",
            "example": true
          },
          "hidden": {
            "type": "boolean",
            "description": "Hidden player username on public pages",
            "example": true
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.UpdateCurrencyRequestXto": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.FrontendChangeStatusRequest": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "COOL-OFF | SELF-EXCLUDE",
            "example": "COOL_OFF",
            "enum": [
              "ACTIVE",
              "BLOCKED",
              "SELF_EXCLUDED",
              "COOL_OFF"
            ]
          },
          "blockedUntil": {
            "type": "string",
            "format": "date",
            "example": "2023-03-02"
          },
          "mfaCode": {
            "type": "string",
            "example": "123456"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.ChangePasswordXto": {
        "required": [
          "newPassword",
          "oldPassword"
        ],
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.rest.PlayerServiceProvider$MfaDto": {
        "required": [
          "totp"
        ],
        "type": "object",
        "properties": {
          "loginMfa": {
            "type": "boolean"
          },
          "withdrawalMfa": {
            "type": "boolean"
          },
          "totp": {
            "pattern": "\\d+",
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.PlayerEditXto": {
        "type": "object",
        "properties": {
          "editedBy": {
            "type": "string",
            "description": "user or system, who has edited the used",
            "example": "editor"
          },
          "fullName": {
            "type": "string",
            "example": "John Doe"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "example": "First"
          },
          "middleName": {
            "type": "string",
            "description": "Middle name",
            "example": "Middle"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "example": "Last"
          },
          "email": {
            "type": "string",
            "example": "jdoe@test.com"
          },
          "phoneNumber": {
            "type": "string",
            "example": "45435234"
          },
          "phoneCode": {
            "pattern": "(?:\\+?(\\d{1,5}))?",
            "type": "string",
            "example": "+44"
          },
          "dob": {
            "type": "string",
            "format": "date"
          },
          "gender": {
            "type": "string",
            "description": "The player gender",
            "example": "MALE",
            "enum": [
              "MALE",
              "FEMALE",
              "OTHER"
            ]
          },
          "address": {
            "type": "string",
            "example": "12 Baker str"
          },
          "city": {
            "type": "string",
            "example": "London"
          },
          "zip": {
            "type": "string",
            "example": "1000"
          },
          "country": {
            "pattern": "[a-zA-Z]{2}",
            "type": "string",
            "description": "Two digit country code",
            "example": "US"
          },
          "state": {
            "pattern": "[a-zA-Z0-9]{2}",
            "type": "string",
            "description": "Two digit state code",
            "example": "AL"
          },
          "contactEmail": {
            "type": "boolean",
            "description": "Whether or not player selected 'contact by email' checkbox",
            "example": true
          },
          "contactSms": {
            "type": "boolean",
            "description": "Whether or not player selected 'contact by sms' checkbox",
            "example": true
          },
          "autoWithdrawExcluded": {
            "type": "boolean",
            "description": "Exclude from auto withdraws",
            "example": true
          },
          "bonusExcluded": {
            "type": "boolean",
            "description": "Exclude from bonuses",
            "example": true
          },
          "vip": {
            "type": "boolean",
            "description": "Whether or not the player has VIP status",
            "example": false
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.UpdateRegistrationMetadataRequestXto": {
        "type": "object",
        "properties": {
          "newRegistrationIp": {
            "type": "string"
          },
          "newIpCountry": {
            "type": "string"
          },
          "newVisitorId": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.CustomerFilesDataRequestXto": {
        "type": "object",
        "properties": {
          "documentsTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ID_CARD",
                "DRIVER_LICENSE",
                "PASSPORT",
                "RESIDENCE_PERMIT",
                "VISA",
                "SELFIE",
                "UTILITY_BILL",
                "OTHER"
              ]
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "NEW",
              "PROCESSED",
              "APPROVED",
              "REJECTED",
              "RESUBMISSION_REQUESTED"
            ]
          },
          "note": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.TransactionsController$StaticDataModel": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.SportsbookBetHistorySelectionResponseXto": {
        "type": "object",
        "properties": {
          "selection": {
            "type": "string"
          },
          "market": {
            "type": "string"
          },
          "odds": {
            "type": "number"
          },
          "event": {
            "type": "string"
          },
          "live": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": [
              "OPEN",
              "WON",
              "LOST",
              "REFUNDED",
              "ROLLED_BACK",
              "CANCELED",
              "USELESS"
            ]
          },
          "sport": {
            "type": "string"
          }
        }
      },
      "com.lis.platform.integration.customer.rest.dto.SweepstakesPeriodicBonusOptInInfo": {
        "type": "object",
        "properties": {
          "claimable": {
            "type": "boolean",
            "description": "Whether bonus is claimable at this moment",
            "example": true
          },
          "remainingTimeToClaim": {
            "type": "integer",
            "description": "Number of minutes after which sweepstakes bonus can be claimed. Possible values:\nnull - this will be the value if bonus is not claimable and can not be claimed in the future\n0 - no remaining time, bonuses can be claimed immediately\nother than 0 - remaining minutes until bonuses will be claimable\n",
            "format": "int32",
            "example": 60
          },
          "claimBonusConfigured": {
            "type": "boolean",
            "description": "Whether claim bonus configuration is present",
            "example": false
          },
          "claimLimitsReached": {
            "type": "boolean",
            "description": "Whether claim limits are reached.\n",
            "example": true
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.KycInfoXto": {
        "type": "object",
        "properties": {
          "kycIdv": {
            "type": "string",
            "enum": [
              "NOT_VERIFIED",
              "PROCESSING",
              "FAILED",
              "VERIFIED",
              "REQUIRED",
              "MANUAL_DECISION"
            ]
          },
          "kycPoa": {
            "type": "string",
            "enum": [
              "NOT_VERIFIED",
              "PROCESSING",
              "FAILED",
              "VERIFIED",
              "REQUIRED",
              "MANUAL_DECISION"
            ]
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.DeviceXto": {
        "type": "object",
        "properties": {
          "visitorId": {
            "type": "string",
            "description": "browser fingerprint id",
            "example": "243regfe4325r36"
          },
          "first": {
            "type": "string",
            "description": "first time device is used",
            "format": "date-time",
            "example": "2023-01-04T12:06:03.16+02:00"
          },
          "last": {
            "type": "string",
            "description": "last time device is used",
            "format": "date-time",
            "example": "2023-01-05T12:06:03.16+02:00"
          },
          "customerCount": {
            "type": "integer",
            "description": "count of other users with same fingerprint",
            "format": "int32",
            "example": 3
          }
        }
      },
      "com.lis.platform.integration.customer.controller.xto.TrackingDataXto": {
        "type": "object",
        "properties": {
          "utmSources": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "utmCampaignIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "affiliateUserIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "affiliateCampaignIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "affiliateUsernames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "com.lis.platform.integration.customer.controller.frontend.xto.BalanceXto": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string",
            "example": "EUR"
          },
          "balance": {
            "type": "number",
            "example": 12.34
          },
          "bonusBalance": {
            "type": "number",
            "example": 45.56
          },
          "vaultBalance": {
            "type": "number",
            "example": 45.56
          }
        }
      }
    },
    "securitySchemes": {
      "bearer-key": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}