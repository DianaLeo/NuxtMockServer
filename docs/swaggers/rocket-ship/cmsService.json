{
  "openapi": "3.0.1",
  "info": { "title": "cms-service (Fri, 21 Jun 2024 11:24:23 GMT)", "version": "0.0.1-SNAPSHOT" },
  "servers": [
    {
      "url": "https://platform-gateway.rocketship.cash/cms-service",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "Internal brand cms configuration API",
      "description": "com.lis.platform.integration.cmsservice.brand.controller.InternalBrandConfigurationController"
    },
    {
      "name": "Brand scripts API",
      "description": "com.lis.platform.integration.cmsservice.newpkg.controller.cms.brandscript.BrandScriptController"
    },
    { "name": "Configuration api", "description": "Crud operations on configurations" },
    { "name": "Brand properties api", "description": "Brand properties api" },
    { "name": "Navigation api", "description": "Navigation api" },
    { "name": "Localization api", "description": "Crud operations on localization items" },
    { "name": "Media files api", "description": "Crud operations on media files" },
    { "name": "Brand languages api", "description": "Brand languages api" },
    {
      "name": "Registration form API",
      "description": "com.lis.platform.integration.cmsservice.newpkg.controller.cms.registrationform.RegistrationFormController"
    },
    { "name": "Media directories api", "description": "Crud operations on media directories" },
    { "name": "Icons api", "description": "Icons api" },
    {
      "name": "Translations frontend api",
      "description": "Translations api used by the website"
    },
    { "name": "Website email template api", "description": "Website email template api" },
    { "name": "Promotions api", "description": "Crud operations on promotions" },
    { "name": "Brand domains api", "description": "Brand domains api" },
    { "name": "Casino game provider api", "description": "Casino game provider api" },
    {
      "name": "Website devcode-identity endpoints",
      "description": "Website devcode-identity api"
    },
    { "name": "Email template api", "description": "Email template api" },
    { "name": "Casino game tile api", "description": "Casino game tile api" },
    { "name": "Banners api", "description": "Banners api" },
    { "name": "Telegram api", "description": "Telegram api" },
    { "name": "Sweepstakes api", "description": "Sweepstakes api" },
    {
      "name": "Brand cms configuration API",
      "description": "com.lis.platform.integration.cmsservice.brand.controller.BrandConfigurationController"
    },
    { "name": "Generic Button Container api", "description": "Generic Button Container api" },
    {
      "name": "Brand theme API",
      "description": "com.lis.platform.integration.cmsservice.newpkg.controller.cms.brandtheme.BrandThemeController"
    },
    { "name": "Translations api", "description": "Crud operations on keys and translations" },
    { "name": "Reset password", "description": "Reset password api" },
    { "name": "Media system files api", "description": "Crud operations on media files" },
    { "name": "Website Telegram endpoints", "description": "Website Telegram api" },
    {
      "name": "Media system directories api",
      "description": "Crud operations on media directories"
    },
    { "name": "Pages api", "description": "Crud operations on pages" },
    { "name": "Bonus api", "description": "Bonus api" },
    {
      "name": "Translations import/export",
      "description": "Import export and search operations on translations"
    },
    {
      "name": "Brand theme API",
      "description": "com.lis.platform.integration.cmsservice.newpkg.controller.cms.brandtheme.BrandVariablesController"
    },
    { "name": "Casino api", "description": "Casino games api" },
    {
      "name": "Error page templates api",
      "description": "Crud operations on error page templates"
    }
  ],
  "paths": {
    "/api/translations": {
      "put": {
        "tags": ["Translations api"],
        "summary": "Update existing translation",
        "operationId": "updateTranslation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateTranslationRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "422": { "description": "Error while processing validation" },
          "404": { "description": "no such element" },
          "401": { "description": "jwt token is invalid or expired" },
          "200": {
            "description": "All translations for this key",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TranslationXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["Translations api"],
        "summary": "Create translation",
        "operationId": "createTranslation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateTranslationRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "422": { "description": "Error while processing validation" },
          "201": {
            "description": "Created translation and all other translations for this key",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TranslationXto" }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/telegram/configs": {
      "get": {
        "tags": ["telegram", "Telegram api"],
        "summary": "Get Telegram configurations",
        "operationId": "getAll",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Telegram configurations",
            "content": { "application/json": { "schema": { "type": "array" } } }
          }
        },
        "security": [{ "bearer-key": [] }]
      },
      "put": {
        "tags": ["telegram", "Telegram api"],
        "summary": "Update existing Telegram config",
        "operationId": "update",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TelegramConfigXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "404": { "description": "Config was not found by the given id" },
          "403": { "description": "Authorization failed" },
          "200": {
            "description": "Telegram config was updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TelegramConfigXto" }
              }
            }
          },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["telegram", "Telegram api"],
        "summary": "Create new Telegram config",
        "operationId": "create",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TelegramConfigXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "201": {
            "description": "Telegram config was created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TelegramConfigXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/sweepstakes/packages/{id}": {
      "get": {
        "tags": ["Sweepstakes api", "sweepstakes"],
        "summary": "Get package by id",
        "operationId": "findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Package item",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PackageXto" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "put": {
        "tags": ["Sweepstakes api", "sweepstakes"],
        "summary": "Update existing package",
        "operationId": "update_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PackageRequestXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "404": { "description": "Promotion was not found by the given id" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Promotion item was updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PackageXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      },
      "delete": {
        "tags": ["Sweepstakes api", "sweepstakes"],
        "summary": "Delete existing package",
        "operationId": "delete_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "404": { "description": "Promotion was not found by the given id" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Promotion item was removed successfully",
            "content": { "application/json": {} }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/promotion/{id}": {
      "get": {
        "tags": ["promotions", "Promotions api"],
        "summary": "Get promotion by id",
        "operationId": "findById_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Promotion item",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromotionDetailsXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      },
      "put": {
        "tags": ["promotions", "Promotions api"],
        "summary": "Update existing promotion",
        "operationId": "update_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PromotionRequestXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "404": { "description": "Promotion was not found by the given id" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Promotion item was updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromotionDetailsXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      },
      "delete": {
        "tags": ["promotions", "Promotions api"],
        "summary": "Delete existing promotion",
        "operationId": "delete_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Promotion item was removed successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromotionDetailsXto" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "404": { "description": "Promotion was not found by the given id" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/promotion/{id}/switch-publish": {
      "put": {
        "tags": ["promotions", "Promotions api"],
        "summary": "Publish/un publish promotion",
        "operationId": "switchPublish",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Promotion published state is changed",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/PromotionXto" } }
            }
          },
          "404": { "description": "Promotion not found" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/promotion/{id}/toggle-publish": {
      "put": {
        "tags": ["promotions", "Promotions api"],
        "summary": "Publish/un publish promotion",
        "operationId": "switchPublish_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Promotion published state is changed",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/PromotionXto" } }
            }
          },
          "404": { "description": "Promotion not found" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/pages/{id}/conditions": {
      "get": {
        "tags": ["Pages api", "conditions"],
        "summary": "Find root condition by name ",
        "operationId": "getPageCondition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization unsuccessful" },
          "200": {
            "description": "Condition group for this page",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConditionGroupXto" }
              }
            }
          },
          "401": { "description": "Authentication unsuccessful" },
          "404": { "description": "Page or Conditions not found" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "put": {
        "tags": ["Pages api", "conditions"],
        "summary": "Update root condition for page",
        "operationId": "updateCondition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConditionGroupXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConditionGroupXto" }
              }
            }
          },
          "403": { "description": "Authorization unsuccessful" },
          "401": { "description": "Authentication unsuccessful" },
          "404": { "description": "Page or condition not found" },
          "422": { "description": "Validation error(s)" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["Pages api", "conditions"],
        "summary": "Create root condition for page",
        "operationId": "createCondition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConditionGroupXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConditionGroupXto" }
              }
            }
          },
          "403": { "description": "Authorization unsuccessful" },
          "401": { "description": "Authentication unsuccessful" },
          "422": { "description": "Validation error(s)" },
          "404": { "description": "Page not found" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "delete": {
        "tags": ["Pages api", "conditions"],
        "summary": "Delete root condition for page",
        "operationId": "deleteCondition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization unsuccessful" },
          "401": { "description": "Authentication unsuccessful" },
          "404": { "description": "Page or Condition not found" },
          "200": { "description": "Success" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/pages/error-pages-template": {
      "get": {
        "tags": ["Error page templates api"],
        "summary": "Get error page templates",
        "description": "Get error pages templates",
        "operationId": "getAllTemplates",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Get error pages templates",
            "content": { "application/json": { "schema": { "type": "string" } } }
          }
        },
        "security": [{ "bearer-key": [] }]
      },
      "put": {
        "tags": ["Error page templates api"],
        "summary": "Edit error page template",
        "description": "Edit error page template",
        "operationId": "editTemplate",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ErrorPageTemplateXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Edit error page template",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorPageTemplateXto" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/icons": {
      "get": {
        "tags": ["Icons api", "icons"],
        "summary": "Get all configured icons",
        "operationId": "listIcons",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Icons list",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IconXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "put": {
        "tags": ["Icons api", "edit", "icons"],
        "summary": "Edit an existing icon",
        "operationId": "iconEdit",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/IconRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "200": {
            "description": "Edit an existing icon",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IconXto" }
              }
            }
          },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["Icons api", "create", "icons"],
        "summary": "Create a new icon",
        "operationId": "iconCreate",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/IconRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Create a new icon",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IconXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/email/template": {
      "get": {
        "tags": ["Email template api"],
        "summary": "Get email templates",
        "description": "Get email templates",
        "operationId": "getAllTemplates_1",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Get email templates",
            "content": { "application/json": { "schema": { "type": "string" } } }
          }
        }
      },
      "put": {
        "tags": ["Email template api"],
        "summary": "Create email template",
        "description": "create email template",
        "operationId": "editTemplate_1",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EmailTemplateXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Create email template",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EmailTemplateXto" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Email template api"],
        "summary": "Create email template",
        "description": "create email template",
        "operationId": "createTemplate",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EmailTemplateXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Create email template",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EmailTemplateXto" }
              }
            }
          }
        }
      }
    },
    "/api/conditions/{type}/{id}": {
      "get": {
        "tags": ["Conditions api"],
        "summary": "Get all root condition groups ",
        "operationId": "get_7",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["CONTAINER", "CONTAINER_CONFIGURATION", "PAGE", "BANNER"]
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "List of all condition groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ConditionGroupXto" }
                }
              }
            }
          },
          "403": { "description": "Authorization unsuccessful" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "put": {
        "tags": ["Conditions api"],
        "summary": "Update root page condition ",
        "operationId": "updateCondition_1",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["CONTAINER", "CONTAINER_CONFIGURATION", "PAGE", "BANNER"]
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConditionGroupXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConditionGroupXto" }
              }
            }
          },
          "403": { "description": "Authorization unsuccessful" },
          "404": { "description": "Entity not found" },
          "401": { "description": "Authentication unsuccessful" },
          "422": { "description": "Validation error(s)" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["Conditions api"],
        "summary": "Create root page condition ",
        "operationId": "createCondition_1",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["CONTAINER", "CONTAINER_CONFIGURATION", "PAGE", "BANNER"]
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConditionGroupXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConditionGroupXto" }
              }
            }
          },
          "403": { "description": "Authorization unsuccessful" },
          "401": { "description": "Authentication unsuccessful" },
          "422": { "description": "Validation error(s)" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "delete": {
        "tags": ["Conditions api"],
        "summary": "Delete root page condition ",
        "operationId": "delete_3",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["CONTAINER", "CONTAINER_CONFIGURATION", "PAGE", "BANNER"]
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization unsuccessful" },
          "404": { "description": "Entity not found" },
          "401": { "description": "Authentication unsuccessful" },
          "200": { "description": "Success" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/themes/{id}/typography": {
      "get": {
        "tags": ["themes", "Brand theme API"],
        "summary": "Get theme typography",
        "operationId": "getTypography",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "Not found" },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Theme typography",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TypographyXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "put": {
        "tags": ["themes", "Brand theme API"],
        "summary": "Update theme typography",
        "operationId": "updateTypography",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TypographyXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "Not found" },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Theme typography",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TypographyXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/themes/{id}/logos": {
      "get": {
        "tags": ["themes", "Brand theme API"],
        "summary": "Get theme logos",
        "operationId": "getLogos",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "Not found" },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "200": {
            "description": "Theme logos",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ThemeLogosXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      },
      "put": {
        "tags": ["themes", "Brand theme API"],
        "summary": "Update theme logos",
        "operationId": "updateLogos",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ThemeLogosXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Theme logos changed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ThemeLogosXto" }
              }
            }
          },
          "404": { "description": "Not found" },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/properties": {
      "get": {
        "tags": ["Brand properties api"],
        "summary": "Get all brand properties",
        "description": "Get all brand properties",
        "operationId": "getAll_3",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Get all brand properties",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/BrandPropertyXto" }
                }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "put": {
        "tags": ["Brand properties api"],
        "summary": "Edit brand property",
        "description": "Edit brand property",
        "operationId": "edit",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BrandPropertyXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Edit brand property",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandPropertyXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["Brand properties api"],
        "summary": "Create brand property",
        "description": "Create brand property",
        "operationId": "create_7",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BrandPropertyXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Edit brand property",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandPropertyXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/languages": {
      "get": {
        "tags": ["Brand languages api"],
        "summary": "Get all brand languages",
        "description": "Get all brand languages",
        "operationId": "getAll_4",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Get all brand languages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/BrandLanguageXto" }
                }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "put": {
        "tags": ["Brand languages api"],
        "summary": "Put brand language",
        "description": "Put brand language",
        "operationId": "put",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BrandLanguageXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Put brand language",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandLanguageXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/banner/{id}/publish": {
      "put": {
        "tags": ["Banners api", "publish", "banners"],
        "summary": "Publish/unpublish banner",
        "operationId": "publish",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "404": { "description": "Banner not found" },
          "401": { "description": "Authentication unsuccessful" },
          "200": { "description": "Delete a banner" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/banner/{id}/conditions": {
      "get": {
        "tags": ["Banners api", "conditions"],
        "summary": "Find root condition by banner id ",
        "operationId": "getByBannerId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "getPromotionConditions",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization unsuccessful" },
          "200": {
            "description": "Condition group for this banner",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConditionGroupXto" }
              }
            }
          },
          "401": { "description": "Authentication unsuccessful" },
          "404": { "description": "Banner or Conditions not found" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "put": {
        "tags": ["Banners api", "conditions"],
        "summary": "Update root condition for banner",
        "operationId": "updateCondition_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConditionGroupXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConditionGroupXto" }
              }
            }
          },
          "403": { "description": "Authorization unsuccessful" },
          "401": { "description": "Authentication unsuccessful" },
          "422": { "description": "Validation error(s)" },
          "404": { "description": "Banner or condition not found" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["Banners api", "conditions"],
        "summary": "Create root condition for banner",
        "operationId": "createCondition_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConditionGroupXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConditionGroupXto" }
              }
            }
          },
          "404": { "description": "Banne not found" },
          "403": { "description": "Authorization unsuccessful" },
          "401": { "description": "Authentication unsuccessful" },
          "422": { "description": "Validation error(s)" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "delete": {
        "tags": ["Banners api", "conditions"],
        "summary": "Delete root condition for banner",
        "operationId": "delete_9",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "Banner or Condition not found" },
          "403": { "description": "Authorization unsuccessful" },
          "401": { "description": "Authentication unsuccessful" },
          "200": { "description": "Success" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/banner/v2": {
      "put": {
        "tags": ["Banners api", "edit", "banners"],
        "summary": "Edit banner",
        "operationId": "bannerEdit",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BannerRequestXtoV2" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Edit a banner",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BannerDetailsXtoV2" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "404": { "description": "Banner not found" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["Banners api", "create", "banners"],
        "summary": "Create a new banner",
        "operationId": "bannerCreateV2",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BannerRequestXtoV2" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Create a new banner",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BannerDetailsXtoV2" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/internal/new-brand/create-db": {
      "post": {
        "tags": ["new-brand-controller"],
        "operationId": "createDb",
        "parameters": [
          {
            "name": "api-create-auth-key",
            "in": "header",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DbCredentialsXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": { "description": "OK" }
        }
      }
    },
    "/api/translations/import": {
      "post": {
        "tags": ["Translations import/export"],
        "summary": "Import translations",
        "operationId": "importTranslations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["importFile"],
                "type": "object",
                "properties": {
                  "importFile": { "type": "string", "format": "binary" }
                }
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "401": { "description": "jwt token is invalid or expired" },
          "200": { "description": "Success" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/translations/flag-needs-translation": {
      "post": {
        "tags": ["Translations api"],
        "summary": "Set needs translation flag of a keys",
        "operationId": "toggleNeedsTranslation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToggleNeedsTranslationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Unauthorized" },
          "401": { "description": "jwt token is invalid or expired" },
          "200": { "description": "Success" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/translations/export": {
      "post": {
        "tags": ["Translations import/export"],
        "summary": "Export translations",
        "operationId": "exportTranslations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ListTranslationsRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Exported translations",
            "content": { "application/octet-stream": {} }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/translations/by-keys-and-languages": {
      "post": {
        "tags": ["Translations api"],
        "summary": "Translations data by key",
        "operationId": "getTranslationsByKeysAndLanguages",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ListTranslationsRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "401": { "description": "jwt token is invalid or expired" },
          "200": {
            "description": "Translations for that key",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TranslationXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/sweepstakes/packages": {
      "get": {
        "tags": ["Sweepstakes api", "sweepstakes"],
        "summary": "Get all packages",
        "operationId": "list",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Packages list",
            "content": { "application/json": { "schema": { "type": "array" } } }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["Sweepstakes api", "sweepstakes"],
        "summary": "Create new package",
        "operationId": "create_1",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PackageCreateRequestXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "201": {
            "description": "Package item was created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PackageXto" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/registration-form/create": {
      "post": {
        "tags": ["Registration form API", "registration"],
        "summary": "Add ordered registration form fields",
        "operationId": "createRegistrationFormFields",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "EMAIL",
                      "NICK_NAME",
                      "PASSWORD",
                      "FIRST_NAME",
                      "MIDDLE_NAME",
                      "LAST_NAME",
                      "GENDER",
                      "COUNTRY_CODE",
                      "IP_COUNTRY_CODE",
                      "LANGUAGE_CODE",
                      "CURRENCY_CODE",
                      "GAME_LAUNCH_CURRENCY_CODE",
                      "PHONE_NUMBER",
                      "PHONE_CODE",
                      "ADDRESS",
                      "CITY",
                      "ZIP",
                      "DATE_OF_BIRTH",
                      "TIME_ZONE",
                      "TEST_ACCOUNT",
                      "CONTACT_EMAIL",
                      "CONTACT_SMS",
                      "AUTO_WITHDRAW_EXCLUDED",
                      "EXTERNAL_ID",
                      "CHANNEL",
                      "STATE",
                      "CONFIRM_PASSWORD",
                      "REFERRAL_CODE",
                      "NATIONAL_ID"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "EMAIL",
                        "NICK_NAME",
                        "PASSWORD",
                        "FIRST_NAME",
                        "MIDDLE_NAME",
                        "LAST_NAME",
                        "GENDER",
                        "COUNTRY_CODE",
                        "IP_COUNTRY_CODE",
                        "LANGUAGE_CODE",
                        "CURRENCY_CODE",
                        "GAME_LAUNCH_CURRENCY_CODE",
                        "PHONE_NUMBER",
                        "PHONE_CODE",
                        "ADDRESS",
                        "CITY",
                        "ZIP",
                        "DATE_OF_BIRTH",
                        "TIME_ZONE",
                        "TEST_ACCOUNT",
                        "CONTACT_EMAIL",
                        "CONTACT_SMS",
                        "AUTO_WITHDRAW_EXCLUDED",
                        "EXTERNAL_ID",
                        "CHANNEL",
                        "STATE",
                        "CONFIRM_PASSWORD",
                        "REFERRAL_CODE",
                        "NATIONAL_ID"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/promotion": {
      "get": {
        "tags": ["promotions", "Promotions api"],
        "summary": "Get all promotions",
        "operationId": "list_1",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Promotion list",
            "content": { "application/json": { "schema": { "type": "array" } } }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["promotions", "Promotions api"],
        "summary": "Create new promotion",
        "operationId": "create_2",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PromotionCreateRequestXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "201": {
            "description": "Promotion item was created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromotionDetailsXto" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/promotion/{id}/seo": {
      "post": {
        "tags": ["Promotions api", "providers"],
        "summary": "Update promotion seo properties",
        "operationId": "postSeo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SeoPropertiesXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "Promotion was not found by the supplied id" },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "422": { "description": "Promotion is deleted in platform" },
          "200": {
            "description": "Updated promotion seo properties",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CasinoProviderXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/password/reset/social-login/initiate": {
      "post": {
        "tags": ["Reset password"],
        "summary": "Initiate password reset",
        "description": "initiate password reset",
        "operationId": "initiateSocialLoginPasswordReset",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InitiateResetPasswordXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": { "description": "OK" }
        }
      }
    },
    "/api/password/reset/initiate": {
      "post": {
        "tags": ["Reset password"],
        "summary": "Initiate password reset",
        "description": "initiate password reset",
        "operationId": "initiatePasswordReset",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InitiateResetPasswordXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": { "description": "OK" }
        }
      }
    },
    "/api/pages": {
      "get": {
        "tags": ["Pages api"],
        "summary": "Get pages tree",
        "operationId": "getDetails",
        "parameters": [
          {
            "name": "includeChildPages",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "unauthorized" },
          "200": {
            "description": "Pages tree",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/PageXto" }
                }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["Pages api"],
        "summary": "Create new page",
        "operationId": "createPage",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreatePageRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "201": {
            "description": "Pages tree with new created object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreatePageXto" }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "patch": {
        "tags": ["Pages api"],
        "summary": "Patch existing page",
        "operationId": "patchPage",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PatchPageRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "200": {
            "description": "Patched page details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageDetailsXto" }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" },
          "404": { "description": "Page not found" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/pages/slug/exists": {
      "post": {
        "tags": ["Pages api"],
        "summary": "Check if slug exists",
        "operationId": "isExistingSlug",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SlugCheckRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "200": {
            "description": "True if slug exists, false otherwise",
            "content": { "application/json": { "schema": { "type": "boolean" } } }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/pages/create/login-overlay/{variant}": {
      "post": {
        "tags": ["Pages api"],
        "summary": "Create login overlay for all pages",
        "operationId": "createLoginOverlay",
        "parameters": [
          {
            "name": "variant",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": { "description": "Create login overlay for all pages" },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "401": { "description": "jwt token is invalid or expired" },
          "404": { "description": "Page not found" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/pages/create/login-overlay/{variant}/{pageId}": {
      "post": {
        "tags": ["Pages api"],
        "summary": "Create login overlay for one pages",
        "operationId": "createLoginOverlayForOnePage",
        "parameters": [
          {
            "name": "variant",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "pageId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": { "description": "Create login overlay for all pages" },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "401": { "description": "jwt token is invalid or expired" },
          "404": { "description": "Page not found" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/navigation/create/{navigationType}": {
      "post": {
        "tags": ["navigation", "Navigation api"],
        "summary": "Add ordered page ids for side navigation",
        "operationId": "createNavigation",
        "parameters": [
          {
            "name": "navigationType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["VERTICAL", "HORIZONTAL", "MAIN", "SECONDARY"]
            }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/NavigationRequestItemXto" }
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NavigationResponseItemXto"
                  }
                }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/navigation/create-v2": {
      "post": {
        "tags": ["navigation", "Navigation api"],
        "summary": "Add ordered page ids for side navigation",
        "operationId": "createNavigationV2",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/NavigationRequestItemXto" }
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NavigationResponseItemXto"
                  }
                }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "deprecated": true,
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/metadata/casino/game/tile/import": {
      "post": {
        "tags": ["game-tile", "Casino game tile api"],
        "summary": "Import metadata game tiles",
        "operationId": "importGameTiles",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CasinoGameTilesImportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Games import process initiated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GamesResultGridXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/media/system/files/upload": {
      "post": {
        "tags": ["Media system files api"],
        "summary": "Upload media file",
        "operationId": "uploadMediaFile",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["image", "request"],
                "type": "object",
                "properties": {
                  "request": { "type": "string" },
                  "image": { "type": "string", "format": "binary" }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "200": {
            "description": "Created localization object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MediaFileXto" }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" },
          "409": { "description": "image already exist" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/media/files/upload": {
      "post": {
        "tags": ["Media files api"],
        "summary": "Upload media file",
        "operationId": "uploadMediaFile_1",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["image", "request"],
                "type": "object",
                "properties": {
                  "request": { "type": "string" },
                  "image": { "type": "string", "format": "binary" }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "200": {
            "description": "Created localization object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MediaFileXto" }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" },
          "409": { "description": "image already exist" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/media/directories": {
      "get": {
        "tags": ["Media directories api"],
        "summary": "List all root directories",
        "operationId": "getDirectories_1",
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "200": {
            "description": "All directories on root level",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MediaDirectoryXto" }
                }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["Media directories api"],
        "summary": "Creates a directory object",
        "operationId": "createDirectory",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateMediaDirectoryRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "201": {
            "description": "The state of the created directory object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MediaDirectoryItemXto" }
              }
            }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/loyalty/level": {
      "post": {
        "tags": ["loyalty"],
        "summary": "Create loyalty level",
        "operationId": "createLoyaltyLevel",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoyaltyLevelXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoyaltyLevelXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      },
      "patch": {
        "tags": ["loyalty"],
        "summary": "Patch loyalty level",
        "operationId": "editLoyaltyLevel_1",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoyaltyLevelXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoyaltyLevelXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/l10n": {
      "post": {
        "tags": ["Localization api"],
        "summary": "Create new localization",
        "operationId": "createLocalization",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["request"],
                "type": "object",
                "properties": {
                  "request": {
                    "$ref": "#/components/schemas/CreateLocalizationRequest"
                  },
                  "image": { "type": "string", "format": "binary" }
                }
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "201": {
            "description": "Created localization object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LocalizationXto" }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "patch": {
        "tags": ["Localization api"],
        "summary": "Update localization value",
        "operationId": "updateLocalization",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["request"],
                "type": "object",
                "properties": {
                  "request": {
                    "$ref": "#/components/schemas/UpdateLocalizationRequest"
                  },
                  "image": { "type": "string", "format": "binary" }
                }
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Updated localization object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LocalizationXto" }
              }
            }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "422": {
            "description": "Error while processing validation",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/LocalizationXto" } }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/l10n/multiple": {
      "post": {
        "tags": ["Localization api"],
        "summary": "Create multiple localizations",
        "operationId": "createMultipleLocalizations",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["request"],
                "type": "object",
                "properties": {
                  "request": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CreateLocalizationRequest"
                    }
                  },
                  "image": {
                    "type": "array",
                    "items": { "type": "string", "format": "binary" }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "401": { "description": "jwt token is invalid or expired" },
          "201": {
            "description": "Created localization object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/LocalizationXto" }
                }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/frontend/slug/page": {
      "post": {
        "tags": ["page", "frontend"],
        "summary": "Get page by slug",
        "operationId": "getObjectBySlug",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SlugXto" } }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": { "description": "Page object", "content": { "application/json": {} } }
        }
      }
    },
    "/api/frontend/password/reset/initiate": {
      "post": {
        "tags": ["Website email template api", "password", "reset"],
        "summary": "Initiate password reset",
        "description": "initiate password reset",
        "operationId": "initiatePasswordReset_1",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InitiateResetPasswordXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": { "description": "OK" }
        }
      }
    },
    "/api/frontend/password/reset/initiate-migration": {
      "post": {
        "tags": ["Website email template api", "password", "reset"],
        "summary": "Initiate migration password reset",
        "operationId": "initiateMigrationPasswordReset",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InitiateResetPasswordXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": { "description": "OK" }
        }
      }
    },
    "/api/frontend/devcode-identity/auth-url": {
      "post": {
        "tags": ["Website devcode-identity endpoints"],
        "summary": "Performs Devcode Identity authorization",
        "description": "Performs Devcode Identity authorization",
        "operationId": "devcodeIdentityAuthUrl",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DevcodeIdentityAuthRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "OK",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/api/frontend/devcode-identity/auth-url-v2": {
      "post": {
        "tags": ["Website devcode-identity endpoints"],
        "summary": "Performs Devcode Identity authorization",
        "description": "Performs Devcode Identity authorization",
        "operationId": "devcodeIdentityAuthUrlV2",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DevcodeIdentityAuthRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/AuthUrlXto" } }
            }
          }
        }
      }
    },
    "/api/frontend/customer/bonus-history": {
      "post": {
        "tags": ["frontend"],
        "summary": "bonus history search",
        "operationId": "searchPlayerBonuses",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 20 }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FrontendBonusHistorySearchRequestXto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Will return a pageable result of searched bonus history. There are no more pages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FrontendBonusHistoryResponseXto"
                  }
                }
              }
            }
          },
          "206": {
            "description": "Will return a pageable result of searched bonus history. There are more pages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FrontendBonusHistoryResponseXto"
                  }
                }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/frontend/customer/bet-history": {
      "post": {
        "tags": ["frontend"],
        "summary": "bet history search",
        "operationId": "betHistorySearchV2",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 5 }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BetHistorySearchRequestXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "206": {
            "description": "Will return a pageable result of searched bet history. There are more pages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FrontendBetHistoryResponseXto"
                }
              }
            }
          },
          "200": {
            "description": "Will return a pageable result of searched bet history. There are no more pages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FrontendBetHistoryResponseXto"
                }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/frontend/casino/search-v2": {
      "post": {
        "tags": ["game", "frontend"],
        "summary": "Search casino games and providers",
        "operationId": "searchGamesAndProviders",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 1 }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 20 }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CasinoGameSearchRequestXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Games returned successfully, there are no more pages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FrontendCasinoSearchResultXto"
                }
              }
            }
          },
          "206": {
            "description": "Games returned successfully, there are more pages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FrontendCasinoSearchResultXto"
                }
              }
            }
          }
        }
      }
    },
    "/api/configuration/containers": {
      "get": {
        "tags": ["Configuration api"],
        "summary": "Get all container configurations",
        "operationId": "getContainerConfigurations",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "401": { "description": "jwt token is invalid or expired" },
          "200": {
            "description": "Get all container templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContainerConfigurationXto"
                  }
                }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["Configuration api"],
        "summary": "Create container template",
        "operationId": "createPageTemplate",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContainerConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "401": { "description": "jwt token is invalid or expired" },
          "200": {
            "description": "Create container template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerConfigurationXto"
                }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      },
      "patch": {
        "tags": ["Configuration api"],
        "summary": "Patch page template",
        "operationId": "patchPageTemplate",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContainerConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "200": {
            "description": "Patch page template - update all used instances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerConfigurationXto"
                }
              }
            }
          },
          "403": { "description": "unauthorized" },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/types/filtered": {
      "post": {
        "tags": ["types", "Casino api"],
        "summary": "Get game type by provider and subProvider",
        "operationId": "getTypesV2",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GameTypeFilterRequestXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "list of game types",
            "content": { "application/json": {} }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/provider/{id}/seo": {
      "post": {
        "tags": ["Casino game provider api", "providers"],
        "summary": "Update game provider seo properties",
        "operationId": "postSeo_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SeoPropertiesXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "Game provider was not found by the supplied id" },
          "422": { "description": "Game provider is deleted in platform" },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Updated game provider seo properties",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CasinoProviderXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/game": {
      "get": {
        "tags": ["game", "Casino api"],
        "summary": "Get games paginated",
        "operationId": "getAllBrandGames",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 10 }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Games returned successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GamesResultGridXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["game", "Casino api"],
        "summary": "Create game details",
        "operationId": "createGame",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateGameRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "201": {
            "description": "Created game details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CasinoGameXto" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "422": { "description": "Game is disabled or deleted in platform" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "patch": {
        "tags": ["game", "Casino api"],
        "summary": "Update game details",
        "operationId": "updateGame",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ChangeGameRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Updated game details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CasinoGameXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "422": { "description": "Game is disabled or deleted in platform" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/game/{id}/seo": {
      "post": {
        "tags": ["game", "Casino api"],
        "summary": "Update game seo details",
        "operationId": "updateSeoProperties",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SeoPropertiesXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Updated game seo details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SeoPropertiesXto" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "404": { "description": "Game not found" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "422": { "description": "Game is disabled or deleted in platform" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/game/tile": {
      "get": {
        "tags": ["game-tile", "Casino game tile api"],
        "summary": "Get game tiles",
        "operationId": "getAll_1",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Games returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CasinoGameTileXto" }
                }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["game-tile", "Casino game tile api"],
        "summary": "Create game tile",
        "operationId": "create_3",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CasinoGameTileRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "201": {
            "description": "Created game tile",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CasinoGameTileXto" }
              }
            }
          },
          "422": { "description": "Game is disabled or deleted in platform" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/game/import": {
      "post": {
        "tags": ["Casino api", "games"],
        "summary": "Import games by provider, subProvider and type",
        "operationId": "importGames",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ImportGamesRequestXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Import games process has been started successfully",
            "content": { "application/json": {} }
          },
          "204": {
            "description": "There are no games to be imported with the requested filter",
            "content": { "application/json": {} }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/game/import/filter": {
      "post": {
        "tags": ["Casino api", "games"],
        "summary": "Get games by provider, subProvider and type, which are ready to be imported from metadata storage.",
        "operationId": "filter",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 10 }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ImportGamesRequestXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "list of games available for import",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageableXtoType" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/game/filter": {
      "post": {
        "tags": ["Casino api", "games"],
        "summary": "Get games by provider, subProvider and type",
        "operationId": "filter_1",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/FilterGamesRequestXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "list of game types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CasinoGameXto" }
                }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/game/filter-configured": {
      "post": {
        "tags": ["Casino api", "games"],
        "summary": "Get configured games by providers, subProviders, gameTypes, gameNames and enabled",
        "operationId": "filterConfigured",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 10 }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MultiFilterGamesRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "list of game types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageableResponseOfConfiguredGameXto"
                }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/game/export": {
      "post": {
        "tags": ["Casino api", "games"],
        "summary": "Get games as csv file",
        "operationId": "exportCsv",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MultiFilterGamesRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "422": { "description": "When data to csv conversion fails" },
          "200": { "description": "Games returned successfully" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/game/bulk/status/update": {
      "post": {
        "tags": ["Casino api"],
        "summary": "Bulk update games status",
        "operationId": "bulkUpdate",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BulkGamesUpdateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Bulk update games status",
            "content": { "application/json": { "schema": { "type": "boolean" } } }
          },
          "422": { "description": "Game is disabled or deleted in platform" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/category": {
      "get": {
        "tags": ["game", "Casino api"],
        "summary": "Get game categories",
        "operationId": "list_2",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Game category details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageableResponseXtoGameCategoryXto"
                }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["game", "Casino api"],
        "summary": "Create game category",
        "operationId": "create_4",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GameCategoryRequestXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "201": {
            "description": "Game category details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GameCategoryXto" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "409": { "description": "Category with the same name already exists" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/category/{id}/seo": {
      "post": {
        "tags": ["Casino api", "providers"],
        "summary": "Update game category seo properties",
        "operationId": "postSeo_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SeoPropertiesXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "Game category was not found by the supplied id" },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "422": { "description": "Game category is deleted in platform" },
          "200": {
            "description": "Updated game category seo properties",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CasinoProviderXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/category/{categoryId}/games-order": {
      "post": {
        "tags": ["game", "Casino api"],
        "summary": "Add ordered game ids by country",
        "operationId": "addGamesForCountry",
        "parameters": [
          {
            "name": "countryCode",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "type": "string" } }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": { "description": "Success" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/themes": {
      "get": {
        "tags": ["themes", "Brand theme API"],
        "summary": "Get all themes",
        "operationId": "getAll_2",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Themes list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ThemeXto" }
                }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["themes", "Brand theme API"],
        "summary": "Create a theme",
        "operationId": "create_5",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ThemeRequestXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "409": { "description": "Duplicate theme name." },
          "201": {
            "description": "The created theme",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ThemeXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/themes/variables/search": {
      "post": {
        "tags": ["themes", "Brand theme API"],
        "summary": "Get all brand variables for a group",
        "operationId": "searchVariables",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VariableSearchXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/VariableXto" }
                }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/themes/import": {
      "post": {
        "tags": ["brandScripts", "Brand theme API"],
        "summary": "Import brand scripts",
        "operationId": "importTheme",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "theme": { "type": "string", "format": "binary" } }
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "201": { "description": "Import brand scripts" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "422": { "description": "Brand script is deleted in platform" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/themes/export": {
      "post": {
        "tags": ["brandTheme", "Brand theme API"],
        "summary": "Export brand theme by list of ids",
        "operationId": "exportBrandTheme",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "type": "string" } }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": { "description": "Brand theme exported successfully" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/scripts": {
      "get": {
        "tags": ["Brand scripts API", "brandScripts"],
        "summary": "Get all brand scripts",
        "operationId": "list_3",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Brand scripts returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/BrandScriptXto" }
                }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["Brand scripts API", "brandScripts"],
        "summary": "Create brand script",
        "operationId": "create_6",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BrandScriptRequestXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "201": {
            "description": "Create brand script",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandScriptXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "422": { "description": "Brand script is deleted in platform" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/scripts/import": {
      "post": {
        "tags": ["Brand scripts API", "brandScripts"],
        "summary": "Import brand scripts",
        "operationId": "importScript",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "script": { "type": "string", "format": "binary" } }
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "201": {
            "description": "Import brand scripts",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandScriptXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "422": { "description": "Brand script is deleted in platform" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/scripts/export": {
      "post": {
        "tags": ["Brand scripts API", "brandScripts"],
        "summary": "Export brand scripts by list of ids",
        "operationId": "findAllByIds",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "type": "string" } }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Brand scripts exported successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/BrandScriptXto" }
                }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/config": {
      "get": {
        "tags": ["Brand cms configuration API", "config"],
        "operationId": "getConfig_1",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Config returned successfully",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { "type": "object" }
                }
              }
            }
          },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["Brand cms configuration API", "config"],
        "operationId": "storeConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { "type": "object" }
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "401": { "description": "Authentication unsuccessful" },
          "200": { "description": "In case of successfully stored config" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/bonus": {
      "get": {
        "tags": ["Bonus api", "bonuses"],
        "summary": "Get all the bonuses",
        "operationId": "listBonuses_1",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 10 }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Bonuses list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/BonusXto" }
                }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "post": {
        "tags": ["edit", "bonus", "Bonus api"],
        "summary": "Edit bonus",
        "operationId": "edit_1",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BonusUpdateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Edit bonus",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BonusXto" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/banner/clone": {
      "post": {
        "tags": ["Banners api", "clone", "banners"],
        "summary": "Clone banner",
        "operationId": "bannerClone",
        "parameters": [
          {
            "name": "clonedBannerId",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BannerRequestXtoV2" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Clone banner",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BannerDetailsXtoV2" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/sweepstakes/switch-publish/{id}": {
      "patch": {
        "tags": ["Sweepstakes api", "sweepstakes"],
        "summary": "Publish/un publish package",
        "operationId": "switchPublish_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Package published state is changed",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/PackageXto" } }
            }
          },
          "404": { "description": "Promotion not found" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/sweepstakes/packages/order": {
      "patch": {
        "tags": ["Sweepstakes api", "sweepstakes"],
        "summary": "Reorders the corresponding package for the provided list of ids with respect of the order of those ids",
        "operationId": "order",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "type": "string" } }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Packages were reordered successfully",
            "content": { "application/json": {} }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/promotion/order": {
      "patch": {
        "tags": ["promotions", "Promotions api"],
        "summary": "Reorders the corresponding promotions for the provided list of ids with respect of the order of those ids",
        "operationId": "order_1",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "type": "string" } }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Promotions were reordered successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromotionDetailsXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/media/system/files/{id}": {
      "get": {
        "tags": ["Media system files api"],
        "summary": "Return a file info.",
        "operationId": "getFile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "File not found" },
          "400": { "description": "Request validation error(s)" },
          "200": {
            "description": "A file info.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MediaFileXto" }
                }
              }
            }
          },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "delete": {
        "tags": ["Media system files api"],
        "summary": "Delete a file.",
        "operationId": "deleteFile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "File not found" },
          "400": { "description": "Request validation error(s)" },
          "200": {
            "description": "File is successfully deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MediaFileXto" }
              }
            }
          },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "patch": {
        "tags": ["Media system files api"],
        "summary": "Edit AltText for a file.",
        "operationId": "editAltText",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EditAltTextRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "File not found" },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "200": {
            "description": "File's alt text is changed.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MediaFileXto" }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/media/system/files/upload/{id}": {
      "patch": {
        "tags": ["Media system files api"],
        "summary": "Replace media file",
        "operationId": "replaceMediaFile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": { "image": { "type": "string", "format": "binary" } }
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "404": { "description": "Image not found" },
          "422": { "description": "Error while processing validation" },
          "200": {
            "description": "Created localization object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MediaFileXto" }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/media/files/{id}": {
      "get": {
        "tags": ["Media files api"],
        "summary": "Return a file info.",
        "operationId": "getFile_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "File not found" },
          "400": { "description": "Request validation error(s)" },
          "200": {
            "description": "A file info.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MediaFileXto" }
                }
              }
            }
          },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "delete": {
        "tags": ["Media files api"],
        "summary": "Delete a file.",
        "operationId": "deleteFile_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "File not found" },
          "400": { "description": "Request validation error(s)" },
          "200": {
            "description": "File is successfully deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MediaFileXto" }
              }
            }
          },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "patch": {
        "tags": ["Media files api"],
        "summary": "Edit AltText for a file.",
        "operationId": "editAltText_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EditAltTextRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "File not found" },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "200": {
            "description": "File's alt text is changed.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MediaFileXto" }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/media/files/upload/{id}": {
      "patch": {
        "tags": ["Media files api"],
        "summary": "Replace media file",
        "operationId": "replaceMediaFile_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": { "image": { "type": "string", "format": "binary" } }
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "404": { "description": "Image not found" },
          "422": { "description": "Error while processing validation" },
          "200": {
            "description": "Created localization object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MediaFileXto" }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/loyalty/program/order": {
      "patch": {
        "tags": ["loyalty"],
        "summary": "Patch loyalty levels order",
        "operationId": "editLoyaltyLevel",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "type": "string" } }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoyaltyLevelXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/provider/{id}": {
      "get": {
        "tags": ["Casino game provider api", "providers"],
        "summary": "Get game provider by id",
        "operationId": "getById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "Game provider not found" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "provider returned successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CasinoProviderXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      },
      "patch": {
        "tags": ["Casino game provider api", "providers"],
        "summary": "Update game provider details",
        "operationId": "patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ModifyProviderRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "Game provider was not found by the supplied id" },
          "422": { "description": "Game provider is deleted in platform" },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Updated game provider details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CasinoProviderXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/category/{id}": {
      "get": {
        "tags": ["game", "Casino api"],
        "summary": "Get game category by id",
        "operationId": "findById_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Game category details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GameCategoryXto" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "delete": {
        "tags": ["game", "Casino api"],
        "summary": "Delete game category",
        "operationId": "delete_5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": { "description": "Success" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "patch": {
        "tags": ["game", "Casino api"],
        "summary": "Edit game category",
        "operationId": "edit_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GameCategoryRequestXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Game category details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GameCategoryXto" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/themes/{id}": {
      "get": {
        "tags": ["themes", "Brand theme API"],
        "summary": "Get a single theme",
        "operationId": "findById_3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Theme",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ThemeXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "delete": {
        "tags": ["themes", "Brand theme API"],
        "summary": "Delete a theme",
        "operationId": "delete_6",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "Not found" },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "200": { "description": "OK", "content": { "application/json": {} } }
        },
        "security": [{ "bearer-key": [] }]
      },
      "patch": {
        "tags": ["themes", "Brand theme API"],
        "summary": "Patch a theme",
        "operationId": "patch_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ThemeRequestXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "Not found" },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "200": {
            "description": "The created theme",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ThemeXto" }
              }
            }
          },
          "409": { "description": "Duplicate theme name." }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/themes/variables/basic/{variableId}": {
      "patch": {
        "tags": ["themes", "Brand theme API"],
        "summary": "Patch a brand basic variable",
        "operationId": "patchBasicVariable",
        "parameters": [
          {
            "name": "variableId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "themeId",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PatchVariableRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "Not found" },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VariableXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/themes/variables/advanced/{variableId}": {
      "patch": {
        "tags": ["themes", "Brand theme API"],
        "summary": "Patch a brand advanced variable",
        "operationId": "patchAdvancedVariable",
        "parameters": [
          {
            "name": "variableId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "themeId",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PatchVariableRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "Not found" },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VariableXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/scripts/{id}": {
      "delete": {
        "tags": ["Brand scripts API", "brandScripts"],
        "summary": "Delete brand script",
        "operationId": "delete_7",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": { "description": "Brand script is deleted" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "404": { "description": "Brand script was not found by id" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "patch": {
        "tags": ["Brand scripts API", "brandScripts"],
        "summary": "Update brand script",
        "operationId": "patch_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BrandScriptRequestXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "422": { "description": "Brand script is deleted in platform" },
          "200": {
            "description": "Updated brand script",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandScriptXto" }
              }
            }
          },
          "404": { "description": "Brand script was not found by id" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/domains": {
      "get": {
        "tags": ["Brand domains api"],
        "summary": "Get all brand domains",
        "description": "Get all brand domains",
        "operationId": "findAll",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Get all brand domains",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/BrandDomainXto" }
                }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      },
      "patch": {
        "tags": ["Brand domains api"],
        "summary": "Edit multiple brand domains",
        "description": "Edit multiple brand domain",
        "operationId": "edit_3",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/BrandDomainRequestXto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Edit brand property",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/BrandDomainXto" }
                }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/domains/{id}": {
      "patch": {
        "tags": ["Brand domains api"],
        "summary": "Edit brand domain",
        "description": "Edit brand domain",
        "operationId": "edit_4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BrandDomainRequestXto" }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Edit brand property",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandDomainXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/translations/revision/{keyId}": {
      "get": {
        "tags": ["Translations api"],
        "summary": "Get revision history of translations by key",
        "operationId": "getRevisionHistory",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "422": { "description": "Error while processing validation" },
          "200": {
            "description": "Revision for translations for this keyId",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RevisionHistoryXto" }
              }
            }
          },
          "404": { "description": "no such element" },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/translations/revision/files": {
      "get": {
        "tags": ["Translations import/export"],
        "summary": "Get revision history of uploaded translation files",
        "operationId": "getRevisionHistory_1",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "user",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 10 }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "unauthorized" },
          "200": {
            "description": "All files  for brandId ordered by upload timestamp desc",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/RevisionFileXto" }
                }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/translations/revision/file/{id}": {
      "get": {
        "tags": ["Translations import/export"],
        "summary": "Get uploaded file contents",
        "operationId": "getRevisionHistory_2",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "unauthorized" },
          "404": { "description": "no such element" },
          "401": { "description": "jwt token is invalid or expired" },
          "200": {
            "description": "File contents",
            "content": {
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {}
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/translations/key/{id}": {
      "get": {
        "tags": ["Translations api"],
        "summary": "Get translation key by id",
        "operationId": "get",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "no such element" },
          "200": {
            "description": "The requested key data object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/KeyXto" }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/translations/key/top": {
      "get": {
        "tags": ["Translations api"],
        "summary": "Get top level translation keys",
        "operationId": "getTopLevel",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "422": { "description": "Error while processing validation" },
          "401": { "description": "jwt token is invalid or expired" },
          "200": {
            "description": "List of key data objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/KeyXto" }
                }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/translations/key/export": {
      "get": {
        "tags": ["Translations import/export"],
        "summary": "Export whole key structure",
        "operationId": "exportStructure",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Exported structure",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/KeyNode" }
                }
              }
            }
          },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/translations/key/children/{id}": {
      "get": {
        "tags": ["Translations api"],
        "summary": "Get child keys data for given parent id",
        "operationId": "getChildren",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "no such element" },
          "401": { "description": "jwt token is invalid or expired" },
          "200": {
            "description": "List of key data objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/KeyXto" }
                }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/translations/by-key/{keyId}": {
      "get": {
        "tags": ["Translations api"],
        "summary": "Translations data by key",
        "operationId": "getTranslationsByKey",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "no such element" },
          "401": { "description": "jwt token is invalid or expired" },
          "200": {
            "description": "Translations for that key",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TranslationXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/telegram/configs/{id}": {
      "get": {
        "tags": ["telegram", "Telegram api"],
        "summary": "Get Telegram configuration by id",
        "operationId": "get_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Telegram configuration",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TelegramConfigXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "delete": {
        "tags": ["telegram", "Telegram api"],
        "summary": "Delete existing Telegram config",
        "operationId": "delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "404": { "description": "Telegram config was not found by the given id" },
          "200": {
            "description": "Telegram config was removed successfully",
            "content": { "application/json": {} }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/telegram/configs/by-name/{name}": {
      "get": {
        "tags": ["telegram", "Telegram api"],
        "summary": "Get Telegram configuration by bot name",
        "operationId": "getByName",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Telegram configuration by bot name",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TelegramConfigXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/sweepstakes/packages/config": {
      "get": {
        "tags": ["Sweepstakes api", "sweepstakes"],
        "summary": "Search Sweepstakes packages",
        "operationId": "getSweepstakesPackageDefinitions",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "Authorization unsuccessful" },
          "200": {
            "description": "Sweepstakes packages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SweepstakesPackageXto"
                  }
                }
              }
            }
          },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/sweepstakes/config": {
      "get": {
        "tags": ["Sweepstakes api", "sweepstakes"],
        "summary": "Get Sweepstakes configuration",
        "operationId": "getSweepstakesConfig",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "Authorization unsuccessful" },
          "404": { "description": "Sweepstakes config is missing" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Sweepstakes configuration",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SweepstakesConfigXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/static": {
      "get": {
        "tags": ["static"],
        "summary": "Get static data",
        "operationId": "getStaticData",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/StaticDataXto" } }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/seo/change-frequency": {
      "get": {
        "tags": ["change", "Pages api", "seo", "frequency"],
        "summary": "Lists all available page seo change frequency options",
        "operationId": "getSeoChangeFrequencyOptions",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "All available page seo change frequency options",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "ALWAYS",
                      "HOURLY",
                      "DAILY",
                      "WEEKLY",
                      "MONTHLY",
                      "YEARLY",
                      "NEVER"
                    ]
                  }
                }
              }
            }
          },
          "403": { "description": "Authorization unsuccessful" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/registration-form": {
      "get": {
        "tags": ["Registration form API", "form fields"],
        "summary": "Get all form fields",
        "operationId": "getRegistrationFormFields",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Banners list",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BannerListItemXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/promotion/bonuses": {
      "get": {
        "tags": ["promotions", "Promotions api"],
        "summary": "Get a list of bonuses that can be associated with a promotion",
        "operationId": "listBonuses",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Bonus list",
            "content": { "application/json": { "schema": { "type": "array" } } }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/promotion/bonus/{platformBonusId}": {
      "get": {
        "tags": ["promotions", "Promotions api"],
        "summary": "Get a single bonus in format used by promotion",
        "operationId": "findBonus",
        "parameters": [
          {
            "name": "platformBonusId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "Not found" },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Bonus",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromotionBonusXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/pages/{id}": {
      "get": {
        "tags": ["Pages api"],
        "summary": "Get page details",
        "operationId": "get_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "unauthorized" },
          "404": { "description": "element not found" },
          "401": { "description": "jwt token is invalid or expired" },
          "200": {
            "description": "Page details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageDetailsXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      },
      "delete": {
        "tags": ["Pages api"],
        "summary": "Delete page ",
        "operationId": "deletePage",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "unauthorized" },
          "401": { "description": "jwt token is invalid or expired" },
          "404": { "description": "Page not found" },
          "200": { "description": "Success" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/pages/{id}/preview-layout": {
      "get": {
        "tags": ["Pages api"],
        "summary": "Preview layout by page id",
        "operationId": "previewLayout",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "unauthorized" },
          "200": {
            "description": "Layout details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LayoutPreviewXto" }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" },
          "404": { "description": "Page not found" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/pages/{id}/items": {
      "get": {
        "tags": ["data items", "Pages api", "page"],
        "summary": "Lists all the available data item ids, corresponding to the page",
        "operationId": "getPageDataItems",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "All available data items for page",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "type": "string" } }
              }
            }
          },
          "422": { "description": "Data source not found" },
          "403": { "description": "Authorization unsuccessful" },
          "401": { "description": "Authentication unsuccessful" },
          "404": { "description": "Page not found" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/pages/seo/change-frequency": {
      "get": {
        "tags": ["change", "Pages api", "seo", "frequency"],
        "summary": "Lists all available page seo change frequency options",
        "operationId": "getPageSeoChangeFrequency",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "All available page seo change frequency options",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "ALWAYS",
                      "HOURLY",
                      "DAILY",
                      "WEEKLY",
                      "MONTHLY",
                      "YEARLY",
                      "NEVER"
                    ]
                  }
                }
              }
            }
          },
          "403": { "description": "Authorization unsuccessful" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "deprecated": true,
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/pages/data-sources": {
      "get": {
        "tags": ["Pages api", "conditions"],
        "summary": "Lists all available page data sources",
        "operationId": "getPageDataSources",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization unsuccessful" },
          "200": {
            "description": "All available page data sources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/PageDataSourceXto" }
                }
              }
            }
          },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/pages/conditions/data": {
      "get": {
        "tags": ["Pages api", "conditions"],
        "summary": "Affiliates and segments names and ids ",
        "operationId": "getData",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization unsuccessful" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Affiliate and segment data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConditionsData" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/navigation/{navigationType}": {
      "get": {
        "tags": ["Navigation api"],
        "summary": "Get page configured navigation",
        "operationId": "get_3",
        "parameters": [
          {
            "name": "navigationType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["VERTICAL", "HORIZONTAL", "MAIN", "SECONDARY"]
            }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "unauthorized" },
          "404": { "description": "element not found" },
          "200": {
            "description": "Page details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavigationResponseItemXto"
                }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/navigation/v2": {
      "get": {
        "tags": ["Navigation api"],
        "summary": "Get page configured navigation",
        "operationId": "getV2",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "unauthorized" },
          "404": { "description": "element not found" },
          "401": { "description": "jwt token is invalid or expired" },
          "200": {
            "description": "Page details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageDetailsXto" }
              }
            }
          }
        },
        "deprecated": true,
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/navigation/eligible/pages": {
      "get": {
        "tags": ["Navigation api"],
        "summary": "Get pages eligible to be added in navigation",
        "operationId": "getEligiblePages",
        "parameters": [
          {
            "name": "includeChildPages",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "unauthorized" },
          "200": {
            "description": "Pages tree",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/PageXto" }
                }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/metadata/casino/game/tile": {
      "get": {
        "tags": ["game-tile", "Casino game tile api"],
        "summary": "Get metadata game tiles",
        "operationId": "getGameTiles",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Games returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MetadataGameTileXto" }
                }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/media/system/directories": {
      "get": {
        "tags": ["Media system directories api"],
        "summary": "List all root directories",
        "operationId": "getDirectories",
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "200": {
            "description": "All directories on root level",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MediaDirectoryXto" }
                }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/media/system/directories/{id}": {
      "get": {
        "tags": ["Media system directories api"],
        "summary": "Gets media directory details",
        "operationId": "getDirectoryDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "width",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "max-size",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "200": {
            "description": "All directories on root level",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaDirectoryDetailsXto"
                }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" },
          "404": { "description": "directory not found" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/media/system/directories/by-type/{type}": {
      "get": {
        "tags": ["Media system directories api"],
        "summary": "List all root directories",
        "operationId": "getDirectoryByType",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["BRAND_FONTS", "BRAND_LOGOS", "BRAND_ICONS"]
            }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "404": { "description": "Not found directory with this type" },
          "403": { "description": "unauthorized" },
          "200": {
            "description": "All directories on root level",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MediaDirectoryXto" }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/media/directories/{id}": {
      "get": {
        "tags": ["Media directories api"],
        "summary": "Gets media directory details",
        "operationId": "getDirectoryDetails_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "width",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "max-size",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "200": {
            "description": "All directories on root level",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaDirectoryDetailsXto"
                }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" },
          "404": { "description": "directory not found" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "delete": {
        "tags": ["Media directories api"],
        "summary": "Removes an existing directory object",
        "operationId": "deleteDirectory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "422": { "description": "Error while processing validation" },
          "401": { "description": "jwt token is invalid or expired" },
          "200": { "description": "Success" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/loyalty/program": {
      "get": {
        "tags": ["loyalty"],
        "summary": "Get all loyalty levels",
        "operationId": "getLoyaltyProgram",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoyaltyProgramXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/loyalty/level/{id}": {
      "get": {
        "tags": ["loyalty"],
        "summary": "Get all loyalty level by id",
        "operationId": "getLoyaltyLevelById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoyaltyProgramXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "delete": {
        "tags": ["loyalty"],
        "summary": "Delete loyalty level",
        "operationId": "deleteLoyaltyLevel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": { "description": "Success" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/l10n/{id}": {
      "get": {
        "tags": ["Localization api"],
        "summary": "Get localization item",
        "operationId": "get_4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "404": { "description": "item not found" },
          "200": {
            "description": "Requested item",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LocalizationXto" }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "delete": {
        "tags": ["Localization api"],
        "summary": "Delete localization ",
        "operationId": "deleteLocalization",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "unauthorized" },
          "404": { "description": "Item not found" },
          "401": { "description": "jwt token is invalid or expired" },
          "200": { "description": "Success" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/l10n/search/{referenceId}": {
      "get": {
        "tags": ["Localization api"],
        "summary": "Search localizations by reference id. Contains all localized fields for this reference",
        "operationId": "searchByReference",
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Successful search result",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LocalizationsGroupedXto" }
              }
            }
          },
          "403": { "description": "unauthorized" },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/l10n/search/{referenceId}/{field}": {
      "get": {
        "tags": ["Localization api"],
        "summary": "Search localizations by reference id and field",
        "operationId": "searchByField",
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "unauthorized" },
          "401": { "description": "jwt token is invalid or expired" },
          "200": {
            "description": "Successful search result",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FieldGroupXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/l10n/search-service/{referenceId}/{field}": {
      "get": {
        "tags": ["Localization api"],
        "summary": "Search localizations by reference id and field",
        "operationId": "serviceSearchByField",
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "field",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "unauthorized" },
          "401": { "description": "jwt token is invalid or expired" },
          "200": {
            "description": "Successful search result",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FieldGroupXto" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/internal/sitemap": {
      "get": {
        "tags": ["Pages api"],
        "summary": "Get sitemaps pages",
        "operationId": "getSitemaps",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Sitemap page list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SitemapPageXto" }
                }
              }
            }
          }
        }
      }
    },
    "/api/internal/sitemap/robots/{domainId}": {
      "get": {
        "tags": ["Pages api"],
        "summary": "Get Robots.txt data for a domain",
        "operationId": "getRobotsData",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Robots.txt data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RobotsXto" }
              }
            }
          },
          "404": {
            "description": "domain not found",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/RobotsXto" } }
            }
          }
        }
      }
    },
    "/api/internal/brand/locales": {
      "get": {
        "tags": ["locales", "Internal brand cms configuration API"],
        "operationId": "getLocales",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Locales returned successfully",
            "content": {
              "*/*": { "schema": { "type": "array", "items": { "type": "string" } } }
            }
          }
        }
      }
    },
    "/api/internal/brand/languages": {
      "get": {
        "tags": ["Internal brand cms configuration API", "config"],
        "operationId": "getEnabledLanguages",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Enabled languages returned successfully",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/WebsiteLanguageXto" }
                }
              }
            }
          }
        }
      }
    },
    "/api/internal/brand/icons": {
      "get": {
        "tags": ["Internal brand cms configuration API", "icons"],
        "operationId": "getIcons",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Icons returned successfully",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/IconWebsiteXto" }
                }
              }
            }
          }
        }
      }
    },
    "/api/internal/brand/domains": {
      "get": {
        "tags": ["Internal brand cms configuration API", "config"],
        "operationId": "getDomains",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Domains returned successfully",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InternalBrandDomainXto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/internal/brand/configured-ext-providers": {
      "get": {
        "tags": ["ext-provider-configuration", "Internal brand cms configuration API"],
        "summary": "Returns a map showing what external providers are configured",
        "description": "Will be used to check / enforce whether a provider has configuration",
        "operationId": "getConfiguredExternalProviders",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Map showing what external providers are configured",
            "content": {
              "application/json": {
                "example": { "GTM": "true", "TELEGRAM": "false" }
              }
            }
          }
        }
      }
    },
    "/api/internal/brand/config": {
      "get": {
        "tags": ["Internal brand cms configuration API", "config"],
        "operationId": "getConfig",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Config returned successfully",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { "type": "object" }
                }
              }
            }
          }
        }
      }
    },
    "/api/internal/brand/config-v2": {
      "get": {
        "tags": ["Internal brand cms configuration API", "config"],
        "operationId": "getConfigV2",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Config returned successfully",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BrandConfigurationXto" }
              }
            }
          }
        }
      }
    },
    "/api/init/register": {
      "get": {
        "tags": ["init-controller"],
        "operationId": "initRegister",
        "parameters": [
          {
            "name": "ip-country",
            "in": "header",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/InitRegisterResponseXto" }
              }
            }
          }
        }
      }
    },
    "/api/init/brands": {
      "get": {
        "tags": ["init-controller"],
        "operationId": "getBrands",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Info about all brands that user has permissions for",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/BrandDto" }
                }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/generic-button-container/properties": {
      "get": {
        "tags": ["button", "Generic Button Container api"],
        "summary": "Get generic button container properties enum",
        "operationId": "getProperties",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": { "description": "Success" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/frontend/translations/{languageCode}": {
      "get": {
        "tags": ["Translations frontend api"],
        "summary": "Get all translations by languageCode",
        "operationId": "getAllByLanguage",
        "parameters": [
          {
            "name": "languageCode",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { "type": "string" }
                }
              }
            }
          }
        }
      }
    },
    "/api/frontend/telegram/signup-data": {
      "get": {
        "tags": ["Website Telegram endpoints"],
        "summary": "Provides Telegram authentication data",
        "description": "Provides Telegram authentication data",
        "operationId": "telegramSignupData",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/TelegramSignupDataXto" }
              }
            }
          }
        }
      }
    },
    "/api/frontend/tab-container/{containerId}/tab/{tabId}": {
      "get": {
        "tags": ["tab-container", "frontend"],
        "summary": "Get tab contents",
        "operationId": "getTabContents",
        "parameters": [
          {
            "name": "containerId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "tabId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "List of page container objects",
            "content": { "application/json": {} }
          }
        }
      }
    },
    "/api/frontend/customer/paymentiq/session": {
      "get": {
        "tags": ["frontend"],
        "summary": "Payment IQ customer session",
        "description": "c",
        "operationId": "getPaymentIqSession",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Payment IQ customer session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/PaymentSessionXto" }
                }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/frontend/customer/fluid/data": {
      "get": {
        "tags": ["frontend"],
        "summary": "Fluid data required for initialisation",
        "operationId": "getFluidData",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Successfully retrieved data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FluidDataXto" }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/frontend/casino/search": {
      "get": {
        "tags": ["game", "frontend"],
        "summary": "Search casino games",
        "operationId": "searchGamesPaged",
        "parameters": [
          {
            "name": "searchValue",
            "in": "query",
            "required": true,
            "schema": { "maxLength": 2147483647, "minLength": 2, "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 1 }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 20 }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Games returned successfully, there are no more pages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FrontendCasinoGameSearchXto"
                }
              }
            }
          },
          "206": {
            "description": "Games returned successfully, there are more pages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FrontendCasinoGameSearchXto"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/frontend/casino/provider/search": {
      "get": {
        "tags": ["providers", "frontend"],
        "summary": "Search casino game providers",
        "operationId": "searchGameProvidersPaged",
        "parameters": [
          {
            "name": "searchValue",
            "in": "query",
            "required": true,
            "schema": { "maxLength": 2147483647, "minLength": 2, "type": "string" }
          }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Providers are returned successfully, there are no more pages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FrontendCasinoGameProviderLogoXto"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/frontend/casino/provider-games/{id}": {
      "get": {
        "tags": ["game", "frontend"],
        "summary": "Get provider games",
        "operationId": "getProviderGamesPaged",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 1 }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 20 }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Games returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/GameFrontendXto" }
                }
              }
            }
          }
        }
      }
    },
    "/api/frontend/casino/launch/real/{id}": {
      "get": {
        "tags": ["game", "frontend"],
        "summary": "Get game real launch url",
        "operationId": "getRealLaunchUrl",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": { "description": "Launch url", "content": { "plain/text": {} } }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/frontend/casino/launch/demo/{id}": {
      "get": {
        "tags": ["game", "frontend"],
        "summary": "Get game demo launch url",
        "operationId": "getDemoLaunchUrl",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": { "description": "Launch url", "content": { "plain/text": {} } },
          "422": { "description": "Validation error" }
        }
      }
    },
    "/api/frontend/casino/games": {
      "get": {
        "tags": ["game", "frontend"],
        "summary": "Get enabled games",
        "operationId": "getAllGames",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Games returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/GameFrontendXto" }
                }
              }
            }
          }
        }
      }
    },
    "/api/frontend/casino/category-games/{id}": {
      "get": {
        "tags": ["game", "frontend"],
        "summary": "Get category games",
        "operationId": "getCategoryGamesPaged",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 1 }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 20 }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Games returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/GameFrontendXto" }
                }
              }
            }
          }
        }
      }
    },
    "/api/email/template/body/parameters": {
      "get": {
        "tags": ["Email template api"],
        "summary": "Get all body parameters(template placeholders)",
        "description": "Get all body parameters(template placeholders)",
        "operationId": "getAllBodyParameters",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Get all body parameters(template placeholders)",
            "content": { "application/json": { "schema": { "type": "string" } } }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        }
      }
    },
    "/api/container/external/conditions/{id}": {
      "get": {
        "tags": ["Configuration api", "conditions"],
        "summary": "Get all external conditions for container",
        "operationId": "get_5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization unsuccessful" },
          "200": {
            "description": "List of all external conditions for container",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContainerExternalConditionsXto"
                  }
                }
              }
            }
          },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/configuration/external/conditions/{id}": {
      "get": {
        "tags": ["Configuration api", "conditions"],
        "summary": "Get all external conditions for container",
        "operationId": "get_6",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "List of all external conditions for container configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContainerExternalConditionsXto"
                  }
                }
              }
            }
          },
          "403": { "description": "Authorization unsuccessful" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/configuration/containers/search": {
      "get": {
        "tags": ["Configuration api"],
        "summary": "Get all container configurations",
        "operationId": "searchContainerConfigurations",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Request validation error(s)" },
          "403": { "description": "unauthorized" },
          "200": {
            "description": "Get all container templates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageOfContainerConfigurationsXto"
                }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/conditions/evaluate": {
      "get": {
        "tags": ["Conditions api"],
        "summary": "Test evaluation ",
        "operationId": "evaluate",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "cid",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "ipCountry",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "regCountry",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "affiliate",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "OK",
            "content": { "*/*": { "schema": { "type": "boolean" } } }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/conditions/data": {
      "get": {
        "tags": ["Conditions api"],
        "summary": "Conditions data for containers ",
        "operationId": "getData_1",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization unsuccessful" },
          "200": {
            "description": "Conditions data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConditionsData" }
              }
            }
          },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/types": {
      "get": {
        "tags": ["types", "Casino api"],
        "summary": "Get game type by provider and subProvider",
        "operationId": "getTypes",
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "subProvider",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "list of game types",
            "content": { "application/json": {} }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/providers": {
      "get": {
        "tags": ["Casino api", "provider"],
        "summary": "Get providers and subProviders",
        "operationId": "getProviders",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization failed" },
          "200": {
            "description": "Providers and subproviders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/PlatformProviderXto" }
                }
              }
            }
          },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/provider": {
      "get": {
        "tags": ["Casino game provider api", "providers"],
        "summary": "Get all providers paginated",
        "operationId": "getAllProviders",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 10 }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "providers returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageableResponseXtoGameProviderXto"
                }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/provider/configured": {
      "get": {
        "tags": ["Casino game provider api", "providers"],
        "summary": "Get all configured providers paginated",
        "operationId": "getConfiguredProviders",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 10 }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "providers returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageableResponseXtoGameProviderXto"
                }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "deprecated": true,
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/game/{id}": {
      "get": {
        "tags": ["game", "Casino api"],
        "summary": "Get game details",
        "operationId": "getGame",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Game details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CasinoGameXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "422": { "description": "Game is disabled or deleted in platform" }
        },
        "security": [{ "bearer-key": [] }]
      },
      "delete": {
        "tags": ["game", "Casino api"],
        "summary": "Delete game",
        "operationId": "deleteGame",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "True if game is deleted, false if it didn't existed",
            "content": { "*/*": { "schema": { "type": "boolean" } } }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/game/types": {
      "get": {
        "tags": ["types", "Casino api"],
        "summary": "Get all game types",
        "operationId": "getTypes_1",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "list of game types",
            "content": { "application/json": {} }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/game/names": {
      "get": {
        "tags": ["types", "Casino api"],
        "summary": "Get all game types",
        "operationId": "getPlatformGameNames",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "list of game types",
            "content": { "application/json": {} }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/game/all/extended": {
      "get": {
        "tags": ["Casino api", "games extended"],
        "summary": "Get all configured casino games with extended info",
        "operationId": "getAllGames_1",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Games returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedCasinoGameXto"
                  }
                }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/game-launch": {
      "get": {
        "tags": ["Casino api", "games"],
        "summary": "Get game demo launch url",
        "operationId": "getLaunchUrl",
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "ip-country",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "gameId",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": { "description": "Launch url", "content": { "plain/text": {} } }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brands": {
      "get": {
        "tags": ["Brands api"],
        "summary": "Get all brands (filtered if user doesn't have permissions",
        "operationId": "getBrands_1",
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "all allowed brands",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/BrandXto" }
                }
              }
            }
          },
          "401": { "description": "jwt token is invalid or expired" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/themes/variables/{variableId}": {
      "get": {
        "tags": ["themes", "Brand theme API"],
        "summary": "Get a brand variable info",
        "operationId": "getVariable",
        "parameters": [
          {
            "name": "variableId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "themeId",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "Not found" },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VariableXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/themes/variables/groups": {
      "get": {
        "tags": ["themes", "Brand theme API"],
        "summary": "Get all brand variable groups",
        "operationId": "getGroups",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/GroupXto" }
                }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/themes/variables/by-group-id/{groupId}": {
      "get": {
        "tags": ["themes", "Brand theme API"],
        "summary": "Get all brand variables for a group",
        "operationId": "getVariables",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "themeId",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "onlyBasic",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/VariableXto" }
                }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/config-v2": {
      "get": {
        "tags": ["Brand cms configuration API", "config"],
        "operationId": "getConfigV2_1",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Config returned successfully",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BrandConfigurationXto" }
              }
            }
          },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/banner": {
      "get": {
        "tags": ["Banners api", "banners"],
        "summary": "Get all the banners",
        "operationId": "listBanners",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Banners list",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BannerListItemXto" }
              }
            }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/banner/{id}/v2": {
      "get": {
        "tags": ["Banners api", "details", "banners"],
        "summary": "Get banner details",
        "operationId": "bannerDetailsV2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Banner details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BannerDetailsXtoV2" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "404": { "description": "Banner not found" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/banner/types": {
      "get": {
        "tags": ["Banners api", "banners"],
        "summary": "Get banner types",
        "operationId": "listBannerTypes",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Banner types list",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BannerListItemXto" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/banner/conditions/data": {
      "get": {
        "tags": ["Banners api", "conditions"],
        "summary": "Affiliates and segments names and ids ",
        "operationId": "getData_2",
        "parameters": [
          {
            "name": "bannerId",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization unsuccessful" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Affiliate and segment data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConditionsData" }
              }
            }
          }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/l10n/reference-id/{referenceId}": {
      "delete": {
        "tags": ["Localization api"],
        "summary": "Delete localizations by referenceId",
        "operationId": "deleteLocalizationsByReferenceId",
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "unauthorized" },
          "401": { "description": "jwt token is invalid or expired" },
          "200": { "description": "Success" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/icons/{id}": {
      "delete": {
        "tags": ["Icons api", "edit", "icons"],
        "summary": "Delete icon",
        "operationId": "iconsDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "404": { "description": "Icon not found" },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": { "description": "Delete a icon" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/email/template/{id}": {
      "delete": {
        "tags": ["Email template api"],
        "summary": "Create email template",
        "description": "create email template",
        "operationId": "deleteTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": {
            "description": "Create email template",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EmailTemplateXto" }
              }
            }
          }
        }
      }
    },
    "/api/casino/game/{tileId}/image": {
      "delete": {
        "tags": ["game", "Casino api"],
        "summary": "Delete image",
        "operationId": "deleteTileImage",
        "parameters": [
          {
            "name": "tileId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": { "description": "Success" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/game/{id}/image": {
      "delete": {
        "tags": ["game", "Casino api"],
        "summary": "Delete image",
        "operationId": "deleteGameImage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "category",
            "in": "query",
            "required": true,
            "schema": { "type": "boolean" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": { "description": "Success" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/game/tile/{id}": {
      "delete": {
        "tags": ["game-tile", "Casino game tile api"],
        "summary": "Delete game tile",
        "operationId": "delete_4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "200": { "description": "Success" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/casino/game/bulk/delete": {
      "delete": {
        "tags": ["Casino api"],
        "summary": "Bulk games delete",
        "operationId": "bulkGamesDelete",
        "parameters": [{ "name": "tenant", "in": "header" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "type": "string" } }
            }
          },
          "required": true
        },
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "200": {
            "description": "Bulk games delete",
            "content": { "application/json": { "schema": { "type": "boolean" } } }
          },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" },
          "422": { "description": "Game is disabled or deleted in platform" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/brand/properties/{id}": {
      "delete": {
        "tags": ["Brand properties api"],
        "summary": "Delete property",
        "description": "Delete property",
        "operationId": "delete_8",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "200": {
            "description": "Delete property",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EmailTemplateXto" }
              }
            }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "401": { "description": "Authentication unsuccessful" }
        },
        "security": [{ "bearer-key": [] }]
      }
    },
    "/api/banner/{id}": {
      "delete": {
        "tags": ["Banners api", "edit", "banners"],
        "summary": "Delete banner",
        "operationId": "bannerDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "tenant", "in": "header" }
        ],
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "content": { "*/*": { "schema": { "type": "object" } } }
          },
          "400": { "description": "Bad request" },
          "403": { "description": "Authorization failed" },
          "404": { "description": "Banner not found" },
          "401": { "description": "Authentication unsuccessful" },
          "200": { "description": "Delete a banner" }
        },
        "security": [{ "bearer-key": [] }]
      }
    }
  },
  "components": {
    "schemas": {
      "CreateTranslationRequest": {
        "required": ["data", "keyId", "languageCode"],
        "type": "object",
        "properties": {
          "keyId": { "type": "string" },
          "languageCode": { "type": "string" },
          "data": { "$ref": "#/components/schemas/TranslationData" }
        }
      },
      "TranslationData": {
        "required": ["value"],
        "type": "object",
        "properties": {
          "value": { "type": "string", "example": "Kenne deinen Kunden" },
          "outdated": { "type": "boolean", "example": false },
          "inProgress": { "type": "boolean", "example": false },
          "needsReview": { "type": "boolean", "example": true }
        }
      },
      "KeyXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "5144e999-b486-4gfe-887d-7a680aa3d6eb" },
          "key": { "type": "string", "example": "KYC" },
          "displayName": { "type": "string", "example": "Know your customer" },
          "parentKeyChain": {
            "type": "array",
            "example": ["MYA"],
            "items": { "type": "string", "example": "[\"MYA\"]" }
          },
          "parentId": {
            "type": "string",
            "example": "6144e999-b486-4gfe-887d-7a680aa3d6eb"
          },
          "comment": { "type": "string", "example": "Some random text" },
          "level": { "type": "integer", "format": "int32", "example": 1 },
          "hasChildren": { "type": "boolean", "example": true },
          "needsTranslation": { "type": "boolean", "example": true },
          "matchesSearch": { "type": "boolean", "example": false }
        }
      },
      "TranslationXto": {
        "type": "object",
        "properties": {
          "key": { "$ref": "#/components/schemas/KeyXto" },
          "dataByLanguage": {
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/TranslationData" }
          }
        }
      },
      "TelegramConfigButtonXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "buttonType": { "type": "string", "enum": ["WEB_APP", "EXTERNAL_LINK"] },
          "buttonText": { "type": "string" },
          "buttonUrl": { "type": "string" }
        }
      },
      "TelegramConfigXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "botUserName": { "type": "string" },
          "replyCaption": { "type": "string" },
          "replyPictureUrl": { "type": "string" },
          "buttons": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TelegramConfigButtonXto" }
          }
        }
      },
      "PackageRequestXto": {
        "required": ["packageId", "published", "title"],
        "type": "object",
        "properties": {
          "packageId": { "type": "string" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "iconCode": { "type": "string" },
          "backgroundImage": { "type": "string" },
          "backgroundColor": { "type": "string" },
          "published": { "type": "boolean" }
        }
      },
      "PackageXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "packageId": { "type": "string" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "iconCode": { "type": "string" },
          "backgroundImage": { "type": "string" },
          "backgroundColor": { "type": "string" },
          "published": { "type": "boolean" }
        }
      },
      "PromotionActionXto": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "OPEN_INTERNAL_PAGE",
              "OPEN_EXTERNAL_PAGE",
              "OPEN_OVERLAY",
              "OPEN_PROMOTION_DETAILS_PAGE",
              "BONUS_OPT_IN"
            ]
          },
          "target": { "type": "string" },
          "payload": { "type": "string", "deprecated": true },
          "pageId": { "type": "string" },
          "pageDataItemId": { "type": "string" },
          "queryParams": {
            "type": "object",
            "additionalProperties": { "type": "string" }
          },
          "overlayClass": { "type": "string" },
          "overlayParams": { "type": "string" },
          "loggedOutVisible": { "type": "boolean" },
          "bonusId": { "type": "string" }
        }
      },
      "PromotionImageXto": {
        "type": "object",
        "properties": {
          "resolution": { "type": "string", "enum": ["XS", "SM", "MD", "LG", "XL"] },
          "permalink": { "type": "string" }
        }
      },
      "PromotionRequestXto": {
        "required": [
          "cardDescription",
          "cardImage",
          "cardTitle",
          "internalName",
          "mainDescription",
          "mainImages",
          "mainSubTitle",
          "mainTitle",
          "published",
          "termsDescription",
          "termsTitle"
        ],
        "type": "object",
        "properties": {
          "internalName": { "type": "string" },
          "ctaType": { "type": "string", "enum": ["DEPOSIT"] },
          "mainCtaText": { "type": "string", "example": "Claim Now!" },
          "mainTitle": { "type": "string" },
          "mainSubTitle": { "type": "string" },
          "mainDescription": { "type": "string" },
          "squareThumbnailImage": { "type": "string" },
          "mainImages": {
            "maxItems": 5,
            "minItems": 5,
            "type": "array",
            "items": { "$ref": "#/components/schemas/PromotionImageXto" }
          },
          "bonusId": { "type": "string" },
          "validFrom": { "type": "string", "format": "date-time" },
          "validTo": { "type": "string", "format": "date-time" },
          "cardCtaText": { "type": "string", "example": "Claim Now!" },
          "cardSecondaryCtaText": { "type": "string", "example": "Read More" },
          "cardTitle": { "type": "string" },
          "cardDescription": { "type": "string" },
          "cardImage": { "type": "string" },
          "termsTitle": { "type": "string" },
          "termsDescription": { "type": "string" },
          "howItWorks": {
            "type": "string",
            "example": "Press \"Claim\" if you want to live"
          },
          "published": { "type": "boolean" },
          "visibleForAnonymous": {
            "type": "boolean",
            "description": "Visible or not for not logged users."
          },
          "primaryAction": { "$ref": "#/components/schemas/PromotionActionXto" },
          "secondaryAction": { "$ref": "#/components/schemas/PromotionActionXto" }
        }
      },
      "PromotionDetailsXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "internalName": { "type": "string" },
          "published": { "type": "boolean" },
          "validFrom": { "type": "string", "format": "date-time" },
          "validTo": { "type": "string", "format": "date-time" },
          "status": {
            "type": "string",
            "enum": ["ACTIVE", "EXPIRED", "BONUS_DISABLED", "BONUS_OPT_IN_MISMATCH"]
          },
          "readOnly": { "type": "boolean" },
          "bonusId": { "type": "string" },
          "seo": { "$ref": "#/components/schemas/SeoPropertiesXto" },
          "ctaType": { "type": "string", "enum": ["DEPOSIT"] },
          "mainCtaText": { "type": "string" },
          "mainTitle": { "type": "string" },
          "mainSubTitle": { "type": "string" },
          "mainDescription": { "type": "string" },
          "squareThumbnailImage": { "type": "string" },
          "mainImages": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PromotionImageXto" }
          },
          "cardCtaText": { "type": "string" },
          "cardSecondaryCtaText": { "type": "string" },
          "cardTitle": { "type": "string" },
          "cardDescription": { "type": "string" },
          "cardImage": { "type": "string" },
          "termsTitle": { "type": "string" },
          "termsDescription": { "type": "string" },
          "howItWorks": { "type": "string" },
          "visibleForAnonymous": { "type": "boolean" },
          "canChangeBonus": { "type": "boolean" },
          "slugName": { "type": "string" },
          "primaryAction": { "$ref": "#/components/schemas/PromotionActionXto" },
          "secondaryAction": { "$ref": "#/components/schemas/PromotionActionXto" }
        }
      },
      "SeoPropertiesXto": {
        "type": "object",
        "properties": {
          "indexed": { "type": "boolean" },
          "includeInSitemap": { "type": "boolean" },
          "changeFrequency": {
            "type": "string",
            "enum": [
              "ALWAYS",
              "HOURLY",
              "DAILY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "NEVER"
            ]
          },
          "priority": { "type": "number", "format": "double" },
          "metaTitle": { "type": "string" },
          "metaDescription": { "type": "string" },
          "title": { "type": "string" },
          "description": { "type": "string" }
        }
      },
      "PromotionXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "internalName": { "type": "string" },
          "published": { "type": "boolean" },
          "validFrom": { "type": "string", "format": "date-time" },
          "validTo": { "type": "string", "format": "date-time" },
          "status": {
            "type": "string",
            "enum": ["ACTIVE", "EXPIRED", "BONUS_DISABLED", "BONUS_OPT_IN_MISMATCH"]
          },
          "readOnly": { "type": "boolean" },
          "bonusId": { "type": "string" },
          "seo": { "$ref": "#/components/schemas/SeoPropertiesXto" }
        }
      },
      "ConditionGroupXto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Not needed on create",
            "example": "070099ce-24f7-4f1f-8583-cb8c457a4365"
          },
          "booleanOperation": {
            "type": "string",
            "example": "AND",
            "enum": ["AND", "OR"]
          },
          "conditions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ConditionXto" }
          },
          "subGroups": {
            "type": "array",
            "example": [],
            "items": { "$ref": "#/components/schemas/ConditionGroupXto" }
          },
          "rootName": {
            "type": "string",
            "description": "Fill only on root group",
            "example": "Reg country"
          }
        }
      },
      "ConditionXto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "REG_COUNTRY",
            "enum": [
              "IP_COUNTRY",
              "REG_COUNTRY",
              "SEGMENT",
              "AFFILIATE",
              "ACCOUNT_STATE",
              "LANGUAGE",
              "DOMAIN"
            ]
          },
          "values": {
            "type": "array",
            "example": ["BG", "BR"],
            "items": { "type": "string", "example": "[\"BG\",\"BR\"]" }
          },
          "operator": { "type": "string", "example": "NOT_IN", "enum": ["IN", "NOT_IN"] }
        }
      },
      "ErrorPageTemplateXto": {
        "required": ["id", "type"],
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "type": { "type": "string", "enum": ["NOT_FOUND", "INTERNAL_SERVER_ERROR"] },
          "mainText": { "type": "string" }
        }
      },
      "IconRequest": {
        "required": ["code", "url"],
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "code": { "type": "string" },
          "url": { "type": "string" }
        }
      },
      "IconXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "code": { "type": "string" },
          "url": { "type": "string" }
        }
      },
      "EmailTemplateXto": {
        "required": ["id", "type"],
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "type": {
            "type": "string",
            "enum": [
              "RESET_PASSWORD",
              "MIGRATION_RESET_PASSWORD",
              "SOCIAL_LOGIN_RESET_PASSWORD",
              "SOCIAL_LOGIN_FORGOT_PASSWORD"
            ]
          },
          "mainText": { "type": "string" },
          "bodyTemplateParameters": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "RESET_PASSWORD_LINK",
                "MIGRATION_RESET_PASSWORD_LINK",
                "SOCIAL_LOGIN_RESET_PASSWORD_LINK",
                "SOCIAL_LOGIN_TYPE_DISPLAY_NAME"
              ]
            }
          }
        }
      },
      "FontFace": {
        "required": ["trueType", "woff", "woff2"],
        "type": "object",
        "properties": {
          "woff": { "type": "string", "description": "woff font.", "example": "font1" },
          "woff2": { "type": "string", "description": "woff2 font.", "example": "font2" },
          "trueType": {
            "type": "string",
            "description": "trueType font.",
            "example": "font3"
          }
        }
      },
      "Typography": {
        "required": ["fallbackFont", "fontFaces", "name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Typography name.",
            "example": "my-primary-name"
          },
          "fallbackFont": {
            "type": "string",
            "description": "Comma separated list of fonts.",
            "example": "Nunito, Arial, Helvetica, 'sans-serif'"
          },
          "fontFaces": {
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/FontFace" }
          }
        }
      },
      "TypographyXto": {
        "required": ["primary", "secondary"],
        "type": "object",
        "properties": {
          "primary": { "$ref": "#/components/schemas/Typography" },
          "secondary": { "$ref": "#/components/schemas/Typography" }
        }
      },
      "ThemeLogosXto": {
        "required": ["compact", "defaultLogo", "favicon", "initial"],
        "type": "object",
        "properties": {
          "defaultLogo": { "type": "string" },
          "initial": { "type": "string" },
          "favicon": { "type": "string" },
          "compact": { "type": "string" }
        }
      },
      "BrandPropertyXto": {
        "required": ["fieldType", "text", "type"],
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "type": {
            "type": "string",
            "enum": [
              "MFA_URL",
              "SITE_NAME",
              "SITE_SHORT_NAME",
              "RESPONSIBLE_GAMING",
              "AFFILIATE_COOKIE_DURATION_DAYS",
              "WALLET_NEW"
            ]
          },
          "fieldType": { "type": "string", "enum": ["INPUT", "TOGGLE"] },
          "text": { "type": "string" },
          "description": { "type": "string" }
        }
      },
      "BrandLanguageXto": {
        "required": ["code", "enabled"],
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "code": { "type": "string" },
          "enabled": { "type": "boolean" }
        }
      },
      "BannerActionXto": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "OPEN_INTERNAL_PAGE",
              "OPEN_EXTERNAL_PAGE",
              "OPEN_OVERLAY",
              "LOGOUT",
              "OPEN_CHAT",
              "OPEN_SEARCH",
              "OPEN_SIDEBAR",
              "BONUS_OPT_IN",
              "OPEN_EXTERNAL_OVERLAY",
              "OPEN_IFRAME_OVERLAY"
            ]
          },
          "target": { "type": "string" },
          "payload": { "type": "string", "deprecated": true },
          "pageId": { "type": "string" },
          "pageDataItemId": { "type": "string" },
          "queryParams": {
            "type": "object",
            "additionalProperties": { "type": "string" }
          },
          "overlayClass": { "type": "string" },
          "overlayParams": { "type": "string" },
          "loggedOutVisible": { "type": "boolean" },
          "sidebarType": { "type": "string", "enum": ["LEFT", "RIGHT"] }
        }
      },
      "BannerContentRuleXto": {
        "type": "object",
        "properties": {
          "imageUrl": { "type": "string" },
          "alignment": {
            "type": "string",
            "enum": ["LEFT", "RIGHT", "CENTER", "JUSTIFY"]
          },
          "headingFontSize": { "type": "integer", "format": "int32" },
          "secondaryFontSize": { "type": "integer", "format": "int32" },
          "bannerTextFontShadow": { "type": "boolean" },
          "verticalAlignment": { "type": "string", "enum": ["TOP", "MIDDLE", "BOTTOM"] }
        }
      },
      "BannerRequestXtoV2": {
        "required": ["id", "name", "type"],
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "type": { "type": "string", "enum": ["SUPER_BANNER", "PNP_BANNER"] },
          "name": { "type": "string" },
          "pageId": { "type": "string", "deprecated": true },
          "dataItem": { "type": "string", "deprecated": true },
          "externalUrl": { "type": "string", "deprecated": true },
          "secondaryPageId": { "type": "string", "deprecated": true },
          "secondaryDataItem": { "type": "string", "deprecated": true },
          "secondaryExternalUrl": { "type": "string", "deprecated": true },
          "primaryAction": {
            "type": "string",
            "deprecated": true,
            "enum": ["DEPOSIT", "REGISTRATION", "OPEN_INTERNAL", "OPEN_EXTERNAL"]
          },
          "secondaryAction": {
            "type": "string",
            "deprecated": true,
            "enum": ["DEPOSIT", "REGISTRATION", "OPEN_INTERNAL", "OPEN_EXTERNAL"]
          },
          "mainText": { "type": "string" },
          "secondaryText": { "type": "string" },
          "primaryActionText": { "type": "string" },
          "secondaryActionText": { "type": "string" },
          "published": { "type": "boolean" },
          "contentRules": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/BannerContentRuleXto"
            }
          },
          "promotionId": { "type": "string" },
          "primaryCta": { "$ref": "#/components/schemas/BannerActionXto" },
          "secondaryCta": { "$ref": "#/components/schemas/BannerActionXto" },
          "pnPDetails": { "$ref": "#/components/schemas/PnpBannerDetailsXto" }
        }
      },
      "PnpBannerDetailsXto": {
        "type": "object",
        "properties": {
          "pnpBannerTitle": { "type": "string" },
          "pnpBannerDescription": { "type": "string" },
          "amounts": { "type": "array", "items": { "type": "string" } },
          "predefinedAmount": { "type": "integer", "format": "int32" }
        }
      },
      "BannerBonusEligibilityCriteriaXto": {
        "type": "object",
        "properties": {
          "segments": { "type": "array", "items": { "type": "string" } },
          "affiliateIds": { "type": "array", "items": { "type": "string" } },
          "countries": { "type": "array", "items": { "type": "string" } },
          "loyaltyLevels": { "type": "array", "items": { "type": "string" } }
        }
      },
      "BannerBonusXto": {
        "type": "object",
        "properties": {
          "bonusId": { "type": "string" },
          "eligibilityCriteria": {
            "$ref": "#/components/schemas/BannerBonusEligibilityCriteriaXto"
          }
        }
      },
      "BannerDetailsXtoV2": {
        "required": ["id", "name", "type"],
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "type": { "type": "string", "enum": ["SUPER_BANNER", "PNP_BANNER"] },
          "name": { "type": "string" },
          "pageId": { "type": "string" },
          "dataItem": { "type": "string" },
          "externalUrl": { "type": "string" },
          "secondaryPageId": { "type": "string" },
          "secondaryDataItem": { "type": "string" },
          "secondaryExternalUrl": { "type": "string" },
          "primaryAction": {
            "type": "string",
            "enum": ["DEPOSIT", "REGISTRATION", "OPEN_INTERNAL", "OPEN_EXTERNAL"]
          },
          "secondaryAction": {
            "type": "string",
            "enum": ["DEPOSIT", "REGISTRATION", "OPEN_INTERNAL", "OPEN_EXTERNAL"]
          },
          "mainText": { "type": "string" },
          "secondaryText": { "type": "string" },
          "primaryActionText": { "type": "string" },
          "secondaryActionText": { "type": "string" },
          "published": { "type": "boolean" },
          "contentRules": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/BannerContentRuleXto"
            }
          },
          "conditionId": { "type": "string" },
          "promotionId": { "type": "string", "deprecated": true },
          "promotion": { "$ref": "#/components/schemas/BannerPromotionXto" },
          "bonusId": { "type": "string", "deprecated": true },
          "bonus": { "$ref": "#/components/schemas/BannerBonusXto" },
          "primaryCta": { "$ref": "#/components/schemas/BannerActionXto" },
          "secondaryCta": { "$ref": "#/components/schemas/BannerActionXto" },
          "pnPDetails": { "$ref": "#/components/schemas/PnpBannerDetailsXto" }
        }
      },
      "BannerPromotionXto": {
        "type": "object",
        "properties": {
          "promotionId": { "type": "string" },
          "name": { "type": "string" },
          "status": {
            "type": "string",
            "enum": ["ACTIVE", "EXPIRED", "BONUS_DISABLED", "BONUS_OPT_IN_MISMATCH"]
          },
          "validFrom": { "type": "string", "format": "date-time" },
          "validTo": { "type": "string", "format": "date-time" }
        }
      },
      "DbCredentialsXto": {
        "type": "object",
        "properties": {
          "host": { "type": "string" },
          "port": { "type": "integer", "format": "int32" },
          "databaseName": { "type": "string" },
          "username": { "type": "string" },
          "password": { "type": "string" }
        }
      },
      "ToggleNeedsTranslationRequest": {
        "type": "object",
        "properties": {
          "flag": { "type": "array", "items": { "type": "string" } },
          "unflag": { "type": "array", "items": { "type": "string" } }
        }
      },
      "ListTranslationsRequest": {
        "required": ["keyIds", "languageCodes"],
        "type": "object",
        "properties": {
          "keyIds": {
            "type": "array",
            "example": [
              "141d90f7-599e-48a0-8636-c62525ccd1da",
              "2cc31943-0c2f-4947-a140-da1c70fb259b"
            ],
            "items": {
              "type": "string",
              "example": "[\"141d90f7-599e-48a0-8636-c62525ccd1da\",\"2cc31943-0c2f-4947-a140-da1c70fb259b\"]"
            }
          },
          "languageCodes": {
            "type": "array",
            "example": ["en", "de"],
            "items": { "type": "string", "example": "[\"en\",\"de\"]" }
          },
          "onlyMissingTranslations": { "type": "boolean", "example": false },
          "onlyOutdated": { "type": "boolean", "example": false },
          "onlyInProgress": { "type": "boolean", "example": false },
          "onlyNeedsReview": { "type": "boolean", "example": false },
          "onlyNeedsTranslation": { "type": "boolean", "example": false }
        }
      },
      "PackageCreateRequestXto": {
        "required": ["packageId", "published", "title"],
        "type": "object",
        "properties": {
          "packageId": { "type": "string" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "iconCode": { "type": "string" },
          "backgroundImage": { "type": "string" },
          "backgroundColor": { "type": "string" },
          "published": { "type": "boolean" },
          "id": { "type": "string" }
        }
      },
      "PromotionCreateRequestXto": {
        "required": [
          "cardDescription",
          "cardImage",
          "cardTitle",
          "internalName",
          "mainDescription",
          "mainImages",
          "mainSubTitle",
          "mainTitle",
          "published",
          "termsDescription",
          "termsTitle"
        ],
        "type": "object",
        "properties": {
          "internalName": { "type": "string" },
          "ctaType": { "type": "string", "enum": ["DEPOSIT"] },
          "mainCtaText": { "type": "string", "example": "Claim Now!" },
          "mainTitle": { "type": "string" },
          "mainSubTitle": { "type": "string" },
          "mainDescription": { "type": "string" },
          "squareThumbnailImage": { "type": "string" },
          "mainImages": {
            "maxItems": 5,
            "minItems": 5,
            "type": "array",
            "items": { "$ref": "#/components/schemas/PromotionImageXto" }
          },
          "bonusId": { "type": "string" },
          "validFrom": { "type": "string", "format": "date-time" },
          "validTo": { "type": "string", "format": "date-time" },
          "cardCtaText": { "type": "string", "example": "Claim Now!" },
          "cardSecondaryCtaText": { "type": "string", "example": "Read More" },
          "cardTitle": { "type": "string" },
          "cardDescription": { "type": "string" },
          "cardImage": { "type": "string" },
          "termsTitle": { "type": "string" },
          "termsDescription": { "type": "string" },
          "howItWorks": {
            "type": "string",
            "example": "Press \"Claim\" if you want to live"
          },
          "published": { "type": "boolean" },
          "visibleForAnonymous": {
            "type": "boolean",
            "description": "Visible or not for not logged users."
          },
          "primaryAction": { "$ref": "#/components/schemas/PromotionActionXto" },
          "secondaryAction": { "$ref": "#/components/schemas/PromotionActionXto" },
          "id": { "type": "string" }
        }
      },
      "CasinoProviderXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "displayName": { "type": "string" },
          "image": { "type": "string" },
          "seo": { "$ref": "#/components/schemas/SeoPropertiesXto" },
          "gameTileId": { "type": "string" }
        }
      },
      "InitiateResetPasswordXto": {
        "required": ["email"],
        "type": "object",
        "properties": { "email": { "type": "string" }, "domain": { "type": "string" } }
      },
      "CreatePageRequest": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "parentId": { "type": "string" },
          "slug": { "type": "string" },
          "canonicalUrl": { "type": "string" },
          "redirectUrl": { "type": "string" },
          "pageHeading": { "type": "string" },
          "dynamic": { "type": "boolean" },
          "dataSource": { "type": "string" }
        }
      },
      "CreatePageXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "parentId": { "type": "string" },
          "slug": { "type": "string" },
          "canonicalUrl": { "type": "string" },
          "redirectUrl": { "type": "string" },
          "pageHeading": { "type": "string" },
          "dynamic": { "type": "boolean" },
          "dataSource": { "type": "string" },
          "type": {
            "type": "string",
            "enum": [
              "HOME",
              "RESET_PASSWORD",
              "CASINO_GAMEPLAY_REAL",
              "CASINO_GAMEPLAY_DEMO",
              "TERMS_AND_CONDITIONS",
              "PLAYER_PROFILE",
              "CASINO_CATEGORY",
              "LOYALTY",
              "CASINO_GAME_PROVIDER",
              "PROMOTIONS"
            ]
          },
          "restricted": { "type": "boolean" }
        }
      },
      "SlugCheckRequest": {
        "required": ["slug"],
        "type": "object",
        "properties": { "slug": { "type": "string" } }
      },
      "NavigationActionXto": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["OPEN_INTERNAL_PAGE", "OPEN_EXTERNAL_PAGE"]
          },
          "target": { "type": "string" },
          "payload": { "type": "string" },
          "pageId": { "type": "string" },
          "pageDataItemId": { "type": "string" },
          "queryParams": {
            "type": "object",
            "additionalProperties": { "type": "string" }
          }
        }
      },
      "NavigationRequestItemXto": {
        "type": "object",
        "properties": {
          "pageId": { "type": "string", "deprecated": true },
          "iconCode": { "type": "string" },
          "id": { "type": "string" },
          "type": {
            "type": "string",
            "enum": ["PAGE", "EXTERNAL", "DROPDOWN", "DIVIDER", "ACTION", "LABEL"]
          },
          "name": { "type": "string" },
          "externalLink": { "type": "string", "deprecated": true },
          "children": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/NavigationRequestItemXto" }
          },
          "chipType": { "type": "string", "enum": ["LEFT", "RIGHT"] },
          "action": { "$ref": "#/components/schemas/NavigationActionXto" }
        }
      },
      "NavigationResponseItemXto": {
        "type": "object",
        "properties": {
          "pageXto": { "$ref": "#/components/schemas/PageXto" },
          "iconCode": { "type": "string" },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "type": {
            "type": "string",
            "enum": ["PAGE", "EXTERNAL", "DROPDOWN", "DIVIDER", "ACTION", "LABEL"]
          },
          "externalLink": { "type": "string", "deprecated": true },
          "children": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/NavigationResponseItemXto" }
          },
          "chipType": { "type": "string", "enum": ["LEFT", "RIGHT"] },
          "action": { "$ref": "#/components/schemas/NavigationActionXto" }
        }
      },
      "PageXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "parentId": { "type": "string" },
          "published": { "type": "boolean" },
          "assigned": { "type": "boolean" },
          "children": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PageXto" }
          },
          "slug": { "type": "string" },
          "pageHeading": { "type": "string" },
          "dynamic": { "type": "boolean" },
          "dataSource": { "type": "string" },
          "type": {
            "type": "string",
            "enum": [
              "HOME",
              "RESET_PASSWORD",
              "CASINO_GAMEPLAY_REAL",
              "CASINO_GAMEPLAY_DEMO",
              "TERMS_AND_CONDITIONS",
              "PLAYER_PROFILE",
              "CASINO_CATEGORY",
              "LOYALTY",
              "CASINO_GAME_PROVIDER",
              "PROMOTIONS"
            ]
          },
          "restricted": { "type": "boolean" },
          "createTimestamp": { "type": "string", "format": "date-time" }
        }
      },
      "CasinoGameTilesImportRequest": {
        "type": "object",
        "properties": {
          "gameTiles": {
            "uniqueItems": true,
            "type": "array",
            "items": { "type": "string" }
          },
          "skipExisting": { "type": "boolean" }
        }
      },
      "GameData": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "r74b3e1f-bb6a-45db-9bd6-27c199dd7b86" },
          "platformGameId": {
            "type": "string",
            "example": "e74b3e1f-bb6a-45db-9bd6-27c199dd7b86"
          },
          "name": { "type": "string", "example": "roulette" },
          "type": {
            "type": "string",
            "example": "roulette",
            "enum": [
              "SLOTS",
              "JACKPOTS",
              "VIDEO_POKER",
              "ROULETTE",
              "TABLE_CARD",
              "BLACKJACK",
              "BACCARAT",
              "MINIGAMES",
              "OTHERS",
              "DEFAULT",
              "OTHERS_LIVE",
              "LIVE_BACCARAT",
              "LIVE_BLACKJACK",
              "GAME_SHOW",
              "LIVE_ROULETTE",
              "DICE",
              "DRAGON_TIGER",
              "CRASH",
              "SCRATCH",
              "ARCADE",
              "LOTTERY",
              "BINGO",
              "VIRTUAL",
              "PLAYER_PROPS",
              "OTHERS_TABLE",
              "LIVE_DICE",
              "LIVE_DRAGON_TIGER",
              "LIVE_POKER"
            ]
          },
          "externalGameId": { "type": "string", "example": "externalGameId" },
          "provider": { "type": "string", "example": "Hub88" },
          "subProvider": { "type": "string", "example": "Red tiger" },
          "hasDemo": { "type": "boolean", "example": true },
          "enabled": { "type": "boolean", "example": true },
          "platformEnabled": { "type": "boolean", "example": true },
          "rtp": { "type": "string", "example": "94.52" },
          "tileIds": {
            "uniqueItems": true,
            "type": "array",
            "example": "['e74b3e1f-bb6a-45db-9bd6-27c199dd7b86','k5yb3e1f-bb6a-45db-9bd6-27c199dd7h74']",
            "items": {
              "type": "string",
              "example": "['e74b3e1f-bb6a-45db-9bd6-27c199dd7b86','k5yb3e1f-bb6a-45db-9bd6-27c199dd7h74']"
            }
          }
        }
      },
      "GamesResultGridXto": {
        "type": "object",
        "properties": {
          "totalCount": { "type": "integer", "format": "int32", "example": 12 },
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/GameData" }
          }
        }
      },
      "MediaFileXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "originalFileName": { "type": "string" },
          "permalink": { "type": "string" },
          "altText": { "type": "string" },
          "imageWidth": { "type": "integer", "format": "int32" },
          "imageHeight": { "type": "integer", "format": "int32" },
          "fileSize": { "type": "integer", "format": "int64" },
          "parentsChain": { "type": "array", "items": { "type": "string" } }
        }
      },
      "CreateMediaDirectoryRequest": {
        "type": "object",
        "properties": { "name": { "type": "string" }, "parentId": { "type": "string" } }
      },
      "MediaDirectoryItemXto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "parentId": { "type": "string" },
          "id": { "type": "string" },
          "system": { "type": "boolean" }
        }
      },
      "LoyaltyLevelXto": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "internalName": { "type": "string", "example": "GoldLevel1" },
          "name": { "type": "string", "example": "Gold" },
          "mainImage": { "type": "string", "example": "path/to/mainImage" },
          "imageForNav": { "type": "string", "example": "path/to/imageForNav" },
          "description": { "type": "string", "example": "description" },
          "order": { "type": "integer", "format": "int32", "example": 1 },
          "iconCode": { "type": "string", "example": ":icon_code:" }
        }
      },
      "CreateLocalizationRequest": {
        "required": [
          "countryCode",
          "field",
          "languageCode",
          "referenceId",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "5144e999-b486-4gfe-887d-7a680aa3d6eb" },
          "referenceId": {
            "type": "string",
            "example": "5144e999-b486-4gfe-887d-7a680aa3d6eb"
          },
          "field": { "type": "string", "example": "primaryLabel" },
          "languageCode": { "type": "string", "example": "pt" },
          "countryCode": { "type": "string", "example": "br" },
          "type": { "type": "string", "example": "STRING", "enum": ["STRING", "IMAGE"] },
          "value": { "type": "string", "example": "rótulo primário" }
        }
      },
      "LocalizationXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "6144e999-b486-4gfe-887d-7a680aa3d6eb" },
          "referenceId": {
            "type": "string",
            "example": "5144e999-b486-4gfe-887d-7a680aa3d6eb"
          },
          "field": { "type": "string", "example": "primaryLabel" },
          "languageCode": { "type": "string", "example": "pt" },
          "countryCode": { "type": "string", "example": "br" },
          "type": { "type": "string", "example": "STRING", "enum": ["STRING", "IMAGE"] },
          "value": { "type": "string", "example": "rótulo primário" }
        },
        "example": {
          "br": {
            "id": "b495def5-9ffd-4cce-af2c-64d39a03f885",
            "referenceId": "00480f94-f2ba-4b2c-be76-b42cf9934db5",
            "field": "primaryLabel",
            "languageCode": "pt",
            "countryCode": "br",
            "type": "STRING",
            "value": "QUENTE"
          },
          "pt": {
            "id": "8d0509ae-b1e2-44bd-9fb0-0fa6ace318ee",
            "referenceId": "00480f94-f2ba-4b2c-be76-b42cf9934db5",
            "field": "primaryLabel",
            "languageCode": "pt",
            "countryCode": "pt",
            "type": "STRING",
            "value": "QUENTE"
          }
        }
      },
      "SlugXto": {
        "required": ["slug"],
        "type": "object",
        "properties": { "slug": { "type": "string" } }
      },
      "DevcodeIdentityAuthRequest": {
        "type": "object",
        "properties": {
          "amount": { "type": "number" },
          "locale": { "type": "string" },
          "affiliateToken": { "type": "string" },
          "affiliateOfflineCode": { "type": "string" },
          "affiliateClickId": { "type": "string" },
          "affiliateWebsiteId": { "type": "string" },
          "affiliatePublisherId": { "type": "string" },
          "affiliateProvider": {
            "type": "string",
            "enum": ["MYAFFILIATES", "NETREFER", "GENERIC"]
          },
          "referredBy": { "type": "string" }
        }
      },
      "AuthUrlXto": {
        "type": "object",
        "properties": { "authUrl": { "type": "string" }, "sseUUID": { "type": "string" } }
      },
      "DateTimeRangeXto": {
        "type": "object",
        "properties": {
          "start": { "type": "string", "format": "date-time" },
          "end": { "type": "string", "format": "date-time" }
        }
      },
      "FrontendBonusHistorySearchRequestXto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Bonus type",
            "example": "CASINO_CASHBACK"
          },
          "dateTimeRangeXto": { "$ref": "#/components/schemas/DateTimeRangeXto" },
          "currency": {
            "type": "string",
            "description": "Bonus currency",
            "example": "BTC"
          }
        }
      },
      "FrontendBonusHistoryResponseXto": {
        "type": "object",
        "properties": {
          "status": { "type": "string" },
          "bonusName": { "type": "string" },
          "initialAmount": { "type": "number" },
          "remainingWageringAmount": { "type": "number" },
          "type": { "type": "string" },
          "currency": { "type": "string" },
          "expiryDate": { "type": "string", "format": "date-time" },
          "bonusCreateTime": { "type": "string", "format": "date-time" },
          "freeSpinCurrency": { "type": "string" },
          "freeSpinCount": { "type": "integer", "format": "int32" },
          "freeSpinValue": { "type": "number" },
          "cbid": { "type": "string" }
        }
      },
      "BetHistorySearchRequestXto": {
        "type": "object",
        "properties": {
          "nextItemId": { "type": "integer", "format": "int64" },
          "nextRangeId": { "type": "integer", "format": "int64" },
          "gameIds": {
            "type": "array",
            "description": "List of provider game ids",
            "example": ["evo_powerblackjak", "evo_firstpersonbaccarat"],
            "items": {
              "type": "string",
              "description": "List of provider game ids",
              "example": "[\"evo_powerblackjak\",\"evo_firstpersonbaccarat\"]"
            }
          },
          "gameTypes": {
            "type": "array",
            "description": "List of game types",
            "example": ["SLOTS", "TABLE_CARD"],
            "items": {
              "type": "string",
              "description": "List of game types",
              "example": "[\"SLOTS\",\"TABLE_CARD\"]",
              "enum": [
                "SLOTS",
                "JACKPOTS",
                "VIDEO_POKER",
                "ROULETTE",
                "TABLE_CARD",
                "BLACKJACK",
                "BACCARAT",
                "MINIGAMES",
                "OTHERS",
                "DEFAULT",
                "OTHERS_LIVE",
                "LIVE_BACCARAT",
                "LIVE_BLACKJACK",
                "GAME_SHOW",
                "LIVE_ROULETTE",
                "DICE",
                "DRAGON_TIGER",
                "CRASH",
                "SCRATCH",
                "ARCADE",
                "LOTTERY",
                "BINGO",
                "VIRTUAL",
                "PLAYER_PROPS",
                "OTHERS_TABLE",
                "LIVE_DICE",
                "LIVE_DRAGON_TIGER",
                "LIVE_POKER"
              ]
            }
          },
          "dateTimeRangeXto": { "$ref": "#/components/schemas/DateTimeRangeXto" },
          "betCurrency": {
            "type": "string",
            "description": "Bet currency",
            "example": "BTC"
          }
        }
      },
      "FrontendBetHistoryResponseXto": {
        "type": "object",
        "properties": {
          "gameName": { "type": "string" },
          "betCurrency": { "type": "string" },
          "totalBetAmount": { "type": "number" },
          "wonAmount": { "type": "number" },
          "externalTransactionId": { "type": "string", "deprecated": true },
          "timestamp": { "type": "string", "format": "date-time" },
          "roundId": { "type": "string" }
        }
      },
      "CasinoGameSearchRequestXto": {
        "type": "object",
        "properties": {
          "searchValue": { "maxLength": 2147483647, "minLength": 2, "type": "string" },
          "includeProviders": { "type": "boolean" },
          "gameTileId": { "type": "string" }
        }
      },
      "FrontendCasinoGameProviderLogoXto": {
        "type": "object",
        "properties": {
          "imageUrl": { "type": "string" },
          "slug": { "type": "string" },
          "name": { "type": "string" }
        }
      },
      "FrontendCasinoGameSearchXto": {
        "type": "object",
        "properties": {
          "games": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FrontendCasinoGameXto" }
          },
          "totalCount": { "type": "integer", "format": "int64" },
          "aspectRatio": { "type": "string" }
        }
      },
      "FrontendCasinoGameXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "imageUrl": { "type": "string" },
          "realPlayUrl": { "type": "string" },
          "demoPlayUrl": { "type": "string" },
          "hasDemo": { "type": "boolean" }
        }
      },
      "FrontendCasinoSearchResultXto": {
        "type": "object",
        "properties": {
          "games": { "$ref": "#/components/schemas/FrontendCasinoGameSearchXto" },
          "providers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FrontendCasinoGameProviderLogoXto"
            }
          }
        }
      },
      "AppearanceProperties": {
        "type": "object",
        "properties": {
          "margin": { "type": "string" },
          "padding": { "type": "string" },
          "background": { "$ref": "#/components/schemas/Background" },
          "isVisible": { "type": "boolean" },
          "borderRadius": { "type": "string" },
          "minHeight": { "type": "string" },
          "maxHeight": { "type": "string" },
          "textAlign": {
            "type": "string",
            "enum": ["CENTER", "START", "END", "INHERIT", "JUSTIFY"]
          },
          "width": { "type": "string" },
          "height": { "type": "string" }
        }
      },
      "Background": {
        "type": "object",
        "properties": {
          "color": { "type": "string" },
          "opacity": { "type": "number", "format": "double" },
          "image": { "type": "string" },
          "position": { "type": "string" }
        }
      },
      "ContainerAppearanceXto": {
        "type": "object",
        "properties": {
          "resolutionConfig": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AppearanceProperties"
            }
          },
          "colorVariant": { "type": "string", "enum": ["LIGHT", "DARK"] }
        }
      },
      "ContainerConfigurationRequest": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "type": { "type": "string" },
          "paramsPerCountry": {
            "type": "object",
            "additionalProperties": { "type": "string" }
          },
          "children": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ContainerDefinitionXto" }
          },
          "appearance": { "$ref": "#/components/schemas/ContainerAppearanceXto" }
        }
      },
      "ContainerDefinitionXto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "type": { "type": "string" },
          "containerConfigurationId": { "type": "string" }
        }
      },
      "ContainerConfigurationXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "type": { "type": "string" },
          "paramsPerCountry": {
            "type": "object",
            "additionalProperties": { "type": "string" }
          },
          "pages": {
            "uniqueItems": true,
            "type": "array",
            "items": { "type": "string" }
          },
          "children": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ContainerDefinitionXto" }
          },
          "order": { "type": "integer", "format": "int32", "deprecated": true },
          "appearance": { "$ref": "#/components/schemas/ContainerAppearanceXto" },
          "conditionId": { "type": "string" }
        }
      },
      "GameTypeFilterRequestXto": {
        "required": ["providers", "subProviders"],
        "type": "object",
        "properties": {
          "providers": {
            "type": "array",
            "example": ["HUB88", "EVOLUTION"],
            "items": { "type": "string", "example": "[\"HUB88\",\"EVOLUTION\"]" }
          },
          "subProviders": {
            "type": "array",
            "example": ["Tom Horn", "Relax Gaming"],
            "items": { "type": "string", "example": "[\"Tom Horn\",\"Relax Gaming\"]" }
          }
        }
      },
      "CreateGameRequest": {
        "required": ["name", "platformGameId", "restrictCountries"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "84564d9b-1005-4c2e-a1f9-10853aab2951" },
          "platformGameId": {
            "type": "string",
            "example": "84564d9b-1005-4c2e-a1f9-10853aab2951"
          },
          "name": { "type": "string", "example": "Roulette" },
          "restrictCountries": {
            "type": "array",
            "example": ["jp", "rf"],
            "items": { "type": "string", "example": "[\"jp\",\"rf\"]" }
          },
          "primaryLabel": { "type": "string", "example": "label1" },
          "secondaryLabel": { "type": "string", "example": "label2" },
          "enabled": { "type": "boolean", "example": true },
          "categoryImageUrl": {
            "type": "string",
            "example": "path/to/categoryImage",
            "deprecated": true
          },
          "images": { "type": "object", "additionalProperties": { "type": "string" } },
          "seoTitle": {
            "type": "string",
            "example": "Some SEO Title",
            "deprecated": true
          },
          "seoDescription": {
            "type": "string",
            "example": "Some SEO Description",
            "deprecated": true
          }
        }
      },
      "CasinoGameXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "70a54731-dcf1-4230-9178-8b39f87cf3f6" },
          "platformGameId": {
            "type": "string",
            "example": "80a54731-dcf1-4230-9178-8b39f87cf3f6"
          },
          "name": { "type": "string", "example": "roulette" },
          "provider": { "type": "string", "example": "hub88" },
          "subProvider": { "type": "string", "example": "Red tiger" },
          "type": {
            "type": "string",
            "example": "SLOTS",
            "enum": [
              "SLOTS",
              "JACKPOTS",
              "VIDEO_POKER",
              "ROULETTE",
              "TABLE_CARD",
              "BLACKJACK",
              "BACCARAT",
              "MINIGAMES",
              "OTHERS",
              "DEFAULT",
              "OTHERS_LIVE",
              "LIVE_BACCARAT",
              "LIVE_BLACKJACK",
              "GAME_SHOW",
              "LIVE_ROULETTE",
              "DICE",
              "DRAGON_TIGER",
              "CRASH",
              "SCRATCH",
              "ARCADE",
              "LOTTERY",
              "BINGO",
              "VIRTUAL",
              "PLAYER_PROPS",
              "OTHERS_TABLE",
              "LIVE_DICE",
              "LIVE_DRAGON_TIGER",
              "LIVE_POKER"
            ]
          },
          "game": { "type": "string", "example": "magic game" },
          "supportedLanguages": {
            "type": "array",
            "example": ["en", "de", "it"],
            "items": { "type": "string", "example": "[\"en\",\"de\",\"it\"]" }
          },
          "providerBlockedCountries": {
            "type": "array",
            "example": ["bg", "gr"],
            "items": { "type": "string", "example": "[\"bg\",\"gr\"]" }
          },
          "themes": { "type": "array", "items": { "type": "string" } },
          "features": { "type": "array", "items": { "type": "string" } },
          "categoryImageUrl": {
            "type": "string",
            "example": "image1",
            "deprecated": true
          },
          "restrictCountries": {
            "type": "array",
            "example": ["jp", "rf"],
            "items": { "type": "string", "example": "[\"jp\",\"rf\"]" }
          },
          "primaryLabel": { "type": "string", "example": "label1" },
          "secondaryLabel": { "type": "string", "example": "label2" },
          "enabled": { "type": "boolean", "example": true },
          "platformEnabled": { "type": "boolean", "example": true },
          "hasDemo": { "type": "boolean", "example": true },
          "rtp": { "type": "string", "example": "94.56" },
          "images": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": "{\"tileId-uuid\":\"tile-image/permalink"
            },
            "example": "{\"tileId-uuid\":\"tile-image/permalink"
          },
          "seoTitle": {
            "type": "string",
            "example": "Some SEO Title",
            "deprecated": true
          },
          "seoDescription": {
            "type": "string",
            "example": "Some SEO Description",
            "deprecated": true
          },
          "seo": { "$ref": "#/components/schemas/SeoPropertiesXto" }
        }
      },
      "CasinoGameTileRequest": {
        "required": ["height", "name", "width"],
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "width": { "type": "integer", "format": "int32" },
          "height": { "type": "integer", "format": "int32" }
        }
      },
      "CasinoGameTileXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "width": { "type": "integer", "format": "int32" },
          "height": { "type": "integer", "format": "int32" },
          "defaultTile": { "type": "boolean" },
          "metadataTile": { "type": "boolean" }
        }
      },
      "ImportGamesRequestXto": {
        "required": ["provider", "subProviders"],
        "type": "object",
        "properties": {
          "provider": { "type": "string", "example": "HUB88" },
          "subProviders": {
            "type": "array",
            "example": ["Tom Horn", "Relax Gaming"],
            "items": { "type": "string", "example": "[\"Tom Horn\",\"Relax Gaming\"]" }
          },
          "types": {
            "type": "array",
            "example": ["SLOTS", "TABLE_CARD"],
            "items": {
              "type": "string",
              "example": "[\"SLOTS\",\"TABLE_CARD\"]",
              "enum": [
                "SLOTS",
                "JACKPOTS",
                "VIDEO_POKER",
                "ROULETTE",
                "TABLE_CARD",
                "BLACKJACK",
                "BACCARAT",
                "MINIGAMES",
                "OTHERS",
                "DEFAULT",
                "OTHERS_LIVE",
                "LIVE_BACCARAT",
                "LIVE_BLACKJACK",
                "GAME_SHOW",
                "LIVE_ROULETTE",
                "DICE",
                "DRAGON_TIGER",
                "CRASH",
                "SCRATCH",
                "ARCADE",
                "LOTTERY",
                "BINGO",
                "VIRTUAL",
                "PLAYER_PROPS",
                "OTHERS_TABLE",
                "LIVE_DICE",
                "LIVE_DRAGON_TIGER",
                "LIVE_POKER"
              ]
            }
          }
        }
      },
      "MetadataGameXto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "type": {
            "type": "string",
            "enum": [
              "SLOTS",
              "JACKPOTS",
              "VIDEO_POKER",
              "ROULETTE",
              "TABLE_CARD",
              "BLACKJACK",
              "BACCARAT",
              "MINIGAMES",
              "OTHERS",
              "DEFAULT",
              "OTHERS_LIVE",
              "LIVE_BACCARAT",
              "LIVE_BLACKJACK",
              "GAME_SHOW",
              "LIVE_ROULETTE",
              "DICE",
              "DRAGON_TIGER",
              "CRASH",
              "SCRATCH",
              "ARCADE",
              "LOTTERY",
              "BINGO",
              "VIRTUAL",
              "PLAYER_PROPS",
              "OTHERS_TABLE",
              "LIVE_DICE",
              "LIVE_DRAGON_TIGER",
              "LIVE_POKER"
            ]
          },
          "provider": { "type": "string" },
          "subProvider": { "type": "string" }
        }
      },
      "PageableXtoType": {
        "type": "object",
        "properties": {
          "hasMore": {
            "type": "boolean",
            "description": "if this is the last page of items",
            "example": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of available items",
            "format": "int64",
            "example": 200
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of available pages",
            "format": "int32",
            "example": 3
          },
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MetadataGameXto" }
          }
        }
      },
      "FilterGamesRequestXto": {
        "type": "object",
        "properties": {
          "provider": { "type": "string", "example": "HUB88" },
          "subProvider": { "type": "string", "example": "OneTouch" },
          "types": {
            "type": "array",
            "example": ["SLOTS", "TABLE_CARD"],
            "items": {
              "type": "string",
              "example": "[\"SLOTS\",\"TABLE_CARD\"]",
              "enum": [
                "SLOTS",
                "JACKPOTS",
                "VIDEO_POKER",
                "ROULETTE",
                "TABLE_CARD",
                "BLACKJACK",
                "BACCARAT",
                "MINIGAMES",
                "OTHERS",
                "DEFAULT",
                "OTHERS_LIVE",
                "LIVE_BACCARAT",
                "LIVE_BLACKJACK",
                "GAME_SHOW",
                "LIVE_ROULETTE",
                "DICE",
                "DRAGON_TIGER",
                "CRASH",
                "SCRATCH",
                "ARCADE",
                "LOTTERY",
                "BINGO",
                "VIRTUAL",
                "PLAYER_PROPS",
                "OTHERS_TABLE",
                "LIVE_DICE",
                "LIVE_DRAGON_TIGER",
                "LIVE_POKER"
              ]
            }
          },
          "gameName": { "type": "string", "example": "gameName" },
          "notConfigured": { "type": "boolean", "example": true }
        }
      },
      "GameTilesFilter": {
        "type": "object",
        "properties": {
          "excluding": { "type": "boolean", "example": true },
          "gameTileIds": {
            "type": "array",
            "example": [
              "c230eb6b-c837-4b1f-bf1c-4bc4f0214388",
              "e71e7171-5c18-4ea3-a960-897c9323e4ae"
            ],
            "items": {
              "type": "string",
              "example": "[\"c230eb6b-c837-4b1f-bf1c-4bc4f0214388\",\"e71e7171-5c18-4ea3-a960-897c9323e4ae\"]"
            }
          }
        }
      },
      "MultiFilterGamesRequest": {
        "type": "object",
        "properties": {
          "providers": {
            "uniqueItems": true,
            "type": "array",
            "example": ["HUB88", "EVOLUTION"],
            "items": { "type": "string", "example": "[\"HUB88\",\"EVOLUTION\"]" }
          },
          "subProviders": {
            "uniqueItems": true,
            "type": "array",
            "example": ["OneTouch", "REDTIGER"],
            "items": { "type": "string", "example": "[\"OneTouch\",\"REDTIGER\"]" }
          },
          "gameTypes": {
            "uniqueItems": true,
            "type": "array",
            "example": ["SLOTS", "LIVE_BLACKJACK"],
            "items": {
              "type": "string",
              "example": "[\"SLOTS\",\"LIVE_BLACKJACK\"]",
              "enum": [
                "SLOTS",
                "JACKPOTS",
                "VIDEO_POKER",
                "ROULETTE",
                "TABLE_CARD",
                "BLACKJACK",
                "BACCARAT",
                "MINIGAMES",
                "OTHERS",
                "DEFAULT",
                "OTHERS_LIVE",
                "LIVE_BACCARAT",
                "LIVE_BLACKJACK",
                "GAME_SHOW",
                "LIVE_ROULETTE",
                "DICE",
                "DRAGON_TIGER",
                "CRASH",
                "SCRATCH",
                "ARCADE",
                "LOTTERY",
                "BINGO",
                "VIRTUAL",
                "PLAYER_PROPS",
                "OTHERS_TABLE",
                "LIVE_DICE",
                "LIVE_DRAGON_TIGER",
                "LIVE_POKER"
              ]
            }
          },
          "gameNames": {
            "uniqueItems": true,
            "type": "array",
            "example": ["5 Families", "Fruits Go Pop"],
            "items": {
              "type": "string",
              "example": "[\"5 Families\",\"Fruits Go Pop\"]"
            }
          },
          "gameTilesFilter": { "$ref": "#/components/schemas/GameTilesFilter" },
          "enabled": { "type": "boolean", "example": true }
        }
      },
      "PageableResponseOfConfiguredGameXto": {
        "type": "object",
        "properties": {
          "hasMore": {
            "type": "boolean",
            "description": "if this is the last page of items",
            "example": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of available items",
            "format": "int64",
            "example": 200
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of available pages",
            "format": "int32",
            "example": 3
          },
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CasinoGameXto" }
          }
        }
      },
      "BulkGamesUpdateRequest": {
        "type": "object",
        "properties": {
          "gameIds": { "type": "array", "items": { "type": "string" } },
          "enabled": { "type": "boolean" }
        }
      },
      "GameCategoryRequestXto": {
        "required": ["gameTileId", "name"],
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Game category" },
          "games": {
            "type": "array",
            "example": ["game_1", "game_2"],
            "items": { "type": "string", "example": "[\"game_1\",\"game_2\"]" }
          },
          "gamesOrderByCountry": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "example": { "US": ["game_2", "game_1"] },
              "items": {
                "type": "string",
                "example": "{\"US\":[\"game_2\",\"game_1\"]}"
              }
            },
            "example": { "US": ["game_2", "game_1"] }
          },
          "gameTileId": {
            "type": "string",
            "description": "Category game tile Id.",
            "example": "UUID:36f8cd0a-5cda-46ab-8c32-2d108dcb27b0"
          }
        }
      },
      "GameCategoryXto": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "84564d9b-1005-4c2e-a1f9-10853aab2951" },
          "name": { "type": "string", "example": "Game category" },
          "games": {
            "type": "array",
            "example": ["game_1", "game_2"],
            "items": { "type": "string", "example": "[\"game_1\",\"game_2\"]" }
          },
          "gamesOrderByCountry": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "example": { "US": ["game_2", "game_1"] },
              "items": {
                "type": "string",
                "example": "{\"US\":[\"game_2\",\"game_1\"]}"
              }
            },
            "example": { "US": ["game_2", "game_1"] }
          },
          "gamesTileId": {
            "type": "string",
            "description": "Category game tile Id",
            "example": "UUID:36f8cd0a-5cda-46ab-8c32-2d108dcb27b0",
            "deprecated": true
          },
          "gameTileId": {
            "type": "string",
            "description": "Category game tile Id",
            "example": "UUID:36f8cd0a-5cda-46ab-8c32-2d108dcb27b0"
          },
          "seo": { "$ref": "#/components/schemas/SeoPropertiesXto" }
        }
      },
      "ThemeRequestXto": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Theme name.",
            "example": "my-theme"
          },
          "selected": {
            "type": "boolean",
            "description": "Theme is selected to be used.",
            "example": true
          },
          "published": {
            "type": "boolean",
            "description": "Theme is published to be possible to use.",
            "example": true
          }
        }
      },
      "ThemeXto": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Theme name.",
            "example": "my-theme"
          },
          "selected": {
            "type": "boolean",
            "description": "Theme is selected to be used.",
            "example": true
          },
          "published": {
            "type": "boolean",
            "description": "Theme is published to be possible to use.",
            "example": true
          },
          "id": { "type": "string" }
        }
      },
      "VariableSearchXto": {
        "required": ["themeId"],
        "type": "object",
        "properties": {
          "themeId": { "type": "string" },
          "onlyBasic": { "type": "boolean" },
          "searchValue": { "maxLength": 2147483647, "minLength": 3, "type": "string" }
        }
      },
      "VariableXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "type": { "type": "string", "enum": ["COLOR", "TEXT", "NUMBER"] },
          "groupId": { "type": "string" },
          "groupName": { "type": "string" },
          "propertyName": { "type": "string" },
          "basic": { "type": "boolean" },
          "required": { "type": "boolean" },
          "description": { "type": "string" },
          "referenceId": { "type": "string" },
          "value": { "type": "string" }
        }
      },
      "BrandScriptRequestXto": {
        "required": ["name", "value", "zone"],
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "value": { "type": "string" },
          "zone": { "type": "string", "enum": ["HEAD", "BODY"] }
        }
      },
      "BrandScriptXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "value": { "type": "string" },
          "zone": { "type": "string", "enum": ["HEAD", "BODY"] }
        }
      },
      "BonusUpdateRequest": {
        "type": "object",
        "properties": {
          "bonusId": { "type": "string" },
          "externalName": { "type": "string" }
        }
      },
      "AmountOverwrite": {
        "type": "object",
        "properties": {
          "value": { "type": "number" },
          "currencyCode": { "type": "string" }
        }
      },
      "BonusXto": {
        "type": "object",
        "properties": {
          "bonusId": { "type": "string" },
          "name": { "type": "string" },
          "enabled": { "type": "boolean" },
          "creationTime": { "type": "string", "format": "date-time" },
          "validFrom": { "type": "string", "format": "date-time" },
          "validTo": { "type": "string", "format": "date-time" },
          "bonusType": {
            "type": "string",
            "enum": [
              "WAGERING",
              "CASINO_CASHBACK",
              "SPORTSBOOK_CASHBACK",
              "FREE_SPINS",
              "CHAINED_BONUS",
              "SPORT_FREEBET"
            ]
          },
          "trigger": {
            "type": "string",
            "enum": ["DEPOSIT", "SIGNUP", "LOGIN", "OPTIN", "LOYALTYLEVEL"]
          },
          "claimType": { "type": "string", "enum": ["OPT_IN", "AUTOMATIC", "MANUAL"] },
          "externalName": { "type": "string" },
          "eligibilityCriteria": { "$ref": "#/components/schemas/EligibilityCriteria" },
          "maxBonusAmountOverwrites": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AmountOverwrite" }
          },
          "minDepositAmountOverwrites": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AmountOverwrite" }
          },
          "maxBonusAmount": { "type": "number" },
          "minDepositAmount": { "type": "number" },
          "depositPercentage": { "type": "integer", "format": "int32" }
        }
      },
      "EligibilityCriteria": {
        "type": "object",
        "properties": {
          "segments": { "type": "array", "items": { "type": "string" } },
          "affiliateIds": { "type": "array", "items": { "type": "string" } },
          "countries": { "type": "array", "items": { "type": "string" } },
          "loyaltyLevels": { "type": "array", "items": { "type": "string" } },
          "bonusCodes": { "type": "array", "items": { "type": "string" } }
        }
      },
      "ContainerXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "type": { "type": "string" },
          "paramsPerCountry": {
            "type": "object",
            "additionalProperties": { "type": "string" }
          },
          "containerConfigurationId": { "type": "string" },
          "children": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ContainerXto" }
          },
          "appearance": { "$ref": "#/components/schemas/ContainerAppearanceXto" },
          "conditionId": { "type": "string" }
        }
      },
      "PatchPageRequest": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "parentId": { "type": "string" },
          "slug": { "type": "string" },
          "canonicalUrl": { "type": "string" },
          "redirectUrl": { "type": "string" },
          "pageHeading": { "type": "string" },
          "seoMetaTitle": { "maxLength": 100, "minLength": 0, "type": "string" },
          "seoMetaDescription": { "maxLength": 255, "minLength": 0, "type": "string" },
          "seoDisplayTitle": { "maxLength": 255, "minLength": 0, "type": "string" },
          "seoDisplayDescription": {
            "maxLength": 12000,
            "minLength": 0,
            "type": "string"
          },
          "published": { "type": "boolean" },
          "assigned": { "type": "boolean" },
          "indexed": { "type": "boolean" },
          "inSitemap": { "type": "boolean" },
          "layout": { "$ref": "#/components/schemas/PatchPageRequestLayout" },
          "seoChangeFrequency": {
            "type": "string",
            "enum": [
              "ALWAYS",
              "HOURLY",
              "DAILY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "NEVER"
            ]
          },
          "seoPriority": { "type": "number", "format": "double" }
        }
      },
      "PatchPageRequestLayout": {
        "type": "object",
        "properties": {
          "type": { "type": "string" },
          "areas": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/ContainerXto" }
            }
          }
        }
      },
      "LayoutXto": {
        "type": "object",
        "properties": {
          "type": { "type": "string" },
          "areas": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/ContainerXto" }
            }
          }
        }
      },
      "PageDetailsXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "parentId": { "type": "string" },
          "published": { "type": "boolean" },
          "assigned": { "type": "boolean" },
          "children": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PageXto" }
          },
          "slug": { "type": "string" },
          "pageHeading": { "type": "string" },
          "dynamic": { "type": "boolean" },
          "dataSource": { "type": "string" },
          "type": {
            "type": "string",
            "enum": [
              "HOME",
              "RESET_PASSWORD",
              "CASINO_GAMEPLAY_REAL",
              "CASINO_GAMEPLAY_DEMO",
              "TERMS_AND_CONDITIONS",
              "PLAYER_PROFILE",
              "CASINO_CATEGORY",
              "LOYALTY",
              "CASINO_GAME_PROVIDER",
              "PROMOTIONS"
            ]
          },
          "restricted": { "type": "boolean" },
          "createTimestamp": { "type": "string", "format": "date-time" },
          "canonicalUrl": { "type": "string" },
          "redirectUrl": { "type": "string" },
          "seoMetaTitle": { "type": "string" },
          "seoMetaDescription": { "type": "string" },
          "seoDisplayTitle": { "type": "string" },
          "seoDisplayDescription": { "type": "string" },
          "indexed": { "type": "boolean" },
          "inSitemap": { "type": "boolean" },
          "layout": { "$ref": "#/components/schemas/LayoutXto" },
          "seoChangeFrequency": {
            "type": "string",
            "enum": [
              "ALWAYS",
              "HOURLY",
              "DAILY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "NEVER"
            ]
          },
          "seoPriority": { "type": "number", "format": "double" }
        }
      },
      "EditAltTextRequest": {
        "type": "object",
        "properties": { "altText": { "type": "string" } }
      },
      "UpdateLocalizationRequest": {
        "required": ["id", "value"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "5144e999-b486-4gfe-887d-7a680aa3d6eb" },
          "value": { "type": "string", "example": "rótulo primário" }
        }
      },
      "ModifyProviderRequest": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "displayName": { "type": "string" },
          "image": { "type": "string" },
          "seo": { "$ref": "#/components/schemas/SeoPropertiesXto" },
          "gameTileId": { "type": "string" }
        }
      },
      "ChangeGameRequest": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "84564d9b-1005-4c2e-a1f9-10853aab2951" },
          "name": { "type": "string", "example": "Roulette" },
          "restrictCountries": {
            "type": "array",
            "example": ["jp", "rf"],
            "items": { "type": "string", "example": "[\"jp\",\"rf\"]" }
          },
          "primaryLabel": { "type": "string", "example": "label1" },
          "secondaryLabel": { "type": "string", "example": "label2" },
          "enabled": { "type": "boolean", "example": true },
          "categoryImageUrl": {
            "type": "string",
            "description": "This categoryImageUrl is set from image or from default. On next step will set images property and use image from there",
            "example": "path/to/categoryImage",
            "deprecated": true
          },
          "images": { "type": "object", "additionalProperties": { "type": "string" } },
          "seoTitle": { "type": "string", "example": "Some SEO Title" },
          "seoDescription": { "type": "string", "example": "Some SEO Description" }
        }
      },
      "PatchVariableRequest": {
        "type": "object",
        "properties": { "value": { "type": "string" }, "referenceId": { "type": "string" } }
      },
      "BrandDomainRequestXto": {
        "required": ["domain", "noIndex"],
        "type": "object",
        "properties": {
          "domain": { "type": "string" },
          "noIndex": { "type": "boolean" },
          "defaultBrandLanguageRedirectsToRoot": { "type": "boolean" },
          "hrefLangPointsToRoot": { "type": "boolean" },
          "disableLanguageRedirect": { "type": "boolean" },
          "localeCountries": { "type": "array", "items": { "type": "string" } }
        }
      },
      "BrandDomainXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "domain": { "type": "string" },
          "noIndex": { "type": "boolean" },
          "defaultBrandLanguageRedirectsToRoot": { "type": "boolean" },
          "hrefLangPointsToRoot": { "type": "boolean" },
          "disableLanguageRedirect": { "type": "boolean" },
          "localeCountries": {
            "uniqueItems": true,
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "RevisionHistoryXto": {
        "type": "object",
        "properties": {
          "keyId": {
            "type": "string",
            "example": "05e99e8d-6ee1-4d4e-93f4-56aed47cf37f"
          },
          "dataByLanguage": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/TranslationRevisionHistory"
            }
          }
        }
      },
      "TranslationRevisionHistory": {
        "type": "object",
        "properties": {
          "translationId": {
            "type": "string",
            "example": "05e99e8d-6ee1-4d4e-93f4-56aed47cf37e"
          },
          "changedBy": { "type": "string", "example": "admin@supremo.com" },
          "time": { "type": "string", "format": "date-time" }
        }
      },
      "RevisionFileXto": {
        "type": "object",
        "properties": {
          "fileEntityId": { "type": "string" },
          "fileName": { "type": "string" },
          "uploadedBy": { "type": "string" },
          "time": { "type": "string", "format": "date-time" }
        }
      },
      "KeyNode": {
        "required": ["key"],
        "type": "object",
        "properties": {
          "key": { "type": "string", "example": "KYC" },
          "displayName": { "type": "string", "example": "Know your customer" },
          "comment": { "type": "string", "example": "some random text" },
          "children": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/KeyNode" }
          }
        }
      },
      "SweepstakesPackageXto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the package.",
            "example": "c029d189-6699-4895-a742-a8ffa150dd4c"
          },
          "name": {
            "type": "string",
            "description": "Name of the package.",
            "example": "Premium"
          },
          "status": {
            "type": "string",
            "description": "Package status.",
            "example": "ENABLED",
            "enum": ["ENABLED", "DISABLED"]
          },
          "socialAmount": { "type": "number", "description": "Social amount." },
          "socialCurrency": {
            "type": "string",
            "description": "Social currency.",
            "example": "EUR"
          },
          "redeemableAmount": { "type": "number", "description": "Redeemable amount." },
          "redeemableCurrency": {
            "type": "string",
            "description": "Redeemable currency.",
            "example": "EUR"
          },
          "price": { "type": "number", "description": "Price.", "example": 100.0 },
          "discountPrice": {
            "type": "number",
            "description": "Discount price.",
            "example": 90.0
          },
          "discountPercentage": {
            "type": "number",
            "description": "Discount percentage.",
            "example": 10.0
          },
          "bonusId": {
            "type": "string",
            "description": "Id of the bonus that will be used by this package, if not specified in the global config.",
            "example": "bonusId"
          },
          "createTimestamp": {
            "type": "string",
            "description": "Creation timestamp - when the package was created in our system.",
            "format": "date-time",
            "example": "2021-03-10T12:15:11.540838+02:00"
          }
        }
      },
      "SweepstakesConfigXto": {
        "type": "object",
        "properties": {
          "socialCurrency": {
            "type": "string",
            "description": "Social currency.",
            "example": "EUR"
          },
          "redeemableCurrency": {
            "type": "string",
            "description": "Redeemable currency.",
            "example": "EUR"
          },
          "socialAmountTopUpLimit": {
            "type": "number",
            "description": "Social amount top limit. Threshold of the social currency, which if you drop under, you can always claim more.",
            "example": 50.0
          },
          "bonusId": {
            "type": "string",
            "description": "Id of the bonus definition that will be used by default for all Sweepstakes packages, if not specified in the package.",
            "example": "bonusId"
          },
          "socialBonusId": {
            "type": "string",
            "description": "Id of the bonus definition that will be used for the social currency.",
            "example": "socialBonusId"
          },
          "redeemableBonusId": {
            "type": "string",
            "description": "Id of the bonus definition that will be used for the redeemable currency.",
            "example": "redeemableBonusId"
          },
          "defaultPurchaseCurrency": {
            "type": "string",
            "description": "Currency for package purchase",
            "example": "USD"
          }
        }
      },
      "CountryDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "iso2": { "type": "string" },
          "iso3": { "type": "string" },
          "phoneCodes": { "type": "string" },
          "currency": { "type": "string" },
          "defaultLanguage": { "type": "string" },
          "states": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/StateDto" }
          }
        }
      },
      "CurrencyDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "code": { "type": "string" },
          "symbol": { "type": "string" },
          "precision": { "type": "integer", "format": "int32" },
          "fiat": { "type": "boolean" },
          "denominated": { "type": "boolean" },
          "supportsTag": { "type": "boolean" },
          "denominatedCurrencyCode": { "type": "string" },
          "denominatedCurrencyMultiplier": { "type": "integer", "format": "int32" },
          "multiNetworks": { "type": "boolean" }
        }
      },
      "LanguageDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "code": { "type": "string" },
          "rtl": { "type": "boolean" }
        }
      },
      "StateDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "code": { "type": "string" },
          "country": { "type": "string" }
        }
      },
      "StaticDataXto": {
        "type": "object",
        "properties": {
          "countries": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CountryDto" }
          },
          "languages": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LanguageDto" }
          },
          "currencies": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CurrencyDto" }
          },
          "languageCountries": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": { "type": "string" }
            }
          }
        }
      },
      "BannerListItemXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "type": { "type": "string", "enum": ["SUPER_BANNER", "PNP_BANNER"] },
          "published": { "type": "boolean" },
          "linkedToPromotion": { "type": "boolean" }
        }
      },
      "BonusEligibilityCriteriaXto": {
        "type": "object",
        "properties": {
          "segments": { "type": "array", "items": { "type": "string" } },
          "affiliateIds": { "type": "array", "items": { "type": "string" } },
          "countries": { "type": "array", "items": { "type": "string" } },
          "loyaltyLevels": { "type": "array", "items": { "type": "string" } }
        }
      },
      "PromotionBonusXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "claimType": { "type": "string", "enum": ["OPT_IN", "AUTOMATIC", "MANUAL"] },
          "validFrom": { "type": "string", "format": "date-time" },
          "validTo": { "type": "string", "format": "date-time" },
          "eligibilityCriteria": {
            "$ref": "#/components/schemas/BonusEligibilityCriteriaXto"
          }
        }
      },
      "LayoutPreviewXto": {
        "type": "object",
        "properties": {
          "children": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/ContainerXto" }
            }
          }
        }
      },
      "PageDataSourceXto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "keyPlaceholders": {
            "type": "array",
            "items": {
              "uniqueItems": true,
              "type": "array",
              "items": { "type": "string" }
            }
          },
          "otherPlaceholders": { "type": "array", "items": { "type": "string" } }
        }
      },
      "ConditionsData": {
        "type": "object",
        "properties": {
          "affiliates": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/IdName" }
          },
          "segments": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/IdName" }
          },
          "accountStateRequirements": {
            "type": "array",
            "items": { "type": "string", "enum": ["ANONYMOUS", "ACCOUNT", "ANY"] }
          },
          "domains": { "type": "array", "items": { "type": "string" } }
        }
      },
      "IdName": {
        "type": "object",
        "properties": { "id": { "type": "string" }, "name": { "type": "string" } }
      },
      "MetadataGameTileXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "width": { "type": "integer", "format": "int32" },
          "height": { "type": "integer", "format": "int32" },
          "defaultTile": { "type": "boolean" }
        }
      },
      "MediaDirectoryXto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "parentId": { "type": "string" },
          "id": { "type": "string" },
          "hasChildren": { "type": "boolean" },
          "system": { "type": "boolean" }
        }
      },
      "MediaDirectoryDetailsXto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "parentId": { "type": "string" },
          "id": { "type": "string" },
          "children": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MediaDirectoryXto" }
          },
          "files": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MediaFileXto" }
          },
          "parentsChain": { "type": "array", "items": { "type": "string" } },
          "system": { "type": "boolean" }
        }
      },
      "LoyaltyProgramXto": {
        "type": "object",
        "properties": {
          "cmsLoyaltyLevels": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LoyaltyLevelXto" }
          },
          "platformLoyaltyLevels": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PlatformLoyaltyLevelXto" }
          }
        }
      },
      "PlatformLoyaltyLevelXto": {
        "required": ["endPoints", "startPoints"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "b7de3d5b-eef5-4769-ac45-0e8b79442056" },
          "startPoints": { "type": "integer", "format": "int32", "example": 1000 },
          "endPoints": { "type": "integer", "format": "int32", "example": 2000 }
        }
      },
      "FieldGroupXto": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "example": "39b1a94a-1cb5-48f9-b41a-c8a0b5edd168"
          },
          "field": { "type": "string", "example": "primaryLabel" },
          "languageGroups": {
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/LanguageGroupXto" }
          }
        }
      },
      "LanguageGroupXto": {
        "type": "object",
        "properties": {
          "language": { "type": "string", "example": "br" },
          "countryGroups": {
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/LocalizationXto" },
            "example": {
              "br": {
                "id": "b495def5-9ffd-4cce-af2c-64d39a03f885",
                "referenceId": "00480f94-f2ba-4b2c-be76-b42cf9934db5",
                "field": "primaryLabel",
                "languageCode": "pt",
                "countryCode": "br",
                "type": "STRING",
                "value": "QUENTE"
              },
              "pt": {
                "id": "8d0509ae-b1e2-44bd-9fb0-0fa6ace318ee",
                "referenceId": "00480f94-f2ba-4b2c-be76-b42cf9934db5",
                "field": "primaryLabel",
                "languageCode": "pt",
                "countryCode": "pt",
                "type": "STRING",
                "value": "QUENTE"
              }
            }
          }
        }
      },
      "LocalizationsGroupedXto": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "example": "39b1a94a-1cb5-48f9-b41a-c8a0b5edd168"
          },
          "fieldGroups": {
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/FieldGroupXto" }
          }
        }
      },
      "SitemapPageXto": {
        "type": "object",
        "properties": {
          "slug": { "type": "string" },
          "changeFrequency": {
            "type": "string",
            "enum": [
              "ALWAYS",
              "HOURLY",
              "DAILY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "NEVER"
            ]
          },
          "priority": { "type": "number", "format": "double" }
        }
      },
      "RobotsXto": {
        "type": "object",
        "properties": {
          "rules": {
            "type": "object",
            "additionalProperties": { "type": "array", "items": { "type": "string" } }
          },
          "sitemaps": { "type": "array", "items": { "type": "string" } }
        }
      },
      "WebsiteLanguageXto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "code": { "type": "string" },
          "rtl": { "type": "boolean" }
        }
      },
      "IconWebsiteXto": {
        "type": "object",
        "properties": { "code": { "type": "string" }, "url": { "type": "string" } }
      },
      "InternalBrandDomainXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "domain": { "type": "string" },
          "noIndex": { "type": "boolean" },
          "defaultBrandLanguageRedirectsToRoot": { "type": "boolean" },
          "hrefLangPointsToRoot": { "type": "boolean" },
          "disableLanguageRedirect": { "type": "boolean" },
          "locales": {
            "uniqueItems": true,
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "BrandConfigurationXto": {
        "type": "object",
        "properties": {
          "externalConfigurations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ExternalConfiguration"
            }
          },
          "properties": { "$ref": "#/components/schemas/BrandPropertiesXto" },
          "scripts": { "$ref": "#/components/schemas/BrandScriptsXto" },
          "themes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/BrandThemeXto" }
          }
        }
      },
      "BrandPropertiesXto": {
        "type": "object",
        "properties": {
          "affiliateCookieDurationDays": { "type": "integer", "format": "int32" },
          "manifest": { "$ref": "#/components/schemas/ManifestXto" },
          "walletNew": { "type": "boolean" }
        }
      },
      "BrandScriptsXto": {
        "type": "object",
        "properties": {
          "body": { "type": "array", "items": { "type": "string" } },
          "head": { "type": "array", "items": { "type": "string" } }
        }
      },
      "BrandThemeLogoUrlsXto": {
        "type": "object",
        "properties": {
          "favico": { "type": "string" },
          "compact": { "type": "string" },
          "initial": { "type": "string" },
          "default": { "type": "string" }
        }
      },
      "BrandThemeTypographyFontFaceXto": {
        "type": "object",
        "properties": {
          "style": { "type": "string" },
          "truetype": { "type": "string" },
          "variant": { "type": "string" },
          "weight": { "type": "integer", "format": "int32" },
          "woff": { "type": "string" },
          "woff2": { "type": "string" }
        }
      },
      "BrandThemeTypographyFontFamilyXto": {
        "type": "object",
        "properties": {
          "cssRuleValue": { "type": "string" },
          "font": { "type": "string" },
          "fontFaces": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/BrandThemeTypographyFontFaceXto" }
          },
          "id": { "type": "string" }
        }
      },
      "BrandThemeTypographyXto": {
        "type": "object",
        "properties": {
          "fontFamilies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrandThemeTypographyFontFamilyXto"
            }
          }
        }
      },
      "BrandThemeVariableXto": {
        "type": "object",
        "properties": { "ref": { "type": "object" }, "value": { "type": "object" } }
      },
      "BrandThemeXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "logoUrls": { "$ref": "#/components/schemas/BrandThemeLogoUrlsXto" },
          "preselected": { "type": "boolean" },
          "typography": { "$ref": "#/components/schemas/BrandThemeTypographyXto" },
          "variables": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/BrandThemeVariableXto"
              }
            }
          }
        }
      },
      "ExternalConfiguration": { "type": "object" },
      "ManifestXto": {
        "type": "object",
        "properties": {
          "siteName": { "type": "string" },
          "siteShortName": { "type": "string" }
        }
      },
      "Country": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "phoneCodes": { "type": "array", "items": { "type": "string" } },
          "currency": { "type": "string" }
        }
      },
      "FieldDef": {
        "type": "object",
        "properties": {
          "visible": { "type": "boolean" },
          "required": { "type": "boolean" },
          "regex": { "type": "string" },
          "minLength": { "type": "integer", "format": "int32" },
          "maxLength": { "type": "integer", "format": "int32" },
          "requiredMessageKey": { "type": "string" },
          "formatMessageKey": { "type": "string" },
          "minLengthMessageKey": { "type": "string" },
          "maxLengthMessageKey": { "type": "string" }
        }
      },
      "InitRegisterResponseXto": {
        "type": "object",
        "properties": {
          "countries": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Country" }
          },
          "languages": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Language" }
          },
          "fields": {
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/FieldDef" }
          },
          "timezones": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Timezone" }
          },
          "bonusOffers": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PromotionOffer" }
          },
          "userCountryId": { "type": "string" },
          "possibleCurrencies": { "type": "array", "items": { "type": "string" } }
        }
      },
      "Language": {
        "required": ["displayName", "languageCode"],
        "type": "object",
        "properties": {
          "languageCode": { "type": "string" },
          "displayName": { "type": "string" },
          "rtl": { "type": "boolean" }
        }
      },
      "PromotionOffer": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "promotionType": { "type": "string" },
          "bonusCode": { "type": "string" }
        }
      },
      "Timezone": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "name": { "type": "string" }
        }
      },
      "BrandDto": {
        "type": "object",
        "properties": {
          "internalId": { "type": "string" },
          "name": { "type": "string" },
          "brandId": { "type": "string" },
          "brandType": { "type": "string", "enum": ["STANDARD", "SWEEPSTAKES"] },
          "company": { "$ref": "#/components/schemas/CompanyDto" },
          "operationCountries": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CountryDto" }
          },
          "operationCurrencies": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CurrencyDto" }
          },
          "depositCurrencies": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CurrencyDto" }
          },
          "withdrawalCurrencies": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CurrencyDto" }
          },
          "displayCurrencies": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CurrencyDto" }
          },
          "gameLaunchCurrencies": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CurrencyDto" }
          },
          "operationLanguages": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LanguageDto" }
          },
          "defaultCurrencyCode": { "type": "string" },
          "defaultUserCurrencyCode": { "type": "string" },
          "defaultLanguageCode": { "type": "string" },
          "roundingMode": {
            "type": "string",
            "enum": [
              "UP",
              "DOWN",
              "CEILING",
              "FLOOR",
              "HALF_UP",
              "HALF_DOWN",
              "HALF_EVEN"
            ]
          },
          "multiCurrency": { "type": "boolean" },
          "domains": { "type": "array", "items": { "type": "string" } },
          "mfaEnabled": { "type": "boolean" },
          "mfaLoginMandatory": { "type": "boolean" },
          "mfaWithdrawalMandatory": { "type": "boolean" },
          "loyaltyEnabled": { "type": "boolean" },
          "sportsbookEnabled": { "type": "boolean" },
          "balanceAdjustmentPromptLimit": { "type": "number" },
          "balanceAdjustmentLimit": { "type": "number" },
          "cancelBonusesOnWithdrawal": { "type": "boolean" },
          "bonusThresholdRedeem": { "type": "boolean" },
          "bonusThresholdAmount": { "type": "number" },
          "bonusThresholdCurrency": { "type": "string" },
          "enabled": { "type": "boolean" },
          "paymentRoutingContactEmail": { "type": "string" },
          "paymentProviderRoutings": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PaymentProviderRoutingDto" }
          },
          "paymentRamperProviders": {
            "type": "array",
            "items": { "type": "string", "enum": ["CHANGELLY", "ONRAMPER"] }
          },
          "paymentLimits": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PaymentLimitDto" }
          },
          "paymentRoutingEnabled": { "type": "boolean" },
          "migrated": { "type": "boolean" },
          "cashierEnabled": {
            "type": "string",
            "enum": ["ALL", "NONE", "EXTERNAL_USERS", "NON_EXTERNAL_USERS"]
          },
          "minAge": { "type": "integer", "format": "int32" },
          "reminder2FA": { "type": "boolean" },
          "reminder2FAPromptInterval": { "type": "integer", "format": "int32" },
          "kycIdvInterventions": {
            "type": "array",
            "items": { "type": "string", "enum": ["DEPOSIT", "WITHDRAWAL", "ALL"] }
          },
          "kycPoaInterventions": {
            "type": "array",
            "items": { "type": "string", "enum": ["DEPOSIT", "WITHDRAWAL", "ALL"] }
          },
          "kycInterventions": {
            "type": "array",
            "items": { "type": "string", "enum": ["DEPOSIT", "WITHDRAWAL", "ALL"] }
          },
          "kycAutomatedEnabled": { "type": "boolean" },
          "reminderKYC": { "type": "boolean" },
          "reminderKYCPromptInterval": { "type": "integer", "format": "int32" },
          "kycExpirationReminder": { "type": "boolean" },
          "kycExpirationDays": { "type": "integer", "format": "int32" },
          "blacklistedStates": {
            "type": "object",
            "additionalProperties": { "type": "array", "items": { "type": "string" } }
          },
          "selfExclusionDefaultTimeMonths": { "type": "integer", "format": "int32" },
          "selfExclusionMinimumTimeMonths": { "type": "integer", "format": "int32" }
        }
      },
      "CompanyDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "companyId": { "type": "string" },
          "address": { "type": "string" },
          "registrationCountry": { "$ref": "#/components/schemas/CountryDto" },
          "brandIds": { "type": "array", "items": { "type": "string" } }
        }
      },
      "PaymentLimitDto": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["DEPOSIT", "WITHDRAWAL"] },
          "period": { "type": "string", "enum": ["DAILY", "WEEKLY", "MONTHLY"] },
          "value": { "type": "number" }
        }
      },
      "PaymentProviderRoutingDto": {
        "type": "object",
        "properties": {
          "currency": { "type": "string" },
          "defaultCurrencyDisplayName": { "type": "string" },
          "baseCurrency": { "type": "string" },
          "provider": {
            "type": "string",
            "enum": ["COINSPAID", "FIRE_BLOCKS", "PAYMENT_IQ", "COBO", "TG_WALLET"]
          },
          "supportedProviders": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["COINSPAID", "FIRE_BLOCKS", "PAYMENT_IQ", "COBO", "TG_WALLET"]
            }
          },
          "supportedProviderLimits": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PaymentProviderRoutingLimitDto"
            }
          }
        }
      },
      "PaymentProviderRoutingLimitDto": {
        "type": "object",
        "properties": {
          "minDepositAmount": { "type": "number" },
          "providerMinDepositAmount": { "type": "number" },
          "minWithdrawalAmount": { "type": "number" },
          "providerMinWithdrawalAmount": { "type": "number" }
        }
      },
      "HCaptchaDataXto": {
        "type": "object",
        "properties": { "signupSiteKey": { "type": "string" } }
      },
      "TelegramSignupDataXto": {
        "type": "object",
        "properties": {
          "telegramSignupUrl": { "type": "string" },
          "hcaptcha": { "$ref": "#/components/schemas/HCaptchaDataXto" }
        }
      },
      "PaymentSessionXto": {
        "type": "object",
        "properties": {
          "merchantId": { "type": "string" },
          "sessionId": { "type": "string" }
        }
      },
      "FluidBonusXto": {
        "type": "object",
        "properties": {
          "code": { "type": "string" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "logoUrl": { "type": "string" },
          "howItWorks": { "type": "string" },
          "termsDescription": { "type": "string" },
          "maxBonusAmount": { "type": "number" },
          "maxBonusPercentage": { "type": "integer", "format": "int32" },
          "minDepositAmount": { "type": "number" }
        }
      },
      "FluidDataXto": {
        "type": "object",
        "properties": {
          "balance": { "type": "number" },
          "withdrawableBalance": { "type": "number" },
          "bonuses": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FluidBonusXto" }
          }
        }
      },
      "GameFrontendXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "70a54731-dcf1-4230-9178-8b39f87cf3f6" },
          "title": { "type": "string", "example": "Dragon King" },
          "demoSlug": { "type": "string" },
          "realSlug": { "type": "string" },
          "imageUrl": { "type": "string" },
          "primaryLabel": { "type": "string" },
          "secondaryLabel": { "type": "string" }
        }
      },
      "ContainerExternalConditionsXto": {
        "type": "object",
        "properties": { "conditions": { "type": "object" } }
      },
      "PageOfContainerConfigurationsXto": {
        "type": "object",
        "properties": {
          "totalCount": { "type": "integer", "format": "int64" },
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ContainerConfigurationXto" }
          }
        }
      },
      "PlatformProviderXto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Hub88" },
          "subProviders": {
            "type": "array",
            "example": ["OneTouch", "Evolution Gaming"],
            "items": {
              "type": "string",
              "example": "[\"OneTouch\",\"Evolution Gaming\"]"
            }
          }
        }
      },
      "PageableResponseXtoGameProviderXto": {
        "type": "object",
        "properties": {
          "hasMore": {
            "type": "boolean",
            "description": "if this is the last page of items",
            "example": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of available items",
            "format": "int64",
            "example": 200
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of available pages",
            "format": "int32",
            "example": 3
          },
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CasinoProviderXto" }
          }
        }
      },
      "ExtendedCasinoGameXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "70a54731-dcf1-4230-9178-8b39f87cf3f6" },
          "platformGameId": {
            "type": "string",
            "example": "80a54731-dcf1-4230-9178-8b39f87cf3f6"
          },
          "name": { "type": "string", "example": "roulette" },
          "provider": { "type": "string", "example": "hub88" },
          "subProvider": { "type": "string", "example": "Red tiger" },
          "type": {
            "type": "string",
            "example": "SLOTS",
            "enum": [
              "SLOTS",
              "JACKPOTS",
              "VIDEO_POKER",
              "ROULETTE",
              "TABLE_CARD",
              "BLACKJACK",
              "BACCARAT",
              "MINIGAMES",
              "OTHERS",
              "DEFAULT",
              "OTHERS_LIVE",
              "LIVE_BACCARAT",
              "LIVE_BLACKJACK",
              "GAME_SHOW",
              "LIVE_ROULETTE",
              "DICE",
              "DRAGON_TIGER",
              "CRASH",
              "SCRATCH",
              "ARCADE",
              "LOTTERY",
              "BINGO",
              "VIRTUAL",
              "PLAYER_PROPS",
              "OTHERS_TABLE",
              "LIVE_DICE",
              "LIVE_DRAGON_TIGER",
              "LIVE_POKER"
            ]
          },
          "game": { "type": "string", "example": "magic game" },
          "supportedLanguages": {
            "type": "array",
            "example": ["en", "de", "it"],
            "items": { "type": "string", "example": "[\"en\",\"de\",\"it\"]" }
          },
          "providerBlockedCountries": {
            "type": "array",
            "example": ["bg", "gr"],
            "items": { "type": "string", "example": "[\"bg\",\"gr\"]" }
          },
          "themes": { "type": "array", "items": { "type": "string" } },
          "features": { "type": "array", "items": { "type": "string" } },
          "categoryImageUrl": {
            "type": "string",
            "example": "image1",
            "deprecated": true
          },
          "restrictCountries": {
            "type": "array",
            "example": ["jp", "rf"],
            "items": { "type": "string", "example": "[\"jp\",\"rf\"]" }
          },
          "primaryLabel": { "type": "string", "example": "label1" },
          "secondaryLabel": { "type": "string", "example": "label2" },
          "enabled": { "type": "boolean", "example": true },
          "platformEnabled": { "type": "boolean", "example": true },
          "hasDemo": { "type": "boolean", "example": true },
          "rtp": { "type": "string", "example": "94.56" },
          "images": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": "{\"tileId-uuid\":\"tile-image/permalink"
            },
            "example": "{\"tileId-uuid\":\"tile-image/permalink"
          },
          "seoTitle": {
            "type": "string",
            "example": "Some SEO Title",
            "deprecated": true
          },
          "seoDescription": {
            "type": "string",
            "example": "Some SEO Description",
            "deprecated": true
          },
          "seo": { "$ref": "#/components/schemas/SeoPropertiesXto" },
          "slugName": { "type": "string", "example": "toshi-video-club" },
          "slugSubProvider": { "type": "string", "example": "red-tiger" },
          "externalGameId": { "type": "string", "example": "ont_play_wheel" }
        }
      },
      "GameCategoryItemXto": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "84564d9b-1005-4c2e-a1f9-10853aab2951" },
          "name": { "type": "string", "example": "Game category" }
        }
      },
      "PageableResponseXtoGameCategoryXto": {
        "type": "object",
        "properties": {
          "hasMore": {
            "type": "boolean",
            "description": "if this is the last page of items",
            "example": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of available items",
            "format": "int64",
            "example": 200
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of available pages",
            "format": "int32",
            "example": 3
          },
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/GameCategoryItemXto" }
          }
        }
      },
      "BrandXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "defaultLanguageCode": { "type": "string" },
          "operationCurrencies": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CurrencyXto" }
          },
          "domains": { "type": "array", "items": { "type": "string" } }
        }
      },
      "CurrencyXto": {
        "type": "object",
        "properties": {
          "code": { "type": "string" },
          "precision": { "type": "integer", "format": "int32" }
        }
      },
      "GroupXto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "propertyName": { "type": "string" },
          "description": { "type": "string" },
          "hasBasicFields": { "type": "boolean" }
        }
      }
    },
    "securitySchemes": {
      "bearer-key": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" }
    }
  }
}