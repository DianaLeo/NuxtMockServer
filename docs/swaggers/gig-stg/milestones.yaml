openapi: 3.0.1
info:
  title: GIG Magic API
  version: "1"
  description: GIG Magic API description
servers:
  - url: https://stg-api-b.gigmagic.io/igc/luckiest/
    description: ""
    variables: {}
paths:
  /milestones/generate:
    post:
      tags:
        - method
      summary: Generate milestones for a competition
      description: Generates milestones for a competition up to a max achievement value
      responses:
        default:
          $ref: "#/components/responses/GenerateRes"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateReq"
        required: true
  /milestones/generateBySlugAndUserId:
    post:
      tags:
        - authMethod
      summary: Get the current and next milestone for a user
      description: Gets the current and next milestone for a user
      responses:
        default:
          $ref: "#/components/responses/GenerateBySlugAndUserIdRes"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateBySlugAndUserIdReq"
        required: true
components:
  schemas:
    GenerateReq:
      type: object
      required:
        - infiniteLoopAdvance
        - milestones
        - maxValue
      properties:
        infiniteLoopAdvance:
          type: array
          items:
            $ref: "#/components/schemas/InfiniteLoopAdvance"
          description: Configuration to generate automatic milestones
        milestones:
          type: array
          items:
            $ref: "#/components/schemas/Milestone"
          description: Real milestones to be used as base for the automatic ones
        maxValue:
          type: number
          example: 10000
          description: Maximum value of the achievement that will be generated by the
            dynamic milestones
        fromValue:
          type: number
          example: 100
          description: Starting value used to generate the dynamic milestones
    GenerateRes:
      type: object
      properties:
        milestones:
          type: array
          items:
            $ref: "#/components/schemas/Milestone"
    GenerateBySlugAndUserIdReq:
      type: object
      required:
        - competitionSlug
        - userId
      properties:
        competitionSlug:
          type: string
          example: competition-test
          description: Automatic milestones will be generated for this competition
    GenerateBySlugAndUserIdRes:
      type: object
      properties:
        last:
          $ref: "#/components/schemas/Milestone"
          description: Current milestone
        next:
          $ref: "#/components/schemas/Milestone"
          description: Next milestone
    Milestone:
      type: object
      properties:
        winAmount:
          $ref: "#/components/schemas/WinAmount"
        payoutMessage:
          $ref: "#/components/schemas/PayoutMessage"
        rolestoremove:
          $ref: "#/components/schemas/Rolestoremove"
        immediatePayout:
          $ref: "#/components/schemas/ImmediatePayout"
        timezone:
          $ref: "#/components/schemas/Timezone"
        roles:
          $ref: "#/components/schemas/Roles"
        segment:
          $ref: "#/components/schemas/Segment"
        loopMultiplier:
          $ref: "#/components/schemas/LoopMultiplier"
        message:
          $ref: "#/components/schemas/Message"
        value:
          type: number
          example: 10
          description: Amount of achievement value required to reach this milestone
        token:
          $ref: "#/components/schemas/Token"
    InfiniteLoopAdvance:
      type: object
      properties:
        token:
          $ref: "#/components/schemas/Token"
        message:
          $ref: "#/components/schemas/Message"
        winAmount:
          $ref: "#/components/schemas/WinAmount"
        roles:
          $ref: "#/components/schemas/Roles"
        rolestoremove:
          $ref: "#/components/schemas/Rolestoremove"
        segment:
          $ref: "#/components/schemas/Segment"
        payoutMessage:
          $ref: "#/components/schemas/PayoutMessage"
        delayPayoutDays:
          $ref: "#/components/schemas/DelayPayoutDays"
        delayPayoutTime:
          $ref: "#/components/schemas/DelayPayoutTime"
        immediatePayout:
          $ref: "#/components/schemas/ImmediatePayout"
        loopMultiplier:
          $ref: "#/components/schemas/LoopMultiplier"
        timezone:
          $ref: "#/components/schemas/Timezone"
        config:
          $ref: "#/components/schemas/PositionConfig"
    PositionConfig:
      type: object
      properties:
        typePosition:
          type: number
          example: 1
          description: >
            0 = At x num of iteration \

            1 = EachAlternate X iteration with alterations between configurations \

            2 = Each X iteration \

            3 = FromTo x to y iteration \

            4 = From x iteration onwards \

            5 = To x iteration \

            6 = Odd iterations \

            7 = Even iterations \
        modifier1:
          type: number
          example: 5
          description: Is the value marked as X, what depends on the type position.
        modifier2:
          type: number
          example: 5
          description: 'For some type positions a second modifier is needed. For instance:
            in FromTo, this would be the "to" value.'
        modifier3:
          type: number
          example: 5
          description: Special modifier for type 1, it is generated automatically
        skip:
          type: number
          example: 1
          description: How many milestone positions we need to skip in order to start to
            use this configuration
    Token:
      type: string
      format: uuid
      description: id of the token to be granted with this auto generated milestone
    Message:
      type: string
      format: uuid
      description: id of the message to be granted with this auto generated milestone
    WinAmount:
      type: number
      example: 10
      description: Amount of virtual currency won
    Roles:
      type: string
      example: foo, var
      description: Roles to add to the user (separated by comma)
    Rolestoremove:
      type: string
      example: foo, var
      description: Roles to remove from the user
    Segment:
      type: number
      example: 1
      description: Change the segment of the user
    PayoutMessage:
      type: string
      format: uuid
      description: Id of the message we will send to the user when payout
    DelayPayoutDays:
      type: string
      example: "5"
      description: Number of days we will delay the payout
    DelayPayoutTime:
      type: string
      example: 10:00
      description: Hour when we will do the payout
    ImmediatePayout:
      type: boolean
      example: "true"
      description: Used to indicate if the payout should happen immediately after this
        milestone is reached
    LoopMultiplier:
      type: number
      example: 5
      description: Multiplier for the number of achievements required for this milestone.
    Timezone:
      type: string
      example: CEST
      description: Timezone for the payuout
  responses:
    GenerateRes:
      description: Returns generated dinamic milestones
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenerateRes"
    GenerateBySlugAndUserIdRes:
      description: Returns current and next milestone
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenerateBySlugAndUserIdRes"
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    sessionId:
      type: apiKey
      description: sessionId (sid) of a logged in user
      name: x-api-sid
      in: header
  links: {}
  callbacks: {}
security:
  - sessionId: []
tags:
  - name: authMethod
    description: Methods which require login
  - name: method
    description: Methods which do NOT require login
  - name: private
    description: Internal endpoints, not available publicly
channels: {}
