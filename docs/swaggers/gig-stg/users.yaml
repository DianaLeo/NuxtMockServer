openapi: 3.0.1
info:
  title: GIG Magic API
  version: "1"
  description: GIG Magic API description
servers:
  - url: https://stg-api-b.gigmagic.io/igc/luckiest/
    description: ""
    variables: {}
paths:
  openapi:
    "0": "3"
    "1": .
    "2": "0"
    "3": .
    "4": "0"
  /users/acceptTerms:
    post:
      tags:
        - authMethod
      summary: Accepts the terms for the logged in user.
      description: >
        Accepts the terms for the logged in user. The date of acceptance is
        displayed on the CMS at the user profile.


        \

        This endpoint does the following GIG Core calls:

        ```

        - /User/AcceptTerms

        ```
      responses:
        default:
          description: Response will always be true
          content:
            application/json:
              schema:
                type: boolean
                example: true
  /users/addNote:
    post:
      tags:
        - authMethod
      summary: Adds a note into the logged in user profile.
      description: |
        Adds a note into the logged in user profile.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /User/AddUserNote?note={note}
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  type: string
                  example: Test note
        required: true
      responses:
        default:
          description: Response will always be true
          content:
            application/json:
              schema:
                type: boolean
                example: true
  /users/agreedCompliance:
    post:
      tags:
        - authMethod
      summary: For internal use only. Accepts the UKGC terms inside the GiG Magic
        Cashier.
      description: >
        For internal use only. Accepts to the UKGC terms inside the GiG Magic
        Cashier.


        \

        This endpoint does NOT call GIG Core API
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: TestUser
        required: true
      responses:
        default:
          description: There's no response from this endpoint
  /users/authenticateWithChallengeToken:
    post:
      tags:
        - method
      summary: Authenticate with a challenge token
      description: |
        The parent window should receive a message from the iFrame in a
        `postMessage`. It is a stringified JSON, and inside of that there is
        a string like this:

        `{"success":"True","challenge":"952d2dd5-0e6a-46e0-b88c-94cdf00017b8"}`

        The challenege token is only valid when the `success` attribute
        is true.

        This endpoint does the following GIG Core calls:
        ```
        - /v2/authentication/authenticatewithchallenge
        - /User
        - /IPWhois
        - /v2/authentication/authenticatewithchallenge
        ```
        If the country is `SE` it also calls:
        ```
        - /v2/ResponsibleGaming/Limits/SetUserLimits
        ```
        If user has any pending action:
        ```
         - /User/AddKYCRequirements
         - /User/AddUserNote
         ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/authenticateWithChallengeTokenParams"
        required: true
      responses:
        default:
          $ref: "#/components/responses/authenticateWithChallengeTokenRes"
  /users/bonus:
    post:
      tags:
        - authMethod
      summary: Increments the user achievement count.
      description: |
        Increments the user achievement count.

        \
        This endpoint does NOT call GIG Core API
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: testuser
                betAmount:
                  type: number
                  example: 0.2
                slug:
                  type: string
                  example: fake-game-slug
        required: true
      responses:
        default:
          description: There's no response from this endpoint
  /users/changeEmail:
    post:
      tags:
        - authMethod
      summary: Changes the user email.
      description: |
        Changes the user email. \
        After the successful email change the user is logged out by default. \
        The param doNotLogout allows to avoid logout.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Authentication/Change/Email
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: test@email.com
                password:
                  type: string
                  example: user-password
                doNotLogout:
                  required: false
                  type: boolean
                  example: true
        required: true
      responses:
        default:
          description: There's no response from this endpoint if the email change was
            successful, and the user will be logged out unless doNotLogout is
            set to true.
        emailAlreadyExists:
          description: >
            If the email passed on the parameters already exists on the system
            this response is given
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Error
                  message:
                    type: string
                    example: EMAIL_ALREADY_EXISTS
  /users/changePassword:
    post:
      tags:
        - authMethod
      summary: Changes the user password
      description: >
        Changes the user password.


        `verificationCode` only becomes mandatory if the setting "IsSmsVerificationValidatorEnabled" value is set to true in Core BO.


        \

        This endpoint does the following GIG Core calls:

        ```

        - /Authentication/Change/Password

        ```

        If BYPASS_2FA flag turned on

        ```

        - /User/GetKycApprovalTypes

        - /User/GetKycApprovalStatuses

        - /User/GetKycStatus

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  example: user-new-password
                oldPassword:
                  type: string
                  example: user-old-password
                verificationCode:
                  type: string
                  example: "0157"
        required: true
      responses:
        default:
          description: There's no response from this endpoint if the password change was
            successful.
  /users/changeSecurityQuestionV2:
    post:
      tags:
        - authMethod
      summary: Changes the user security questions.
      description: |
        Changes the user security questions.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /v2/authentication/Change/SecurityQuestion
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: user-password
                securityQuestions:
                  type: array
                  items:
                    type: object
                    properties:
                      securityQuestion:
                        type: string
                        example: 1
                      securityAnswer:
                        type: string
                        example: one of the answers for the users security questions
        required: true
      responses:
        default:
          description: If everything went well an empty object is returned
          content:
            application/json:
              schema:
                type: object
        SECURITY_QUESTION_ANSWER_COUNT_MISMATCH:
          description: >
            If more securityQuestions than what the user already has are sent,
            this error is returned
          content:
            application/json:
              schema:
                type: string
                example: SECURITY_QUESTION_ANSWER_COUNT_MISMATCH
        INVALID_SECURITY_QUESTION:
          description: |
            If the security question specified in securityQuestions is invalid
          content:
            application/json:
              schema:
                type: string
                example: INVALID_SECURITY_QUESTION
  /users/closeAccountV2:
    post:
      tags:
        - authMethod
      summary: Close user's account.
      description: |
        Close user's account.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /v2/User/CloseAccount
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                DOB:
                  type: object
                  properties:
                    day:
                      type: number
                      example: 1
                    month:
                      type: number
                      example: 1
                    year:
                      type: number
                      example: 1900
                userBlockReason:
                  type: string
                  example: Account closed from the frontend at 01/01/20
        required: true
      responses:
        default:
          description: There's no response from this endpoint
  /users/cmpAccessToken:
    post:
      tags:
        - method
      summary: Request CMP access token.
      description: |
        Requests a CMP access token.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /v2/authentication/Verify/CmpAccessToken/Get
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                externalPlayerId:
                  type: string
                  example: "12345"
                birthDate:
                  type: string
                  example: 2019-01-21T15:39:59.7692861+00:00
                postalCode:
                  type: string
                  example: "12345"
        required: true
      responses:
        default:
          description: The default response
          content:
            application/json:
              schema:
                type: object
                properties:
                  isInvalidated:
                    type: boolean
                    example: false
                  token:
                    type: string
                    example: c3ebbb40-2d32-4f46-bcc6-0a676e3f6f1c
  /users/completeRegistration:
    post:
      tags:
        - authMethod
      summary: Sets the missing information after BankID registration
      description: >
        After calling `authenticateWithChallengeToken` endpoint the user will
        have a valid session but some of the required information could be
        missing.


        \

        This endpoint does the following GIG Core calls:

        ```

        - /User

        - /User/Password/SetOnce

        - /Authentication/Change/Email

        ```


        And, when `securityQuestions` are present on the parameters:

        ```

        - /v2/authentication/Change/SecurityQuestion

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: example@example.com
                password:
                  type: string
                  example: user-password
                securityQuestions:
                  type: array
                  items:
                    type: object
                    properties:
                      securityQuestion:
                        type: string
                        example: 1
                      securityAnswer:
                        type: string
                        example: one of the answers for the users security questions
        required: true
      responses:
        default:
          description: If everything went well a bool (true) value is returned
          content:
            application/json:
              schema:
                type: boolean
                example: true
  /users/editProfile:
    post:
      tags:
        - authMethod
      summary: Updates the user profile.
      description: >
        Updates the user profile, changing only the fields that are provided on
        the request body.

        \

        This endpoint does the following GIG Core calls:

        ```

        - /User

        - /User/Update

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                address1:
                  type: string
                  example: Test address
                address2:
                  type: string
                  example: Test address
                postalCode:
                  type: string
                  example: "1234"
                city:
                  type: string
                  example: London
                mobilePrefix:
                  type: string
                  example: "+34"
                mobile:
                  type: string
                  example: "123456789"
                phonePrefix:
                  type: string
                  example: "+34"
                phone:
                  type: string
                  example: "987654321"
                language:
                  type: string
                  example: English
        required: true
      responses:
        default:
          description: The response will always be true if the call succeeded
  /users/getAMLStatus:
    post:
      tags:
        - authMethod
      summary: Get AML status for the current user
      description: |
        Get AML status for the current user

        \
        This endpoint does the following GIG Core calls:
        ```
        - /User/GetKycApprovalTypes
        - /User/GetKycApprovalStatuses
        - /User/GetKycStatus
        ```
      responses:
        default:
          $ref: "#/components/responses/getAMLStatusRes"
  /users/getAmlVerificationStatus:
    post:
      tags:
        - authMethod
      summary: Get AML verification status for the current user
      description: |
        Get AML verification status for the current user

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Kyc/GetAmlVerificationStatus
        - /User/KYC
        ```
      responses:
        default:
          $ref: "#/components/responses/getAmlVerificationStatusRes"
  /users/getAuthenticationMethod:
    post:
      tags:
        - authMethod
      summary: The authentication method for the current authenticated user. Default -
        ONE_FACTOR
      description: >
        The authentication method for the current authenticated user. Default -
        ONE_FACTOR

        \

        This endpoint does the following GIG Core calls:

        ```

        - /Authentication/GetAuthenticationMethod

        ```
      responses:
        default:
          description: The available methods are - ONE_FACTOR, TWO_FACTOR_BY_SMS,
            TWO_FACTOR_BY_EMAIL, TWO_FACTOR_BY_KBA
          content:
            application/json:
              schema:
                type: string
                example: ONE_FACTOR
  /users/getBankIdiFrameDetails:
    post:
      tags:
        - method
      summary: Generate the required information for the bankID iframe
      description: |
        It provides the necessary information for the BankID iFrame, like the
        URL that the frontend needs to load and the frame size.

        For trustly I can recommend you to select SEB and use a test user
        from here: https://test.trustly.com/testing/ or from https://fejk.se/
        GiGCore said that it was okey to select the `Säkerhetskod` option,
        in this case you don’t need a person with a working bankId.

        This endpoint does NOT call GIG Core API
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                identity_provider:
                  required: true
                  type: string
                  description: The identity provider to authenticate against
                  example: trustly
                currency:
                  required: true
                  type: string
                  description: The currency of the end-user's account in the merchant's system
                  example: EUR
                country:
                  type: string
                  description: The country of the end-user
                  example: SE
                amount:
                  type: number
                  description: Deposit amount
                  example: 20
                locale:
                  type: string
                  example: sv_SE
                userLanguage:
                  type: string
                  example: eng
                bonusCode:
                  type: string
                  example: BONUD_CODE
                authenticationToken:
                  type: string
                  description: Only for linking
                  example: a12947b8-3fe1-4b16-84cf-0074c19dbfa7
      responses:
        default:
          description: >
            The `authenticationToken` parameter is only for account linking.

            If the `PersonId` value in the user object is populated, that means

            the player’s account is already linked with BankId. If the `PersonId`

            value is null that means that their account is not linked yet with

            bankId and you can allow the player to initiate that process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getBankIdiFrameDetailsPayload"
  /users/getConsents:
    post:
      tags:
        - method
      summary: Get All Consents by Language
      description: |
        Get All Consents by Language

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Consent/GetConsents
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                languageAlpha2Code:
                  type: string
                  example: en
      responses:
        default:
          description: Consents information
          content:
            application/json:
              schema:
                type: object
                properties:
                  consentId:
                    type: number
                    example: 1
                  consented:
                    type: boolean
                    example: true
                  isMandatory:
                    nullable: true
                    type: boolean
                    example: false
                  name:
                    type: string
                    example: Sample consent
                  version:
                    type: number
                    format: float
                    example: 1
                  consentContents:
                    type: array
                    items:
                      type: object
                      properties:
                        content:
                          type: string
                          example: Consent content
                        header:
                          type: string
                          example: Consent header
                        languageAlpha2Code:
                          type: string
                          example: SE
  /users/getGameSessionSummary:
    post:
      tags:
        - authMethod
      summary: Aggregation summary of the current game session
      description: |
        Aggregation summary of the current game session
      responses:
        default:
          $ref: "#/components/responses/getGameSessionSummaryRes"
  /users/getGracePeriod:
    post:
      tags:
        - method
      summary: Get grace periods for a user
      description: |
        Get grace periods for a user

        \
        This endpoint does the following GIG Core calls:
        ```
        - /User/GracePeriod
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: number
                  example: 4546574
      responses:
        default:
          description: Grace periods for a user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    documentTypeId:
                      type: number
                      example: 1
                      enum:
                        - 1
                        - 2
                        - 3
                        - 4
                        - 5
                        - 6
                        - 7
                        - 8
                      description: >
                        * 1 - PhotoId  * 2 - ProofOfAddress  * 3 -
                        PaymentMethod  * 4 - KYCApproval  * 5 -
                        SourceOfWealthQuestionnaire  * 6 -
                        SourceOfWealthSupportingDocs  * 7 - SourceOfFunds  * 8 -
                        SSN
                    documentType:
                      type: string
                      example: PhotoId
                    startDate:
                      type: string
                      format: date-time
                    endDate:
                      type: string
                      format: date-time
  /users/getIGCUserPreferences:
    post:
      tags:
        - authMethod
      summary: Retrieves the user preferences for the authenticated user.
      description: |
        Retrieves the user preferences for the authenticated user.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /v2/User/Preferences
        ```
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: object
                properties:
                  PreferenceType:
                    type: number
                    example: 1
                  Name:
                    type: string
                    example: Sample name
                  Value:
                    type: string
                    example: Sample value
  /users/getIdDocTypes:
    post:
      tags:
        - authMethod
      summary: Get a list of Id Doc types
      description: |
        Get a list of Id Doc types

        \
        This endpoint does the following GIG Core calls:
        ```
        - /IdDocTypes
        ```
      responses:
        default:
          description: >
            In the response object each key is a doc type and the value is the id
          content:
            application/json:
              schema:
                type: object
                properties:
                  sampleTypeName:
                    type: number
  /users/getKBAQuestionnaire:
    post:
      tags:
        - authMethod
      summary: Get KBA questions to the user
      description: |
        Get KBA questions to the user

        \
        This endpoint does the following GIG Core calls:
        ```
        - /v2/Kyc/GetKBAQuestionnaire
        ```
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: object
                properties:
                  questionnaire:
                    type: object
                    properties:
                      questionOutcomes:
                        type: array
                        items:
                          properties:
                            questionId:
                              type: string
                            questionText:
                              type: string
                            outcomes:
                              type: array
                              items:
                                properties:
                                  outcomeId:
                                    type: string
                                  outcomeText:
                                    type: string
                      expiryTime:
                        type: string
  /users/getKYCApprovalStatuses:
    post:
      tags:
        - method
      summary: Gets the possible KYC approval statuses list
      description: |
        Gets the possible KYC approval statuses list

        \
        This endpoint does the following GIG Core calls:
        ```
        - /User/GetKycApprovalStatuses
        ```
      responses:
        default:
          description: In the list the keys are the status names, the values are the ids
          content:
            application/json:
              schema:
                type: object
                properties:
                  exampleStatus:
                    type: number
                    example: 1
  /users/getKYCApprovalTypes:
    post:
      tags:
        - method
      summary: Gets the possible KYC approval types list
      description: |
        Gets the possible KYC approval types list

        \
        This endpoint does the following GIG Core calls:
        ```
        - /User/GetKycApprovalTypes
        ```
      responses:
        default:
          description: In the list the keys are the status types, the values are the ids
          content:
            application/json:
              schema:
                type: object
                properties:
                  exampleStatus:
                    type: number
                    example: 1
  /users/getKYCDocExpiration:
    post:
      tags:
        - authMethod
      summary: Gets the list of kyc doc expiration.
      description: |
        Gets the list of kyc doc expiration.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /KYC/DocExpiration
        ```
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    KycId:
                      type: number
                      example: 1
                    DocumentStatusId:
                      type: number
                      example: 1
                    DocumentStatusName:
                      type: string
                      example: Pending
                    DocumentTypeId:
                      type: number
                      example: 1
                    DocumentTypeName:
                      type: string
                      example: ID
                    DocumentExpirationDate:
                      type: string
                      format: date-time
  /users/getKYCStatus:
    post:
      tags:
        - authMethod
      summary: Gets the KYC statuses for the logged in user
      description: |
        Gets the KYC statuses for the logged in user
        \
        This endpoint does the following GIG Core calls:
        ```
        - /User/GetKycApprovalTypes
        - /User/GetKycApprovalStatuses
        - /User/GetKycStatus
        ```
      responses:
        default:
          description: In the list the keys are the status types, the values are the
            statuses
          content:
            application/json:
              schema:
                type: object
                properties:
                  exampleStatus:
                    type: string
                    example: example value
  /users/getKYCVerificationURL:
    post:
      tags:
        - authMethod
      summary: Return the Age Checked status and URL of the user.
      description: >
        This endpoint provides data meant to be used in special KYC flows, like
        the ACGO, to get the KYC verification URL through the Age Checked
        provider. 

         \
         This endpoint does the following GIG Core calls:
         ```
         - /v2/Kyc/GetKycVerificationUrl
         ```
      responses:
        default:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  Data:
                    type: object
                    properties:
                      AvStatus:
                        type: object
                        properties:
                          AgeCheckId:
                            type: string
                            example: "1585925"
                          AgeVerifiedId:
                            type: string
                            example: RBv1ds9aRut1KiBrEkOyQ/CK/maSuPfuUZlHtRVD/3H45p/Qqr/davCawexjAn4y
                          Status:
                            type: integer
                            example: 1
                          StatusText:
                            type: string
                            example: InProgress
                          AcChannel:
                            type: string
                            example: C
                          AcMethod:
                            type: string
                            example: AC0130
                      PlayerReference:
                        type: string
                        example: 12~5491879
                      VerificationUrl:
                        type: string
                        format: uri
                        example: https://agechecked.sb.getid.dev/vp/staging-d-l-s/?token=eyJhbGciOiJSU0EtT0FFUC0yNTYiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIn0.jNQP0ZxFRKQWY9QKRq2DlLkZNYNR8PF9qsFxCKMQMicd9A6bc58AsRi3sWKQabIgzqDafKDQcZHppAUa7Mt8jWzE253r4XJxMsgD-ttWpvlpeZrMPshSnz2m_wb-R6gUybjOqZSUUq-j51HPz51IAdC3LriV1xb64ct5qp-rB7pxJT96F4GYGGjojkObEcIHSfVw-056KrlrvEdNEyG0X5rDgjhY4gxwwlINfQmmCoQ7F0No_QV_xx087BEmzbpIS9-aza8UfCHwqOa0G4MfmrYuzrxRooQR4HYuZVQewvRPMqebvLjMN8AsOU1SbIgILeZN3fyA83VUAW7qoDtgCw.eROYxePKag5XYktMbvpLaw.KHuxgGPpsCMIQBYE-EruvO9vpD1d0Bfjnpn-zQyp6yIAzW0lgQ2z9ZXyyL9Ot4ZW59J7GAwhvW47xshgUk_6CQlCoMCWZiFn5zd1mKkMPjW1c27OYqv-33NwcJ8XcVlcJBmBmYcgScUYfI63QSWPUZUyZtNaV6zFHxI1ovTbC122uN25U_3jg_nCCFZuj5IIBpaVXuf1ez90AkimHkHg_wKRT8FaYpkyalqwTSHkF-h_dET3VhwYaf93ss3QlUrfuNh7aYP9RkmvOXWQ97Z6kaXf7ImTFl90LqvVYYBLINXx5Xd-srax-tvnUSM2nqdQUBmMT1A4Ie-awyriTL-oOWpA20f4jw5OJzppCxYZC87uBrhs47TceigPFHjdQyvoUuHW8yeQGGJ5VhiuF8uiZ6KTHUIA25ibyGTQWNk5Lg2xogaDZWL1IpsK2tguhsMr.3qcOsS0tkl5gzugF-EXhpW33do6koJLbxtdigSOVZHs
                  Success:
                    type: boolean
                    example: true
                  Errors:
                    type: array
                    items:
                      type: string
                    example: []
        OPERATION_NOT_ALLOWED:
          description: The KYC provider for AGCO is not AgeChecked
          content:
            application/json:
              schema:
                type: object
                properties:
                  Data:
                    type: object
                    example: null
                  Success:
                    type: boolean
                    example: false
                  Errors:
                    type: array
                    items:
                      type: object
                      properties:
                        ErrorCodeID:
                          type: integer
                          example: 61
                        Error:
                          type: string
                          example: OPERATION_NOT_ALLOWED
                        Message:
                          type: string
                          example: The operation is not allowed
  /users/getLastGamesPlayed:
    post:
      tags:
        - authMethod
      summary: Get all last played games
      description: |
        Get all last played games for the authenticated user

        If the _numResults_ parameter is missing, we return the last 20

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Games/LastPlayed?maxResults={maxResults}
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                numResults:
                  type: number
                  example: 20
      responses:
        default:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    gameId:
                      type: number
                      example: 7262
                    date:
                      type: string
                      example: 2019-04-24T12:03:37
  /users/getLevelData:
    post:
      tags:
        - authMethod
      summary: Returns information about the current User Level Data
      description: |
        Returns information about the current User Level Data

        \
        This endpoint does the following GIG Core calls:
        ```
        - /v2/GameLayer/GetUserLevelData
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: number
                  example: 230045
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserID:
                    type: number
                    example: 1
                  Level:
                    type: number
                    example: 2
                  Multiplier:
                    type: number
                    format: float
                    example: 3
                  LifeFPP:
                    type: number
                    format: float
                    example: 4
                  LevelFPP:
                    type: number
                    format: float
                    example: 5
                  LevelBets:
                    type: number
                    format: float
                    example: 6
                  LevelSpins:
                    type: number
                    example: 7
                  LevelBetsWeighted:
                    type: number
                    format: float
                    example: 8
                  RewardLevelID:
                    type: number
                    example: 9
                  RewardLevelName:
                    type: string
                    example: sample string 10,
                  RewardMinBet:
                    type: number
                    format: float
                    example: 11
                  RewardMaxBet:
                    type: number
                    format: float
                    example: 12
                  RewardDivider:
                    type: number
                    format: float
                    example: 13
  /users/getLoginHistory:
    post:
      tags:
        - authMethod
      summary: Get user last logins
      description: |
        Get user last logins

        \
        This endpoint does the following GIG Core calls:
        ```
        - /User/GetLoginHistory
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                limit:
                  type: number
                  example: 10
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: object
                properties:
                  remoteIP:
                    type: string
                    example: Sample IP
                  clientIP:
                    type: string
                    example: Sample IP
                  registeredCountryAlpha2Code:
                    type: string
                    example: UK
                  country:
                    type: string
                    example: Sample country
                  userAgent:
                    type: string
                    example: Sample user agent
                  userId:
                    type: number
                    example: 11678
                  dateCreated:
                    type: string
                    example: Sample date
                  lastAccess:
                    type: string
                    example: Sample date
                  isInvalidated:
                    type: boolean
                    example: true
  /users/getMagicProfile:
    post:
      tags:
        - authMethod
      summary: Get user's Magic profile data
      description: >
        Get user's Magic profile data. 

        This endpoint can either be used with a ramson sid in the header and a userID in the body to fetch that player's profile or by passing the sid of the the desired user directly in the header without a body.
      responses:
        default:
          content:
            application/json:
              schema:
                type: object
                properties:
                  userName:
                    type: string
                  country:
                    type: string
                  location:
                    type: string
                  currency:
                    type: string
                  lang:
                    type: string
                  userId:
                    type: integer
                    example: 4558338
                  roles:
                    type: array
                    items:
                      type: string
                  segment:
                    type: integer
                    example: 4
                  created:
                    type: integer
                    example: 1590058387296
                    format: int64
                  birthDate:
                    type: integer
                    example: 1590058387296
                    format: int64
                  lastVisit:
                    type: integer
                    example: 1590058387296
                    format: int64
                  leaderboardName:
                    type: string
                  id:
                    type: integer
                    example: 4558338
                  modified:
                    type: integer
                    example: 1702887578827
                    format: int64
                  userID:
                    type: integer
                    example: 4558338
                  agreedCompliance:
                    type: boolean
                  preferences:
                    type: object
                    properties:
                      lastAutomationTestRun:
                        type: string
                        format: date-time
                  notOnSiteMarketing:
                    type: boolean
                  excludeFeed:
                    type: boolean
                  reason:
                    type: string
                  segmentChanged:
                    type: object
                    properties:
                      old:
                        type: integer
                        example: 6
                      action:
                        type: string
                      changed:
                        type: integer
                        example: 1696242792860
                        format: int64
  /users/getOmniUserDetails:
    post:
      tags:
        - authMethod
      summary: Get user omni details.
      description: |
        Gets the user omni details
        \
        This endpoint does the following GIG Core calls:
        ```
        - OmniUserDetails/{userId}
        ```
      responses:
        default:
          description: Response will contain the details
          content:
            application/json:
              schema:
                type: object
                properties:
                  externalPlayerId:
                    type: string
                  sourceOfBoarding:
                    type: string
                  externalStatus:
                    type: string
  /users/getPasswordRegex:
    post:
      summary: Gets password regex.
      description: |
        Gets password regex.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /v2/authentication/GetPasswordRegex
        ```
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
                example: ^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{6,25}$
  /users/getPendingKYC:
    post:
      tags:
        - authMethod
      summary: Get pending KYC iFrame
      description: |
        Get iFrame data for pending KYC

        \
        This endpoint does the following GIG Core calls:
        ```
        - /v2/Kyc/GetPendingKyc
        ```
      responses:
        default:
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  iFrames:
                    type: array
                    items:
                      properties:
                        URL:
                          type: string
                          example: https://kyc-brand.qa.paymentsson.com?oneTimeToken=random_token&lang=en
                        KYCTypes:
                          type: array
                          items:
                            type: string
                        priority:
                          type: number
                          example: 1
                  manual:
                    properties:
                      KYCTypes:
                        type: array
                        items:
                          type: string
                      priority:
                        type: number
                        example: 1
  /users/getPreferences:
    post:
      tags:
        - authMethod
      summary: Get stored user preferences.
      description: |
        Gets the stored user preferences.

        \
        This endpoint does NOT call GIG Core API
      responses:
        default:
          description: Response will contains the all properties stored on the user
            preferences
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
                example:
                  fpp: 1
                  photoID: PENDING_APPROVAL
                  sourceOfWealthComplete: true
  /users/getProfile:
    post:
      tags:
        - authMethod
      summary: Get user's profile data
      description: |
        Get user's profile data

        \
        This endpoint does the following GIG Core calls:
        ```
        - /User
        ```
      responses:
        default:
          content:
            application/json:
              schema:
                type: object
                properties:
                  alias:
                    type: string
                  lastLogin:
                    type: string
                  birthplace:
                    type: string
                    nullable: true
                  userID:
                    type: number
                  username:
                    type: string
                  email:
                    type: string
                  createdDate:
                    type: string
                  gender:
                    type: string
                  title:
                    type: string
                  firstname:
                    type: string
                  surname:
                    type: string
                  birthDate:
                    type: string
                  birthYear:
                    type: number
                  birthMonth:
                    type: number
                  birthDay:
                    type: number
                  mobilePrefix:
                    type: string
                  phonePrefix:
                    type: string
                  phone:
                    type: string
                  country:
                    type: string
                  region:
                    type: number
                  address1:
                    type: string
                  address2:
                    type: string
                  city:
                    type: string
                  postalCode:
                    type: string
                  personalID:
                    type: string
                  language:
                    type: string
                  languageAlpha2Code:
                    type: string
                    example: EN
                  currency:
                    type: string
                  reference:
                    type: string
                    nullable: true
                  igcToken:
                    type: string
                  kycStatus:
                    type: object
                    properties:
                      address:
                        $ref: "#/components/schemas/DocumentVerificationStatus"
                      payment:
                        $ref: "#/components/schemas/DocumentVerificationStatus"
                      photoID:
                        $ref: "#/components/schemas/DocumentVerificationStatus"
                      uploadCounter:
                        type: object
                        properties:
                          photoID:
                            type: number
                          address:
                            type: number
                          payment:
                            type: number
                      uploadLimit:
                        type: object
                        properties:
                          photoID:
                            type: number
                          address:
                            type: number
                          payment:
                            type: number
                      userName:
                        type: string
                      id:
                        type: string
                      status:
                        type: boolean
                      bankIdBlocked:
                        type: boolean
  /users/getProfileDge:
    post:
      tags:
        - authMethod
      summary: getProfileDge contains user's data including the SSN
      description: |
        getProfileDge contains user's data including the SSN

        \
        This endpoint does the following GIG Core calls:
        ```
        - /UserDetails/Dge
        ```
      responses:
        default:
          content:
            application/json:
              schema:
                type: object
                properties:
                  gender:
                    type: string
                  title:
                    type: string
                  firstname:
                    type: string
                  surname:
                    type: string
                  birthDate:
                    type: string
                  birthYear:
                    type: number
                  birthMonth:
                    type: number
                  birthDay:
                    type: number
                  mobilePrefix:
                    type: string
                  phonePrefix:
                    type: string
                  phone:
                    type: string
                  countryId:
                    type: number
                  address1:
                    type: string
                  address2:
                    type: string
                  city:
                    type: string
                  postalCode:
                    type: string
                  subdivisionId:
                    type: string
                  codeSubdivision:
                    type: string
                  nameSubdivision:
                    type: string
                  ssnLastFour:
                    type: string
  /users/getProfilePgcb:
    post:
      tags:
        - authMethod
      summary: getProfilePgcb contains user's data including the SSN
      description: |
        getProfilePgcb contains user's data including the SSN

        \
        This endpoint does the following GIG Core calls:
        ```
        - /UserDetails/Pgcb
        ```
      responses:
        default:
          content:
            application/json:
              schema:
                type: object
                properties:
                  gender:
                    type: string
                  title:
                    type: string
                  firstname:
                    type: string
                  surname:
                    type: string
                  birthDate:
                    type: string
                  birthYear:
                    type: number
                  birthMonth:
                    type: number
                  birthDay:
                    type: number
                  mobilePrefix:
                    type: string
                  phonePrefix:
                    type: string
                  phone:
                    type: string
                  countryId:
                    type: number
                  address1:
                    type: string
                  address2:
                    type: string
                  city:
                    type: string
                  postalCode:
                    type: string
                  subdivisionId:
                    type: string
                  codeSubdivision:
                    type: string
                  nameSubdivision:
                    type: string
                  ssnLastFour:
                    type: string
  /users/getProfileV2:
    post:
      tags:
        - authMethod
      summary: getProfileV2 contains the same user's data as getProfile, but including
        the 2FA information
      description: >
        getProfileV2 contains the same user's data as getProfile, but including
        the 2FA information


        \

        This endpoint does the following GIG Core calls:

        ```

        - /User

        - /v2/User

        ```
      responses:
        default:
          content:
            application/json:
              schema:
                type: object
                properties:
                  alias:
                    type: string
                  lastLogin:
                    type: string
                  birthplace:
                    type: string
                    nullable: true
                  userID:
                    type: number
                  username:
                    type: string
                  email:
                    type: string
                  createdDate:
                    type: string
                  gender:
                    type: string
                  title:
                    type: string
                  firstname:
                    type: string
                  surname:
                    type: string
                  birthDate:
                    type: string
                  birthYear:
                    type: number
                  birthMonth:
                    type: number
                  birthDay:
                    type: number
                  mobilePrefix:
                    type: string
                  phonePrefix:
                    type: string
                  phone:
                    type: string
                  country:
                    type: string
                  region:
                    type: number
                  address1:
                    type: string
                  address2:
                    type: string
                  city:
                    type: string
                  postalCode:
                    type: string
                  personalID:
                    type: string
                  language:
                    type: string
                  languageAlpha2Code:
                    type: string
                    example: EN
                  currency:
                    type: string
                  reference:
                    type: string
                    nullable: true
                  igcToken:
                    type: string
                  authMethod:
                    type: number
                  accountVerifiedOn:
                    type: string
                  languageLCID:
                    type: string
                  subdivisionID:
                    type: string
                  codeSubdivision:
                    type: string
                  nameSubdivision:
                    type: string
                  status:
                    type: string
                    nullable: true
                  governmentID:
                    type: string
                    nullable: true
                  source:
                    type: string
                    nullable: true
                  languageCode:
                    type: string
                  countryCode:
                    type: string
                  personId:
                    type: string
                    nullable: true
                  kycStatus:
                    type: object
                    properties:
                      address:
                        $ref: "#/components/schemas/DocumentVerificationStatus"
                      payment:
                        $ref: "#/components/schemas/DocumentVerificationStatus"
                      photoID:
                        $ref: "#/components/schemas/DocumentVerificationStatus"
                      uploadCounter:
                        type: object
                        properties:
                          photoID:
                            type: number
                          address:
                            type: number
                          payment:
                            type: number
                      uploadLimit:
                        type: object
                        properties:
                          photoID:
                            type: number
                          address:
                            type: number
                          payment:
                            type: number
                      userName:
                        type: string
                      id:
                        type: string
                      status:
                        type: boolean
                      bankIdBlocked:
                        type: boolean
                  registrationState:
                    type: number
                    example: 1
  /users/getRealityCheck:
    post:
      tags:
        - authMethod
      summary: Gets the reality check settings for the authenticated user
      description: |
        The responded value is in minute

        \
        This endpoint does the following GIG Core calls:
        ```
        - /RealityCheck/GetRealityCheckOptions
        ```
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: number
                    example: 10
  /users/getRealityCheckOptions:
    post:
      tags:
        - authMethod
      summary: Gets the reality check options for the curret user's country of access
      description: |
        The responded values are in minute

        \
        This endpoint does the following GIG Core calls:
        ```
        - /RealityCheck/GetRealityCheckOptions
        ```
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: object
                properties:
                  enabled:
                    type: boolean
                    example: true
                  availableValues:
                    type: array
                    items:
                      type: number
                      example: 10
  /users/getSOWQ:
    post:
      tags:
        - authMethod
      summary: Gets the Source of Wealth Questionnaire data
      description: |
        Gets the Source of Wealth Questionnaire data

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Kyc/GetSowQuestionnaire
        ```
      responses:
        default:
          description: Questions along with question types and possible answers.
          content:
            application/json:
              schema:
                type: object
                properties:
                  SowQuestions:
                    type: array
                    items:
                      type: object
                      properties:
                        Id:
                          type: number
                          example: 1
                        Text:
                          type: string
                          example: Sample question
                        SowQuestionType:
                          type: number
                          enum:
                            - "1": Single Answer Question - User is expected to provide only one answer to the
                                question (answer is required)
                            - "2": Multiple Answer Question - User is expected to provide one or more answers
                                to the question (at least one answer is
                                required).
                            - "3": Multiple or no answer question - User is expected to provide none or
                                multiple answers to the question (answer is
                                optional).
                            - "4": Country answer question - User is expected to choose one answer from the
                                list of countries (answer is required).
                          example: 1
                        SowAnswers:
                          type: array
                          items:
                            type: object
                            properties:
                              Id:
                                type: number
                                example: 1
                              Text:
                                type: string
                                example: Sample answer
                              FreeText:
                                type: string
                                example: Sample free text
  /users/getScanVerifyURL:
    post:
      tags:
        - authMethod
      summary: Get the ScanVerify URL to the user
      description: |
        Get the ScanVerify URL to the user

        \
        This endpoint does the following GIG Core calls:
        ```
        - /v2/Kyc/GetScanVerifyURL
        ```
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: object
                properties:
                  scanVerifyURL:
                    type: string
                    example: www.url.com
                  expiryTime:
                    type: string
                    example: 0001-01-01T00:00:00
  /users/getSecurityQuestionV2:
    post:
      tags:
        - authMethod
      summary: Gets the list of security questions for the given user, identified by
        email
      description: >
        Gets the list of security questions for the given user, identified by
        email


        \

        This endpoint does the following GIG Core calls:

        ```

        - /v2/authentication/SecurityQuestion

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: sample email
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
                      example: 1
                    question:
                      type: string
                      example: sample question
  /users/getSportncoLaunchURL:
    post:
      tags:
        - method
      summary: Get the Sportnco iframe URL
      description: |
        Get the Sportnco iframe URL

        \
        This endpoint does the following GIG Core calls:
        ```
        - /SportsIntegration/sportnco/iframeurl
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                countryCode:
                  type: string
                  example: MT
                languageCode:
                  type: string
                  example: EN
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: object
                properties:
                  res:
                    type: string
                    example: https://gigcore-staging.sportnco.com
  /users/getSportncoToken:
    post:
      tags:
        - authMethod
      summary: Gets the sportnco token.
      description: |
        Gets the sportnco token

        \
        This endpoint does the following Sportnco calls:
        ```
        - /sportsintegration/sportnco/session
        ```
      responses:
        default:
          description: Returns the token
          content:
            application/json:
              schema:
                type: object
                properties:
                  res:
                    type: string
                    example: 466a01cd-a6fc-4fc8-831c-8250a03c2e5f
  /users/getSportsbookLaunchUrl:
    post:
      tags:
        - method
      summary: Get sportsbook launch url
      description: |
        Get sportsbook launch url

        \
        This endpoint does the following GIG Core calls:
        ```
        - /SportsIntegration/session/create
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lang:
                  type: string
                  example: EN
                country:
                  type: string
                  example: MT
                currency:
                  type: string
                  example: EUR
                jurisdiction:
                  type: string
                  example: MGA
      responses:
        default:
          description: Returns the launch url
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: https://www-cf.qa.rizkplayground.net/stc-1716033901/?userContextId=stc-1716033901
  /users/getUserActiveBlocks:
    post:
      tags:
        - authMethod
      summary: Gets the list of block reasons for a user.
      description: |
        Gets the list of block reasons for a user.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /User/GetUserActiveBlocks/{userId}
        ```
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userBlockId:
                      type: number
                      example: 1
                    blockReasonId:
                      type: number
                      example: 1
                    blockReason:
                      type: string
                      example: Duplicated
                    blockTypeId:
                      type: number
                      format: 1
                    comment:
                      type: string
                      example: Duplicated
                    blockType:
                      type: string
                      format: Duplicated
                    startDate:
                      type: string
                      format: date-time
                    endDate:
                      type: string
                      format: date-time
                    cooldownEndDate:
                      type: string
                      format: date-time
                    expireAutomatically:
                      type: boolean
                      example: true
                    canBeCancelled:
                      type: boolean
                      example: true
                    createdDate:
                      type: string
                      format: date-time
                    createdBy:
                      type: number
                      example: 44222
  /users/hasPendingConsents:
    post:
      tags:
        - authMethod
      summary: Checks if user has any pending mandatory consents
      description: |
        Checks if user has any pending mandatory consents

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Consent/HasPendingConsents
        ```
      responses:
        default:
          description: The response will be true / false
          content:
            application/json:
              schema:
                type: boolean
                example: true
  /users/impersonate:
    post:
      tags:
        - authMethod
      summary: Impersonates a user session on GiG Magic.
      description: |
        Impersonates a user session on GiG Magic.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /User
        - /v2/User/{userId}
        - /IPWhois
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: c3ebbb40-2d32-4f46-bcc6-0a676e3f6f1c
        required: true
      responses:
        default:
          description: If the token is valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginResponse"
        INVALID_AUTHENTICATION_TOKEN:
          description: If the token is invalid
          content:
            application/json:
              schema:
                type: string
                example: INVALID_AUTHENTICATION_TOKEN
  /users/isLoggedIn:
    post:
      tags:
        - authMethod
      summary: Check if the user is logged in.
      description: |
        Checks if the user is logged in.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Authentication/IsLoggedIn
        ```
      responses:
        default:
          description: A boolean value is returned if the user is logged in (true) or not
            (false)
          content:
            application/json:
              schema:
                type: boolean
                example: true
  /users/kycDocumentRequest:
    post:
      tags:
        - authMethod
      summary: Requests a player’s KYC documents individually
      description: >
        This endpoint requests a player’s KYC documents individually. It only
        accepts a single document type: photo Id, proof of address or payment
        method.


        The possible values for `documentType`

        - 1 = Id

        - 2 = ProofOfAddress

        - 3 = PaymentMethodHeaders


        If the document has already been requested for the player and it still has a status of UserRequested/Requested then the first record will be marked with `isAudit=true`


        This endpoint does the following GIG Core calls:

        ```

        - /User/KycDocumentRequest/${documentType}

        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/kycDocumentRequestParams"
        required: true
      responses:
        default:
          $ref: "#/components/responses/kycDocumentRequestRes"
  /users/leaderboard:
    post:
      tags:
        - method
      summary: Get leaderboard status
      description: |
        Gets leaderboard information for an achievement.

        \
        This endpoint does NOT call GIG Core API
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                achievement:
                  type: string
                  example: test-achievement
                limit:
                  type: number
                  example: 3
        required: true
      responses:
        default:
          description: If there is a leaderboard for that achievement
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userName:
                      type: string
                      example: TestUser
                    leaderboardName:
                      type: string
                      example: TestUser T
                    achievements:
                      type: object
                      properties:
                        test-achievement:
                          type: number
                          example: 10
                example:
                  - userName: TestUser
                    leaderboardName: TestUser T
                    achievements:
                      test-achievement: 10
                  - userName: TestUser2
                    leaderboardName: TestUser2 T
                    achievements:
                      test-achievement: 5
                  - userName: TestUser3
                    leaderboardName: TestUser3 T
                    achievements:
                      test-achievement: 4.3
  /users/linkLandBased:
    post:
      tags:
        - authMethod
      summary: Link online and offline accounts
      description: |
        \
        This endpoint does the following GIG Logic calls:
        ```
        - /7790b88c-789d-48a3-b151-78fc47a41d99
        ```
      requestBody: null
      responses:
        default:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        error:
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: ERR_GIGCORE_OMNI_DETAILS_UPDATE_FAILED
  /users/listSecurityQuestions:
    post:
      tags:
        - method
      summary: Lists all Security Question Possibilities
      description: |
        Lists all Security Question Possibilities

        \
        This endpoint does the following GIG Core calls:
        ```
        - /SecurityQuestions
        ```
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    Id:
                      type: number
                      example: 1
                    Question:
                      type: string
                      example: Sample question
  /users/login:
    post:
      tags:
        - method
      summary: Log a user in GiG Magic.
      description: |
        Logs a user in GiG Magic.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Authentication/Login
        - /User
        - /IPWhois
        ```
        If the country is `SE` it also calls:
        ```
        - /v2/ResponsibleGaming/Limits/SetUserLimits
        ```
        If user has any pending action:
        ```
        - /User/AddKYCRequirements
        - /User/AddUserNote
        ```
      requestBody:
        content:
          application/json:
            schema:
              required:
                - password
                - usernameOrEmail
              type: object
              properties:
                password:
                  type: string
                  example: mypassword
                usernameOrEmail:
                  type: string
                  example: example@email.com
                getEndDateOfActiveResponsibleUser:
                  type: boolean
                  example: true
        required: true
      responses:
        default:
          description: If credentials are valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginResponse"
        550bfeedec7523c12b49f52d:
          description: If the credentials are invalid
          content:
            application/json:
              schema:
                type: string
                example: 550bfeedec7523c12b49f52d
        55b24e5a699bb5e0f9247932:
          description: If the account is blocked or the user is self-excluded
          content:
            application/json:
              schema:
                type: string
                example: 55b24e5a699bb5e0f9247932
        WITH_getEndDateOfActiveResponsibleUser:
          description: If getEndDateOfActiveResponsibleUser is set to true and the user
            has a timeout date
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    type: string
                    example: 550bfeedec7523c12b49f52d
                  exclusion:
                    type: object
                    properties:
                      blockReasonId:
                        type: number
                        example: 11
                      endDate:
                        type: string
                        example: 2019-01-18T13:15:51
  /users/loginV2:
    post:
      tags:
        - method
      summary: Log a user in GiG Magic v2.
      description: |
        Logs a user in GiG Magic v2.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /v2/authentication/Login
        - /User
        - /v2/User/{userId}
        - /IPWhois
        ```
        If the login type is KBA is calls
        ```
        - /Authentication/VerifyKba
         ```
        If the login type is OTP is calls
        ```
        - /Authentication/VerifyOtpCode
        ```
        If the country is not NL and there is a block reason it calls
        ```
        - /User/AddKYCRequirements
        ```
        If user has any pending action
        ```
        - /User/AddKYCRequirements
        - /User/AddUserNote
        ```
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: "#/components/schemas/REGULAR_LOGIN"
                - $ref: "#/components/schemas/OTP_LOGIN"
                - $ref: "#/components/schemas/KBA_LOGIN"
      responses:
        default:
          description: If credentials are valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginResponse"
        550bfeedec7523c12b49f52d:
          description: If the credentials are invalid
          content:
            application/json:
              schema:
                type: string
                example: 550bfeedec7523c12b49f52d
        55b24e5a699bb5e0f9247932:
          description: If the account is blocked or the user is self-excluded
          content:
            application/json:
              schema:
                type: string
                example: 55b24e5a699bb5e0f9247932
        WITH_getEndDateOfActiveResponsibleUser:
          description: If getEndDateOfActiveResponsibleUser is set to true and the user
            has a timeout date
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    type: string
                    example: 550bfeedec7523c12b49f52d
                  exclusion:
                    type: object
                    properties:
                      blockReasonId:
                        type: number
                        example: 11
                      endDate:
                        type: string
                        example: 2019-01-18T13:15:51
  /users/logout:
    post:
      tags:
        - authMethod
      summary: Logout a user.
      description: |
        Logouts a user.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Authentication/Logout
        ```
      responses:
        default:
          description: If the user had an active session
          content:
            application/json:
              schema:
                type: string
                example: Successfully logged out.
        557611bb3a9976371992dd78:
          description: If user session was already expired
          content:
            application/json:
              schema:
                type: string
                example: 557611bb3a9976371992dd78
  info:
    "0": U
    "1": K
    "2": " "
    "3": r
    "4": e
    "5": g
    "6": i
    "7": s
    "8": t
    "9": r
    "10": a
    "11": t
    "12": i
    "13": o
    "14": n
    "15": " "
    "16": e
    "17": n
    "18": d
    "19": p
    "20": o
    "21": i
    "22": n
    "23": t
    "24": n
    "25": t
    "26": o
    "27": i
    "28": n
    "29": t
    "30": p
    "31": o
    "32": i
    "33": n
    "34": t
    title: Magic API
    version: 1.0.0
  /users/membershipNumberRegistration:
    post:
      tags:
        - method
      summary: Register a player with a number
      description: >
        GiG will use the Membership number to look up the player on the Playtech
        Neon system.

        If the membership number is found, a new registration for this player,

        using the details found in Neon, is created.


        \

        This endpoint does the following GIG Logic calls:

        ```

        - /webhook/brand-Staging/Omni/8490db50-9443-4024-a920-4e51d79b7135

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                membershipNumber:
                  type: string
                  example: "2900936"
                password:
                  type: string
                  example: samplesPassword60!
                sourceOfBoarding:
                  type: string
                  example: REAL-TIME MIGRATION
                userConsents:
                  type: array
                  items:
                    type: object
                    properties:
                      consentId:
                        type: number
                        example: 348
                      name:
                        type: string
                        example: TERMS_AND_CONDITIONS
                      version:
                        type: number
                        example: 14
                      isMandatory:
                        type: boolean
                        example: true
                      consented:
                        type: boolean
                        example: true
                      consentedContents:
                        type: object
                        properties:
                          languageAlpha2Code:
                            type: string
                            example: en
                          header:
                            type: string
                            example: Terms and Conditions
                          content:
                            type: string
                            example: This is a summary
                mobilePrefix:
                  type: string
                  example: "+44"
                mobile:
                  type: string
                  example: "454654321"
              required:
                - membershipNumber
                - password
                - sourceOfBoarding
                - userConsents
                - mobilePrefix
                - mobile
      responses:
        Successful:
          description: Sucessful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  res:
                    type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      userId:
                        type: string
                        example: "60"
        Failed:
          description: Error when customer is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  res:
                    type: object
                    properties:
                      success:
                        type: boolean
                        example: false
                      errorMessage:
                        type: string
                        example: ERR_PLAYTECH_CUSTOMER_NOT_FOUND
  /users/notificationMessage:
    post:
      tags:
        - authMethod
      summary: Sends email with a content coming from frontend
      description: >
        This endpoint sends an email to a pre configured email address. To make
        it work you must be sure the SendGrid credentials are configured for the
        given brand. \

        The content can be plain text or a html.


        \

        Supported types:

        - `manualWithdrawal`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  example: manualWithdrawal
                content:
                  type: string
                  example: lorem ipsum
                contentHTML:
                  type: string
                  example: <b>lorem ipsum</b>
      responses:
        default:
          description: Success response
          content:
            text/plain:
              schema:
                type: string
                example: true
  /users/passwordSetOnce:
    post:
      tags:
        - authMethod
      summary: Set a user password
      description: |
        Sets a user password if the user didn't have one set before.
        Calls GIG Core `User/Password/SetOnce`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  description: The password to set
                  example: test-password
        required: true
      responses:
        default:
          description: There's no response from this endpoint if the password was set
            correctly.
        PASSWORD_REQUIRED:
          description: If the password is not sent
          content:
            application/json:
              schema:
                type: string
                example: PASSWORD_REQUIRED
        PASSWORD_HAS_ALREADY_BEEN_SET:
          description: If the user already has a password set
          content:
            application/json:
              schema:
                type: string
                example: PASSWORD_HAS_ALREADY_BEEN_SET
  /users/postSOWQ:
    post:
      tags:
        - authMethod
      summary: Saves the Source of Wealth Questionnaire user answers
      description: |
        You must send answers for all of the questions

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Kyc/PostSowQuestionnaire
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                SowQuestions:
                  type: array
                  items:
                    type: object
                    properties:
                      SowQuestionId:
                        type: number
                        example: 1
                      SowAnswerIds:
                        type: array
                        items:
                          type: number
                          example: 1
      responses:
        default:
          description: null
          content:
            text/plain:
              schema:
                type: string
                example: true
  /users/quickSignUp:
    post:
      tags:
        - method
      summary: Quick signup a user.
      description: |
        Registers and verifies a user on GiG Magic.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /IPWhois
        - /Countries/{alphaCode2}
        - Currencies/{code}
        - /v2/authentication/register
        - /v2/authentication/Verify/ActivationToken/Get
        - /v3/authentication/Verify/Email/{verificationCode}
        - /Authentication/Login
        - /User
        ```
        If the country is `SE` it also calls:
        ```
        - /v2/ResponsibleGaming/Limits/SetUserLimits
        ```
        If there is a subdivisionCode in the request it calls:
        ```
        - /v1/authentication/register/dge
        ```
        If user has any pending action:
        ```
        - /User/AddKYCRequirements
        - /User/AddUserNote
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                lang:
                  type: string
                  example: en
                authModel:
                  type: object
                  properties:
                    email:
                      type: string
                      example: email@example.com
                    emailVerificationURL:
                      type: string
                      example: https://www.superlenny.com
                    mobile:
                      type: string
                      example: "123456789"
                    mobilePrefix:
                      type: string
                      example: "+1"
                    username:
                      type: string
                      example: TestUser
                    acceptNewsEmail:
                      type: boolean
                      example: true
                    acceptSMSOffer:
                      type: boolean
                      example: true
                    address1:
                      type: string
                      example: Test address
                    alias:
                      type: string
                      example: Test
                    birthDate:
                      type: string
                      example: 1992-01-02
                    city:
                      type: string
                      example: Example
                    password:
                      type: string
                      example: passwordex
                    confirm:
                      type: string
                      example: passwordex
                    country:
                      type: string
                      example: ES
                    currency:
                      type: string
                      example: EUR
                    firstname:
                      type: string
                      example: Test
                    gender:
                      type: string
                      example: M
                    postalCode:
                      type: string
                      example: "12345"
                    region:
                      type: number
                      example: 0
                    securityAnswer:
                      type: string
                      example: security answer
                    securityQuestionID:
                      type: string
                      example: 1
                    surname:
                      type: string
                      example: Test
                    reference:
                      type: string
                      example: affiliate-id
        required: true
      responses:
        default:
          description: If the user was registered and verified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginResponse"
  /users/quickSignUpEMTA:
    post:
      tags:
        - method
      summary: Quickly Register a user with the EMTA legislation.
      description: |
        Registers a user on GiG Magic.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /IPWhois
        - /v2/UserRegistration/EMTA
        - /Consent/SaveUserConsents
        - /v2/authentication/Verify/ActivationToken/Get
        - /v3/authentication/Verify/Email/{verificationToken}
        - /Authentication/Login
        - /User
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                lang:
                  type: string
                  example: EN
                authModel:
                  type: object
                  properties:
                    firstName:
                      type: string
                      example: Alice
                    lastName:
                      type: string
                      example: Wonderland
                    email:
                      type: string
                      example: alice.wonderland@example.com
                    address1:
                      type: string
                      example: Roscus Lane
                    postalCode:
                      type: string
                      example: A3H 0S5
                    city:
                      type: string
                      example: Tallinn
                    gender:
                      type: string
                      enum:
                        - M
                        - F
                        - NA
                        - NK
                      example: F
                    username:
                      type: string
                      example: AliceWonder1816
                    password:
                      type: string
                      example: Str0ngPassw0rd@12
                    birthDate:
                      type: string
                      format: date-time
                      example: 1990-01-02T00:00:00
                    languageAlpha2Code:
                      type: string
                      example: EN
                    countryAlpha2Code:
                      type: string
                      example: EE
                    currency:
                      type: string
                      example: EUR
                    mobilePrefix:
                      type: string
                      example: "+372"
                    mobile:
                      type: string
                      example: "65699876"
                    securityQuestions:
                      type: array
                      items:
                        type: object
                        properties:
                          securityQuestion:
                            type: number
                            example: 1
                          securityAnswer:
                            type: string
                            example: sample string 3
                    nationalityCode:
                      type: string
                      example: EE
                    urlReferrer:
                      type: string
                      example: https://example.ee
                    reference:
                      type: string
                      example: ref1234
                    authenticationMethod:
                      type: number
                      example: 1
                    identificationNumber:
                      type: string
                      example: "24327782837"
                userConsents:
                  type: array
                  items:
                    type: object
                    properties:
                      consentId:
                        type: number
                        example: 1
                      version:
                        type: number
                        format: float
                        example: 14
                      consented:
                        type: boolean
                        example: true
      responses:
        default:
          description: If the user was registered and verified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginResponse"
  /users/quickSignUpV2:
    post:
      tags:
        - method
      summary: Quick signup a user v2.
      description: |
        Registers and verifies a user on GiG Magic.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Countries/{alphaCode2}
        - /Currencies/{code}
        - /v2/authentication/register
        - /v2/authentication/Verify/ActivationToken/Get
        - /v3/authentication/Verify/Email/{verificationCode}
        - /v2/authentication/Login
        - /User
        - /v2/User/{userId}
        - /IPWhois
        ```
        If the login type is KBA is calls
        ```
        - /Authentication/VerifyKba
         ```
        If the login type is OTP is calls
        ```
        - /Authentication/VerifyOtpCode
        ```
        If the country is not NL and there is a block reason it calls
        ```
        - /User/AddKYCRequirements
        ```
        If user has any pending action
        ```
        - /User/AddKYCRequirements
        - /User/AddUserNote
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                lang:
                  type: string
                  example: en
                authModel:
                  type: object
                  properties:
                    email:
                      type: string
                      example: Test_Super_04@example.com
                    username:
                      type: string
                      example: 28dc11f9-008b-4f57-a9af-049952a3bcd7
                    password:
                      type: string
                      example: P@$sword123!
                    firstname:
                      type: string
                      example: AAA
                    surname:
                      type: string
                      example: SuperTest4
                    gender:
                      type: string
                      example: M
                    birthDate:
                      type: string
                      example: 1980-04-02
                    address1:
                      type: string
                      example: Daisy Ln
                    postalCode:
                      type: string
                      example: "12345"
                    city:
                      type: string
                      example: Schenectady
                    country:
                      type: string
                      example: US
                    subdivisionCode:
                      type: string
                      example: US-NY
                    mobilePrefix:
                      type: string
                      example: "+1"
                    phonePrefix:
                      type: string
                      example: "+1"
                    mobile:
                      type: string
                      example: "7896542585"
                    phone:
                      type: string
                      example: "7896542585"
                    currency:
                      type: string
                      example: USD
                    acceptNewsEmail:
                      type: boolean
                      example: true
                    acceptSMSOffer:
                      type: boolean
                      example: false
                    securityQuestions:
                      type: array
                      items:
                        type: object
                        properties:
                          securityQuestion:
                            type: string
                            example: 1
                          securityAnswer:
                            type: string
                            example: Blue
                    affiliateMarker:
                      type: string
                      example: null
                    referrer:
                      type: string
                      example: affiliate-id
                    usersConsents:
                      type: object
                      properties:
                        consentId:
                          type: number
                          example: 1
                        version:
                          type: number
                          format: float
                          example: 1.2
                        consented:
                          type: boolean
                          example: true
        required: true
      responses:
        default:
          description: If the user was registered and verified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginResponse"
  /users/resetPassword:
    post:
      tags:
        - method
      summary: Change a user's forgotten password
      description: |
        Changes the user's forgotten password

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Authentication/ForgotPassword/Change
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: number
                  example: 1234
                password:
                  type: string
                  example: testpassword
        required: true
      responses:
        default:
          description: There's no response if the password was successfully changed
        INVALID_PASSWORD:
          description: If the password provided is invalid
          content:
            application/json:
              schema:
                type: string
                example: INVALID_PASSWORD
  /users/resetPasswordSMS:
    post:
      tags:
        - method
      summary: Change User's Forgotten Password
      description: |
        Change User's Forgotten Password by using a Mobile Verification Code

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Authentication/ForgotPassword/Change/sms
        ```
      requestBody:
        content:
          application/json:
            schema:
              required:
                - mobilePrefix
                - mobile
                - recoveryCode
                - password
              type: object
              properties:
                mobilePrefix:
                  type: string
                  example: "+44"
                mobile:
                  type: string
                  example: "123456789"
                recoveryCode:
                  type: string
                  example: "1234"
                password:
                  type: string
                  example: SecretPwd
      responses:
        default:
          description: if the provided data is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
  /users/resumeLogin:
    post:
      tags:
        - authMethod
      summary: Resumes a user's session.
      description: |
        Resume a user's session.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Authentication/IsLoggedIn
        - /User
        - /IPWhois
        ```
      responses:
        default:
          description: If session was resumed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginResponse"
        557611bb3a9976371992dd78:
          description: If the session is expired
          content:
            application/json:
              schema:
                type: string
                example: 557611bb3a9976371992dd78
  /users/resumeLoginV2:
    post:
      tags:
        - authMethod
      summary: Resumes a user's session v2.
      description: |
        Resume a user's session v2.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Authentication/IsLoggedIn
        - /User
        - /v2/User/{userId}
        - /IPWhois
        ```
      responses:
        default:
          description: If session was resumed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginResponse"
        557611bb3a9976371992dd78:
          description: If the session is expired
          content:
            application/json:
              schema:
                type: string
                example: 557611bb3a9976371992dd78
  /users/saveUserConsents:
    post:
      tags:
        - authMethod
      summary: Save user consents
      description: |
        Save user consents

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Consent/SaveUserConsents
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: number
                  example: 112450
                userConsents:
                  type: array
                  items:
                    type: object
                    properties:
                      consentId:
                        type: number
                        example: 4
                      version:
                        type: number
                        format: float
                        example: 4
                      consented:
                        type: boolean
                        example: true
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: boolean
                example: true
  /users/segmentHistory:
    post:
      tags:
        - private
      summary: Get segment history for a user
      description: Retrieves the segment history for a user with the given userName.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  description: User ID from whom we want to retrieve the segment history.
              required:
                - userName
      responses:
        "200":
          description: Successful response with segment history
          content:
            application/json:
              schema:
                type: object
                properties:
                  res:
                    type: array
                    items:
                      type: object
                      properties:
                        additions:
                          type: string
                          description: New segment ID
                        deletes:
                          type: integer
                          description: Before segment ID
                          nullable: true
                        current:
                          type: integer
                          description: Current segment ID
                        date:
                          type: integer
                          description: Unix timestamp representing the date of the segment history entry
                        reason:
                          type: string
                          description: Reason the change was done by
                        userName:
                          type: string
                          description: The user associated with the segment history entry
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  err:
                    type: string
                    description: Error messasge
      parameters:
        - in: header
          name: x-api-key
          description: API Key for authentication
          required: true
          schema:
            type: string
            example: 5437a7ebf44abc3faXXXXXXXX
        - in: header
          name: Content-Type
          description: Request Content Type
          required: true
          schema:
            type: string
            example: application/json
        - in: header
          name: x-api-sid
          description: Session ID for authentication
          required: true
          schema:
            type: string
            example: 64008f66dc3e9e4XXXXXXXXX
  /users/sendResetPwdEmailV2:
    post:
      tags:
        - method
      summary: Send a reset password email V2.
      description: |
        Sends a reset password email.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /v2/authentication/ForgotPassword
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                birthDate:
                  type: string
                  example: 1980-04-02
                email:
                  type: string
                  example: email@example.com
                securityQuestions:
                  type: array
                  items:
                    type: object
                    properties:
                      securityQuestion:
                        type: string
                        example: 1
                      securityAnswer:
                        type: string
                        example: Blue
        required: true
      responses:
        default:
          description: The response will be an empty object on success
          content:
            application/json:
              schema:
                type: object
                example: {}
        550bfeedec7523c12b49f52d:
          description: If the user is not found
          content:
            application/json:
              schema:
                type: string
                example: 550bfeedec7523c12b49f52d
  /users/sendResetPwdSMS:
    post:
      tags:
        - method
      summary: Send a mobile verification code
      description: >
        Attempts to send a mobile verification code to the mobile number
        specified in the arguments for reset password purposes


        \

        This endpoint does the following GIG Core calls:

        ```

        - /Authentication/ForgotPassword/sms

        ```
      requestBody:
        content:
          application/json:
            schema:
              required:
                - mobilePrefix
                - mobile
              type: object
              properties:
                mobilePrefix:
                  type: string
                  example: "+44"
                mobile:
                  type: string
                  example: "123456789"
      responses:
        default:
          description: if the provided data is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
  /users/sendSMS:
    post:
      tags:
        - authMethod
      summary: Send SMS for verification code
      description: >
        Sends an SMS with a verification code to the mobile number associated to
        the current authenticated user


        \

        This endpoint does the following GIG Core calls:

        ```

        - /authentication/sms/send

        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/sendSMSParams"
        required: true
      responses:
        default:
          $ref: "#/components/responses/sendSMSRes"
  /users/sessionTurnover:
    post:
      tags:
        - authMethod
      summary: Get user's session turnover.
      description: |
        Gets the user's session turnover.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /User/SessionTurnover
        ```
      responses:
        default:
          description: Session turnover
          content:
            application/json:
              schema:
                type: number
                example: "0"
  /users/setAuthenticationMethod:
    post:
      tags:
        - authMethod
      summary: Sets the authentication method for current authenticated user.
      description: >
        Sets the authentication method for current authenticated user.


        If method is already associated to the user then `false` is returned. If invalid authentication method is passed `REQUEST_DATA_INVALID` (Note: AuthMethod - `TwoFactorByEmail` is not currently supported) For any other error `UNKOWN_ERROR`


        \

        This endpoint does the following GIG Core calls:

        ```

        - /Authentication/SetAuthenticationMethod

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                authenticationMethod:
                  type: string
                  example: TWO_FACTOR_BY_EMAIL
      responses:
        default:
          description: null
          content:
            text/plain:
              schema:
                type: string
                example: true
  /users/setCommunicationPreferences:
    post:
      tags:
        - authMethod
      summary: Sets the authentication method for current authenticated user.
      description: >
        Sets the authentication method for current authenticated user.


        If method is already associated to the user then `false` is returned. If invalid authentication method is passed `REQUEST_DATA_INVALID` (Note: AuthMethod - `TwoFactorByEmail` is not currently supported) For any other error `UNKOWN_ERROR`


        \

        This endpoint does the following GIG Core calls:

        ```

        - /User/SetCommunicationPreference

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                allowsNewsAndOffers:
                  type: boolean
                  example: true
                allowsNewsAndOffersSms:
                  type: boolean
                  example: true
      responses:
        default:
          description: null
          content:
            text/plain:
              schema:
                type: string
                example: true
  /users/setIGCUserPreferences:
    post:
      tags:
        - authMethod
      summary: Update user preferences in IGC.
      description: |
        Updates the user's preferences in IGC.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /v2/User/Preferences/Update
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                PreferenceType:
                  type: string
                  example: 1
                Value:
                  type: boolean
                  example: false
        required: true
      responses:
        default:
          description: There's no response if the preference was updated correctly
        PREFERENCE_VALUE_INVALID:
          description: If value provided is not of the type required by the preference
            type (ex; expected boolean, but received a string)
          content:
            application/json:
              schema:
                type: string
                example: PREFERENCE_VALUE_INVALID
  /users/setLanguage:
    post:
      tags:
        - authMethod
      summary: Sets the language for the current authenticated user.
      description: |
        Sets the language for the current authenticated user.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /v2/User
        - /v2/User/Update
        - /Languages/${lang}
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                lang:
                  type: string
                  example: en
      responses:
        default:
          description: null
          content:
            text/plain:
              schema:
                type: string
                example: true
  /users/setOmniUserDetails:
    post:
      tags:
        - authMethod
      summary: Set user omni details.
      description: |
        Sets the user omni details
        \
        This endpoint does the following GIG Core calls:
        ```
        - OmniUserDetails/{userId}/Upsert
        ```
      requestBody:
        content:
          application-json:
            schema:
              type: object
              properties:
                externalPlayerId:
                  type: string
                sourceOfBoarding:
                  type: string
                externalStatus:
                  type: string
      responses:
        default:
          description: Response will contain boolean success property
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
  /users/setPreferences:
    post:
      tags:
        - authMethod
      summary: Set user preferences.
      description: |
        Sets properties on the user preferences. Stored as key-value

        \
        This endpoint does NOT call GIG Core API
      requestBody:
        content:
          application-json:
            schema:
              type: object
              additionalProperties: true
              example:
                fpp: 1
                photoID: PENDING_APPROVAL
                sourceOfWealthComplete: true
      responses:
        default:
          description: Response will always be empty
  /users/setRealityCheck:
    post:
      tags:
        - authMethod
      summary: Saves the reality check interval for the authenticated user
      description: |
        Value is in minutes

        \
        This endpoint does the following GIG Core calls:
        ```
        - /RealityCheck/SaveUserRealityCheck?interval={interval}
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: number
                  example: 120
      responses:
        default:
          description: null
          content:
            text/plain:
              schema:
                type: string
                example: true
  /users/setUserOnSiteMarketing:
    post:
      tags:
        - authMethod
      summary: |
        Update the notOnSiteMarketing value for the current user

        \
        This endpoint does NOT call GIG Core API
      description: null
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: SampleUserName
                notOnSiteMarketing:
                  type: boolean
                  example: true
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: boolean
                example: true
  /users/signUpAGCO:
    post:
      tags:
        - method
      summary: Register a user with the AGCO legislation.
      description: |
        Registers a user on GiG Magic.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /IPWhois
        - /v3/authentication/verify/sms
        - /v2/UserRegistration/agco
        - /Consent/SaveUserConsents
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                lang:
                  type: string
                  example: en
                authModel:
                  type: object
                  properties:
                    username:
                      type: string
                      example: noahJackson35
                    password:
                      type: string
                      example: samplesPassword60!
                    email:
                      type: string
                      example: noah.jackson@example.com
                    gender:
                      type: string
                      enum:
                        - M
                        - F
                        - NA
                        - NK
                      example: M
                    title:
                      type: string
                      example: Mr
                    firstName:
                      type: string
                      example: Noah
                    lastName:
                      type: string
                      example: Jackson
                    birthDate:
                      type: string
                      format: date
                      pattern: ^\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$
                      example: 2020-01-20
                    address1:
                      type: string
                      example: 4199 rue Boulay
                    address2:
                      type: string
                      example: Level 2
                    postalCode:
                      type: string
                      example: M4P 1A6
                    city:
                      type: string
                      example: St Thomas D'aquin
                    countryAlpha2Code:
                      type: string
                      example: CA
                    isoCodeSubdivision1:
                      type: string
                      example: CA-ON
                    languageAlpha2Code:
                      type: string
                      example: en
                    mobilePrefix:
                      type: string
                      example: 381
                    mobile:
                      type: string
                      example: 723568375
                    phonePrefix:
                      type: string
                      example: 381
                    phone:
                      type: string
                      example: 623568374
                    securityQuestions:
                      type: array
                      items:
                        type: object
                        properties:
                          securityQuestionId:
                            type: number
                            example: 1
                          securityAnswer:
                            type: string
                            example: Mercedes
                    middleName:
                      type: string
                      example: Pierre
                    countryOfResidenceAlpha2Code:
                      type: string
                      example: CA
                    occupationId:
                      type: number
                      example: 1
                    industryId:
                      type: number
                      example: 1
                    businessPhone:
                      type: string
                      example: 723454123
                    businessPhonePrefix:
                      type: string
                      example: 1
                    businessPhoneExtension:
                      type: string
                      example: 1
                    employerName:
                      type: string
                      example: The Jacksons
                    employerAddress1:
                      type: string
                      example: 4188 rue Joubelin
                    employerAddress2:
                      type: string
                      example: Level 3
                    employerCity:
                      type: string
                      example: Toronto
                    employerCountryAlpha2Code:
                      type: string
                      example: CA
                    employerIsoCodeSubdivision1:
                      type: string
                      example: CA-ON
                    employerPostalCode:
                      type: string
                      example: JOH 2A0
                    employerBusinessPhone:
                      type: string
                      example: 345323423423
                    employerBusinessPhonePrefix:
                      type: string
                      example: 387
                    employerBusinessPhoneExtension:
                      type: string
                      example: 387
                    citizenshipAlpha2Code:
                      type: string
                      example: CA
                    isPersonalAccount:
                      type: boolean
                      example: false
                    isPepOrHio:
                      type: boolean
                      example: false
                    pepSourceOfFundsId:
                      type: number
                      example: 1
                    pepSourceOfWealthId:
                      type: number
                      example: 1
                    pepOfficeOrPosition:
                      type: string
                      example: Minsiter
                    pepOrganizationName:
                      type: string
                      example: Government
                    pepCategoryId:
                      type: number
                      example: 1
                    pepNatureOfRelationship:
                      type: string
                      example: Important
                    urlReferrer:
                      type: string
                      example: www.example.com
                    reference:
                      type: string
                      example: 112456_76gf2d563fh56ffh8h6d7g667d44
                  required:
                    - verificationType
                    - username
                    - password
                    - email
                    - gender
                    - title
                    - firstName
                    - lastName
                    - birthDate
                    - address1
                    - address2
                    - postalCode
                    - city
                    - countryAlpha2Code
                    - isoCodeSubdivision1
                    - languageAlpha2Code
                    - mobilePrefix
                    - mobile
                    - securityQuestions
                    - occupationId
                    - industryId
                    - isPersonalAccount
                userConsents:
                  type: array
                  items:
                    type: object
                    properties:
                      consentId:
                        type: number
                        example: 1
                      version:
                        type: number
                        format: float
                        example: 1.2
                      consented:
                        type: boolean
                        example: true
                    required:
                      - consentId
                      - version
                      - consented
                geoPackage:
                  type: string
                  example: V/4WIIt5W2NddqLGUNO1RaVFq9WVu0blJQa1oZ+qrY4iDvpdozizseDfZhd17xGhRlmtydVhKHtRjg3aU2g67RUp105MsvSF9vTcQ7pj+p0nDsJ/1k4ZX4UZp+QXsE9kLJ1tok6epPhaNE0KneuepCAnnQYZczkrduV5/QllktmsyVboyogSUX2+4yxgFXHYStvxUC2StTyDSQ7/pNM/8tGEQvCOXw1y0ZUwD7qgdoMFxw8PGP9XevlKFAAVFTR9uMCEnYeOglNYGQb5rd8KVFnFNeZiiwPy57l0pqi7V2lLJggiTGfDixSMWopH5RTnvAS65Yn7WGNbgLC2Q0VpKo8d85WVHl7ZxA+jGYXwHL7Gf+Ok1Cg2O10PuBMHZQ+W0jfcfqCkTDTRpgKYn+8xshuM2P6Mgo+0OYYhYeldvkwLVhU4CkoWkJ2y595S2mywvrUJ1PgwB27EdYCAyLC3eOVWHYUHPzT4U6kNZ3TefAELGhpK9jdMddv4yrAYX4s75OeFdYPe7nnHRjwF8QtvOka0bWqKtn9Em0mVQs5HWSy3jaAoGQfPwrQcGY3YLk+td68uAr/L63ncNbOzqIe4ED6jti9+6eSv/5AoV3lwdLjp8J+uzp9SIYrPcNoDoEff5D7KtTy/PEWqHl2lOfctDCxRkS6vBANwSrEEcQvmyU/MeUojgQmnfmuH8FA0PYxzW0AzT44kZIqa3tlkc4ImdUx70jci1Py3RkFkPYHOQCUcfGe3ngQxgAOWP2zuEOsRVj18lQA0Y3NEbM49zetX3TKAG2Bfuk3sWAedopkvjBffM9axE83VMI6s8Dn9Y9iPfpCnu6tWdgIhGeeOxHdpgYLeZoZtuymIoioV/GBnp3R9CEfZI8W6CXeu5YNYXk1UywE2g4u4OgHSW3WUXMwnpdCCmlHb8Xr1jkHsFGCsRRVTqdewXkje1NVIeh5w6BjqmwLMFrAKj3Z+MdUdZjF4tPY3yqcZjtQumj4TKub8qHnWunw1ksH+F8/3DxcQkHclZom8Eir6F/dCuiyL+F8sLSGM+LlytZAMzAuXs+5gOtp6csdduF/FOuUWUoizV+piEMgaHB1+yFRxysZCVYck+KfJbze7DPQ2xrNjTNrcBBF9O+VTjgKbvPCQzfT+XPvwaPdPzZ4GMP2PlDzFfqqjtZM6ugkfSoSmc3lNzi+plpyJkRs7u5cffTYoH7bLgQ4ZhbmycisIkn58/hXhPhOPPXNgpNgxKh7h676kIZikTN9x9uyuLO1ZzWlWy8Xqnlfot9ame6dyIj3MXmbFD9D6KkfaL8OPoPAQkZ40E9taWwJ9zrPnoHVF8X2uePfbhuSHF3RXhWf21OYbtguMqB2/fwmj+IoSPZaB0VBASbwuFcGa4HARQsWjBo61dGM9ukUeUOhAy68DRITW8cS867TooCTC7udyuRFiSNOUjcczLchxLXuPaczVfOkRdl68IXzD6ZioOR7f9V2J4bZEfLzmeuFdbbx0PuDjfww1ip4s2xK4ppzBfbffcPHNjWIIgbPWvl8I4TbeYgxTG2BwJN/X8CM9U9GGjhlW4nWhkau/Zx4OD2xKmoHBo3vR+O9o5JI9DuIJ5RzJFJS4MGNBfYNtX9U57WrMINx8fvtKnPxo26BE+Mv/Hjneh0BnLoMC9oc9KjT6vNFa4TGZ1673q9HuosYUYXZ4H9+yLMiUOSuhdkzYIQJGHkSlUm12B3Uu6v1kX2o5f6kd1rT03mFSbhOSTkGDUn68jtjkMYOVLmjv/ZbJweg14J9ME4pZcETtUZqA
              required:
                - lang
                - authModel
                - userConsents
      responses:
        default:
          description: Sucess
          content:
            application/json:
              schema:
                type: object
                properties:
                  Data:
                    type: object
                    properties:
                      USER_ID:
                        type: string
                        example: 5170551
                  Errors:
                    type: array
                    items:
                      type: string
                    example: []
                  Success:
                    type: boolean
                    example: true
  /users/signUpDGE:
    post:
      tags:
        - method
      summary: Register a user with the DGE legislation.
      description: |
        Registers a user on GiG Magic.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /IPWhois
        - /v2/UserRegistration/dge
        - /Authentication/Verify/Email/Send
        - /Consent/SaveUserConsents
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                lang:
                  type: string
                  example: us
                authModel:
                  type: object
                  properties:
                    username:
                      type: string
                      example: TestUser
                    password:
                      type: string
                      example: Testing1!
                    email:
                      type: string
                      example: email@example.com
                    gender:
                      type: string
                      enum:
                        - M
                        - F
                        - NA
                        - NK
                      example: M
                    title:
                      type: string
                      example: Test
                    firstname:
                      type: string
                      example: Test
                    surname:
                      type: string
                      example: Test
                    birthDate:
                      type: string
                      example: 1992-01-02
                    address1:
                      type: string
                      example: Test address
                    address2:
                      type: string
                      example: Test address
                    city:
                      type: string
                      example: Example
                    subdivisionCode:
                      type: string
                      example: US-NJ
                    postalCode:
                      type: string
                      example: "12345"
                    currency:
                      type: string
                      example: USD
                    mobile:
                      type: string
                      example: "123456789"
                    mobilePrefix:
                      type: string
                      example: "+1"
                    phone:
                      type: string
                      example: "123456789"
                    phonePrefix:
                      type: string
                      example: "+1"
                    affiliateSourceID:
                      type: string
                      example: ""
                    affiliateClientUUID:
                      type: string
                      example: ""
                    ssnLastFour:
                      type: string
                      example: "1234"
                    urlReferrer:
                      type: string
                      example: www.example.com
                    reference:
                      type: string
                      example: 112456_76gf2d563fh56ffh8h6d7g667d44
                    securityQuestions:
                      type: array
                      items:
                        type: object
                        properties:
                          securityQuestion:
                            type: string
                            example: 1
                          securityAnswer:
                            type: string
                            example: one of the answers for the users security questions
                    nationalityCode:
                      type: string
                      example: US
                userConsents:
                  type: array
                  items:
                    type: object
                    properties:
                      consentId:
                        type: number
                        example: 1
                      version:
                        type: number
                        format: float
                        example: 1.2
                      consented:
                        type: boolean
                        example: true
        required: true
      responses:
        default:
          description: If the user was registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  USER_ID:
                    type: string
                    example: "4550581"
  /users/signUpEMTA:
    post:
      tags:
        - method
      summary: Register a user with the EMTA legislation.
      description: |
        Registers a user on GiG Magic.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /IPWhois
        - /v3/authentication/verify/sms
        - /v2/UserRegistration/EMTA
        - /Consent/SaveUserConsents
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                lang:
                  type: string
                  example: EN
                authModel:
                  type: object
                  properties:
                    firstName:
                      type: string
                      example: Alice
                    lastName:
                      type: string
                      example: Wonderland
                    email:
                      type: string
                      example: alice.wonderland@example.com
                    address1:
                      type: string
                      example: Roscus Lane
                    postalCode:
                      type: string
                      example: A3H 0S5
                    city:
                      type: string
                      example: Tallinn
                    gender:
                      type: string
                      enum:
                        - M
                        - F
                        - NA
                        - NK
                      example: F
                    username:
                      type: string
                      example: AliceWonder1816
                    password:
                      type: string
                      example: Str0ngPassw0rd@12
                    birthDate:
                      type: string
                      format: date-time
                      example: 1990-01-02T00:00:00
                    languageAlpha2Code:
                      type: string
                      example: EN
                    currency:
                      type: string
                      example: EUR
                    mobilePrefix:
                      type: string
                      example: "+372"
                    mobile:
                      type: string
                      example: "65699876"
                    securityQuestions:
                      type: array
                      items:
                        type: object
                        properties:
                          securityQuestion:
                            type: number
                            example: 1
                          securityAnswer:
                            type: string
                            example: sample string 3
                    nationalityCode:
                      type: string
                      example: EE
                    countryAlpha2Code:
                      type: string
                      example: EE
                    urlReferrer:
                      type: string
                      example: https://example.ee
                    reference:
                      type: string
                      example: ref1234
                    verificationTypeID:
                      type: number
                      example: 2
                    authenticationMethod:
                      type: number
                      example: 1
                    identificationNumber:
                      type: string
                      example: "24327782837"
                userConsents:
                  type: array
                  items:
                    type: object
                    properties:
                      consentId:
                        type: number
                        example: 1
                      version:
                        type: number
                        format: float
                        example: 14
                      consented:
                        type: boolean
                        example: true
      responses:
        default:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  USER_ID:
                    type: string
                    example: "4575667"
                  consented:
                    type: boolean
                    example: false
                  userId:
                    type: number
                    example: 4575667
  /users/signUpGST:
    post:
      tags:
        - method
      summary: Register a user with the GST legislation.
      description: |
        Registers a user on GiG Magic.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /IPWhois
        - /v3/authentication/verify/sms
        - /v2/UserRegistration/gst
        - /Consent/SaveUserConsents
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                lang:
                  type: string
                  example: en
                authModel:
                  type: object
                  properties:
                    verificationTypeID:
                      type: number
                      example: 1
                    mobileVerificationCode:
                      type: string
                      example: "12345"
                    email:
                      type: string
                      example: email@example.com
                    mobile:
                      type: string
                      example: "123456789"
                    mobilePrefix:
                      type: string
                      example: "+1"
                    phone:
                      type: string
                      example: "123456789"
                    phonePrefix:
                      type: string
                      example: "+1"
                    username:
                      type: string
                      example: TestUser
                    displayName:
                      type: string
                      example: TestUser 42
                    acceptNewsEmail:
                      type: boolean
                      example: true
                    acceptSMSOffer:
                      type: boolean
                      example: true
                    address1:
                      type: string
                      example: Test address
                    address2:
                      type: string
                      example: Test address
                    birthDate:
                      type: string
                      example: 1992-01-02
                    city:
                      type: string
                      example: Example
                    password:
                      type: string
                      example: passwordex
                    confirm:
                      type: string
                      example: passwordex
                    country:
                      type: string
                      example: ES
                    currency:
                      type: string
                      example: EUR
                    firstname:
                      type: string
                      example: Test
                    gender:
                      type: string
                      example: M
                    postalCode:
                      type: string
                      example: "12345"
                    region:
                      type: number
                      example: 0
                    securityAnswer:
                      type: string
                      example: security answer
                    securityQuestionID:
                      type: string
                      example: 1
                    surname:
                      type: string
                      example: Test
                    maidenName:
                      type: string
                      example: Test John
                    placeOfBirth:
                      type: string
                      example: berlin
                    nationalityCode:
                      type: string
                      example: DE
                    authenticationMethod:
                      required: false
                      type: string
                      example: TWO_FACTOR_BY_EMAIL
                    reference:
                      type: string
                      example: 112456_76gf2d563fh56ffh8h6d7g667d44
                userConsents:
                  type: array
                  items:
                    type: object
                    properties:
                      consentId:
                        type: number
                        example: 1
                      version:
                        type: number
                        format: float
                        example: 1.2
                      consented:
                        type: boolean
                        example: true
        required: true
      responses:
        default:
          description: If the user was registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  USER_ID:
                    type: string
                    example: "4550581"
        MOBILE_VERIFICATION_CODE_NULL_OR_EMPTY:
          description: This error is sent together with the SMS code (
            https://github.com/GiG/Core-Tech/issues/103#issuecomment-369598405 )
          content:
            application/json:
              schema:
                type: string
                example: MOBILE_VERIFICATION_CODE_NULL_OR_EMPTY
        MOBILE_AND_PREFIX_COMBINATION_ALREADY_REGISTERED:
          description: The combination provided is already registered
          content:
            application/json:
              schema:
                type: string
                example: MOBILE_AND_PREFIX_COMBINATION_ALREADY_REGISTERED
        MOBILE_MOBILE_VERIFICATION_CODE_COMBINATION_INVALID:
          description: The combination provided is invalid
          content:
            application/json:
              schema:
                type: string
                example: MOBILE_MOBILE_VERIFICATION_CODE_COMBINATION_INVALID
        SMS_TIMEOUT_HAS_NOT_EXPIRED:
          description: The previous SMS is still valid
          content:
            application/json:
              schema:
                type: string
                example: SMS_TIMEOUT_HAS_NOT_EXPIRED
  /users/signUpLOTBA:
    post:
      tags:
        - method
      summary: Register a user with the LOTBA legislation.
      description: |
        Registers a user on GiG Magic.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /IPWhois
        - /v3/authentication/verify/sms
        - /v2/UserRegistration/lotba
        - /Consent/SaveUserConsents
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                lang:
                  type: string
                  example: en
                authModel:
                  type: object
                  properties:
                    mobileVerificationCode:
                      type: string
                      example: "12345"
                    username:
                      type: string
                      example: TestUser
                    password:
                      type: string
                      example: passwordex
                    email:
                      type: string
                      example: email@example.com
                    gender:
                      type: string
                      enum:
                        - M
                        - F
                        - NA
                        - NK
                      example: M
                    firstname:
                      type: string
                      example: Test
                    surname:
                      type: string
                      example: Test
                    birthDate:
                      type: string
                      example: 1992-01-02
                    address1:
                      type: string
                      example: Test address
                    address2:
                      type: string
                      example: Test address
                    city:
                      type: string
                      example: Example
                    postalCode:
                      type: string
                      example: "12345"
                    currency:
                      type: string
                      example: EUR
                    mobile:
                      type: string
                      example: "123456789"
                    mobilePrefix:
                      type: string
                      example: "+1"
                    placeOfBirth:
                      type: string
                      example: Buenos Aires
                    occupationId:
                      type: number
                      example: 1
                    nationalityCode:
                      type: string
                      example: RA
                    isPep:
                      type: boolean
                      example: true
                    pepReason:
                      type: string
                      example: pep explanation
                    processingNumber:
                      type: string
                      example: "889345263"
                    maritalStatus:
                      type: string
                      enum:
                        - Married
                        - Unmarried
                        - Widow(er)
                        - Civil Union Partner
                        - Domestic Partner
                      example: Married
                    identificationKey:
                      type: string
                      example: 20-32934122-5
                    identificationNumber:
                      type: string
                      example: "32934122"
                    urlReferrer:
                      type: string
                      example: www.example.com
                    reference:
                      type: string
                      example: 112456_76gf2d563fh56ffh8h6d7g667d44
                userConsents:
                  type: array
                  items:
                    type: object
                    properties:
                      consentId:
                        type: number
                        example: 1
                      version:
                        type: number
                        format: float
                        example: 1.2
                      consented:
                        type: boolean
                        example: true
        required: true
      responses:
        default:
          description: If the user was registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  USER_ID:
                    type: string
                    example: "4550581"
        MOBILE_VERIFICATION_CODE_NULL_OR_EMPTY:
          description: This error is sent together with the SMS code
          content:
            application/json:
              schema:
                type: string
                example: MOBILE_VERIFICATION_CODE_NULL_OR_EMPTY
        MOBILE_AND_PREFIX_COMBINATION_ALREADY_REGISTERED:
          description: The combination provided is already registered
          content:
            application/json:
              schema:
                type: string
                example: MOBILE_AND_PREFIX_COMBINATION_ALREADY_REGISTERED
        MOBILE_MOBILE_VERIFICATION_CODE_COMBINATION_INVALID:
          description: The combination provided is invalid
          content:
            application/json:
              schema:
                type: string
                example: MOBILE_MOBILE_VERIFICATION_CODE_COMBINATION_INVALID
        SMS_TIMEOUT_HAS_NOT_EXPIRED:
          description: The previous SMS is still valid
          content:
            application/json:
              schema:
                type: string
                example: SMS_TIMEOUT_HAS_NOT_EXPIRED
  /users/signUpONJN:
    post:
      tags:
        - method
      summary: Register a user with the ONJN legislation.
      description: |
        Registers a user on GiG Magic.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /IPWhois
        - /v3/authentication/verify/sms
        - /v2/UserRegistration/onjn
        - /Consent/SaveUserConsents
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                lang:
                  type: string
                  example: en
                authModel:
                  type: object
                  properties:
                    firstName:
                      type: string
                      example: Bogdan
                    lastName:
                      type: string
                      example: Antonescu
                    birthDate:
                      type: string
                      format: date
                      pattern: ^\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$
                      example: 2020-01-20
                    email:
                      type: string
                      example: bogdan.antonescu@example.com
                    address1:
                      type: string
                      example: STR. COVASNA nr. 15 bl.
                    address2:
                      type: string
                      example: A3-B1 et 8 ap. 36
                    city:
                      type: string
                      example: Bucuresti
                    postalCode:
                      type: string
                      example: 41434
                    username:
                      type: string
                      example: b0gdanBucharest
                    password:
                      type: string
                      example: samplesPassword60!
                    nationalityAlpha2Code:
                      type: string
                      example: RO
                    birthRegionSubdivisionCode:
                      type: string
                      example: RO-B
                    mobilePrefix:
                      type: string
                      example: 40
                    mobile:
                      type: string
                      example: 723568375
                    securityQuestions:
                      type: array
                      items:
                        type: object
                        properties:
                          securityQuestionId:
                            type: number
                            example: 1
                          securityAnswer:
                            type: string
                            example: Mercedes
                    gender:
                      type: string
                      enum:
                        - M
                        - F
                        - NA
                        - NK
                      example: M
                    verificationType:
                      type: number
                      example: 2
                    authenticationMethod:
                      type: number
                      example: 1
                    currencyAlpha3Code:
                      type: string
                      example: RON
                    identificationNumber:
                      type: string
                      example: 1810524170090
                    title:
                      type: string
                      example: Mr
                    phone:
                      type: string
                      example: 723454123
                    phonePrefix:
                      type: string
                      example: 40
                    urlReferrer:
                      type: string
                      example: www.example.com
                    reference:
                      type: string
                      example: 112456_76gf2d563fh56ffh8h6d7g667d44
                  required:
                    - verificationType
                    - username
                    - password
                    - email
                    - gender
                    - firstName
                    - lastName
                    - birthDate
                    - address1
                    - postalCode
                    - city
                    - birthRegionSubdivisionCode
                    - currencyAlpha3Code
                    - identificationNumber
                    - nationalityAlpha2Code
                userConsents:
                  type: array
                  items:
                    type: object
                    properties:
                      consentId:
                        type: number
                        example: 1
                      version:
                        type: number
                        format: float
                        example: 1.2
                      consented:
                        type: boolean
                        example: true
                    required:
                      - consentId
                      - version
                      - consented
              required:
                - lang
                - authModel
                - userConsents
      responses:
        default:
          description: Sucess
          content:
            application/json:
              schema:
                type: object
                properties:
                  Data:
                    type: object
                    properties:
                      USER_ID:
                        type: string
                        example: 5170551
                  Errors:
                    type: array
                    items:
                      type: string
                    example: []
                  Success:
                    type: boolean
                    example: true
  /users/signUpPGCB:
    post:
      tags:
        - method
      summary: Register a user with the PGCB legislation.
      description: |
        Registers a user on GiG Magic.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /IPWhois
        - /v3/authentication/verify/sms
        - /v2/UserRegistration/PGCB
        - /Consent/SaveUserConsents
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                lang:
                  type: string
                  example: en
                authModel:
                  type: object
                  properties:
                    firstName:
                      type: string
                      example: Jon
                    lastName:
                      type: string
                      example: Jones
                    email:
                      type: string
                      example: jon.jones@example.com
                    address1:
                      type: string
                      example: 0669 Kuhic Trail
                    address2:
                      type: string
                      example: Floor 1
                    postalCode:
                      type: string
                      example: BN3 3YJ
                    city:
                      type: string
                      example: Brighton
                    gender:
                      type: string
                      enum:
                        - M
                        - F
                        - NA
                        - NK
                      example: M
                    username:
                      type: string
                      example: JonBonesJones
                    password:
                      type: string
                      example: Champi0n!2023
                    sexId:
                      type: number
                      example: 1
                    verificationTypeID:
                      type: number
                      example: 1
                    authenticationMethod:
                      type: number
                      example: 1
                    title:
                      type: string
                      example: Mr
                    ssnLast4:
                      type: string
                      example: 7589
                    birthDate:
                      type: string
                      format: date
                      pattern: ^\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$
                      example: 1980-12-07
                    languageAlpha2Code:
                      type: string
                      example: en
                    currency:
                      type: string
                      example: USD
                    mobilePrefix:
                      type: string
                      example: 44
                    mobile:
                      type: string
                      example: 723568375
                    phonePrefix:
                      type: string
                      example: 44
                    phone:
                      type: string
                      example: 723568375
                    securityQuestions:
                      type: array
                      items:
                        type: object
                        properties:
                          securityQuestionId:
                            type: number
                            example: 1
                          securityAnswer:
                            type: string
                            example: Mercedes
                    nationalityCode:
                      type: string
                      example: US
                    isoCodeSubdivision1:
                      type: string
                      example: US-PA
                    affiliateSourceID:
                      type: string
                      example: affiliate client ID
                    affiliateClientUUID:
                      type: string
                      example: affiliate client UUID
                    urlReferrer:
                      type: string
                      example: www.example.com
                    reference:
                      type: string
                      example: 112456_76gf2d563fh56ffh8h6d7g667d44
      responses:
        default:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  USER_ID:
                    type: string
                    example: "4575667"
                  consented:
                    type: boolean
                    example: false
                  userId:
                    type: number
                    example: 4575667
  /users/signUpUKGC:
    post:
      tags:
        - method
      summary: Register a user with the UKGC legislation.
      description: |
        Registers a user on GiG Magic.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /IPWhois
        - /v3/authentication/verify/sms
        - /v2/UserRegistration/UKGC
        - /Consent/SaveUserConsents
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                lang:
                  type: string
                  example: en
                authModel:
                  type: object
                  properties:
                    firstName:
                      type: string
                      example: Jon
                    lastName:
                      type: string
                      example: Jones
                    email:
                      type: string
                      example: jon.jones@example.com
                    address1:
                      type: string
                      example: 63 Blatchington Road
                    address2:
                      type: string
                      example: Floor 1
                    postalCode:
                      type: string
                      example: BN3 3YJ
                    city:
                      type: string
                      example: Brighton
                    gender:
                      type: string
                      enum:
                        - M
                        - F
                        - NA
                        - NK
                      example: M
                    username:
                      type: string
                      example: JonBonesJones
                    password:
                      type: string
                      example: Champi0n!2023
                    title:
                      type: string
                      example: Mr
                    ssnLast4:
                      type: string
                      example: KLM3
                    birthDate:
                      type: string
                      format: date
                      pattern: ^\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$
                      example: 2020-01-20
                    languageAlpha2Code:
                      type: string
                      example: en
                    currency:
                      type: string
                      example: GBP
                    mobilePrefix:
                      type: string
                      example: 44
                    mobile:
                      type: string
                      example: 723568375
                    phonePrefix:
                      type: string
                      example: 44
                    securityQuestions:
                      type: array
                      items:
                        type: object
                        properties:
                          securityQuestionId:
                            type: number
                            example: 1
                          securityAnswer:
                            type: string
                            example: Mercedes
                    nationalityCode:
                      type: string
                      example: GB
                    isoCodeSubdivision1:
                      type: string
                      example: GB-ENG
                    placeOfBirth:
                      type: string
                      example: London
                    occupationId:
                      type: number
                      example: 1
                    urlReferrer:
                      type: string
                      example: www.example.com
                    reference:
                      type: string
                      example: 112456_76gf2d563fh56ffh8h6d7g667d44
      responses:
        default:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  USER_ID:
                    type: string
                    example: "4575667"
                  consented:
                    type: boolean
                    example: false
                  userId:
                    type: number
                    example: 4575667
  /users/signUpV2:
    post:
      tags:
        - method
      summary: Register a user v2.
      description: |
        Registers a user on GiG Magic.

        \
        This endpoint does the following GIG Core calls:
        ```
        - /IPWhois
        - /v3/authentication/verify/sms
        - /Countries/${countryCode}
        - /Currencies/${currencyCode}
        - /v2/authentication/register
        - /Consent/SaveUserConsents
        ```
        If there is subdivisionCode it calls:
        ```
        - /v1/authentication/register/dge
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                lang:
                  type: string
                  example: en
                authModel:
                  type: object
                  properties:
                    verificationTypeID:
                      type: number
                      example: 1
                    mobileVerificationCode:
                      type: string
                      example: "12345"
                    email:
                      type: string
                      example: email@example.com
                    mobile:
                      type: string
                      example: "123456789"
                    mobilePrefix:
                      type: string
                      example: "+1"
                    username:
                      type: string
                      example: TestUser
                    acceptNewsEmail:
                      type: boolean
                      example: true
                    acceptSMSOffer:
                      type: boolean
                      example: true
                    address1:
                      type: string
                      example: Test address
                    alias:
                      type: string
                      example: Test
                    birthDate:
                      type: string
                      example: 1992-01-02
                    city:
                      type: string
                      example: Example
                    password:
                      type: string
                      example: passwordex
                    confirm:
                      type: string
                      example: passwordex
                    country:
                      type: string
                      example: ES
                    currency:
                      type: string
                      example: EUR
                    firstname:
                      type: string
                      example: Test
                    gender:
                      type: string
                      example: M
                    postalCode:
                      type: string
                      example: "12345"
                    region:
                      type: number
                      example: 0
                    securityAnswer:
                      type: string
                      example: security answer
                    securityQuestionID:
                      type: string
                      example: 1
                    surname:
                      type: string
                      example: Test
                    authenticationMethod:
                      required: false
                      type: string
                      example: TWO_FACTOR_BY_EMAIL
                    urlReferrer:
                      type: string
                      example: www.example.com
                    reference:
                      type: string
                      example: 112456_76gf2d563fh56ffh8h6d7g667d44
                    userAdditionalFields:
                      type: object
                      properties:
                        iban:
                          type: string
                          example: FR76 3000 6000 0112 3456 7890 189
                        bankID:
                          type: number
                          example: 123
                        socialSecurityNumber:
                          type: string
                          example: ssn
                userConsents:
                  type: array
                  items:
                    type: object
                    properties:
                      consentId:
                        type: number
                        example: 1
                      version:
                        type: number
                        format: float
                        example: 1.2
                      consented:
                        type: boolean
                        example: true
        required: true
      responses:
        default:
          description: If the user was registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  USER_ID:
                    type: string
                    example: "4550581"
        MOBILE_VERIFICATION_CODE_NULL_OR_EMPTY:
          description: This error is sent together with the SMS code (
            https://github.com/GiG/Core-Tech/issues/103#issuecomment-369598405 )
          content:
            application/json:
              schema:
                type: string
                example: MOBILE_VERIFICATION_CODE_NULL_OR_EMPTY
        MOBILE_AND_PREFIX_COMBINATION_ALREADY_REGISTERED:
          description: The combination provided is already registered
          content:
            application/json:
              schema:
                type: string
                example: MOBILE_AND_PREFIX_COMBINATION_ALREADY_REGISTERED
        MOBILE_MOBILE_VERIFICATION_CODE_COMBINATION_INVALID:
          description: The combination provided is invalid
          content:
            application/json:
              schema:
                type: string
                example: MOBILE_MOBILE_VERIFICATION_CODE_COMBINATION_INVALID
        SMS_TIMEOUT_HAS_NOT_EXPIRED:
          description: The previous SMS is still valid
          content:
            application/json:
              schema:
                type: string
                example: SMS_TIMEOUT_HAS_NOT_EXPIRED
  /users/submitKBAQuestionnaire:
    post:
      tags:
        - authMethod
      summary: Check if the KBA questions are answered correctly
      description: |
        Check if the KBA questions are answered correctly

        \
        This endpoint does the following GIG Core calls:
        ```
        - /v2/Kyc/VerifyKBAQuestions
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                answeredQuestionnaire:
                  type: object
                  properties:
                    questionAnswer:
                      type: array
                      items:
                        properties:
                          questionId:
                            type: string
                          questionText:
                            type: string
                          answerId:
                            type: string
                          answerText:
                            type: string
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
                    example: true
                  scanVerifyURL:
                    type: string
                    example: www.url.com
                  expiryTime:
                    type: string
                    example: 0001-01-01T00:00:00
  /users/updateDetailFromCMS:
    post:
      summary: Update user details from CMS
      description: Updates user details for a given userName from the CMS.
      tags:
        - private
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  description: User ID of the user whose details are to be updated from CMS.
                segment:
                  type: integer
                  description: Segment ID to update for the user.
                excludeFeed:
                  type: boolean
                  description: Flag to exclude feed for the updated user.
                reason:
                  type: string
                  description: Reason for the update.
              required:
                - userName
                - segment
                - excludeFeed
                - reason
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  res:
                    type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  err:
                    type: string
                    description: Error message
      parameters:
        - in: header
          name: x-api-key
          description: API Key for authentication
          required: true
          schema:
            type: string
            example: 5437a7ebf44abc3fa8422776
        - in: header
          name: Content-Type
          description: Request Content Type
          required: true
          schema:
            type: string
            example: application/json
        - in: header
          name: x-api-sid
          description: Session ID for authentication
          required: true
          schema:
            type: string
            example: 64008f66dc3e9e46f46722fa
  /users/updateProfile:
    post:
      tags:
        - authMethod
      summary: Updates the user profile.
      description: >
        Updates the user profile, changing ALL the fields with the values
        required on the request body.


        \

        This endpoint does the following GIG Core calls:

        ```

        - /User/Update

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                address1:
                  type: string
                  example: Test address
                address2:
                  type: string
                  example: Test address
                postalCode:
                  type: string
                  example: "1234"
                city:
                  type: string
                  example: London
                mobilePrefix:
                  type: string
                  example: "+34"
                mobile:
                  type: string
                  example: "123456789"
                phonePrefix:
                  type: string
                  example: "+34"
                phone:
                  type: string
                  example: "987654321"
                language:
                  type: string
                  example: English
        required: true
      responses:
        default:
          description: The response will always be true if the call succeeded
  /users/updateProfileDge:
    post:
      tags:
        - authMethod
      summary: Updates the user profile (v3).
      description: >
        Updates the user profile, changing ALL the fields with the values
        required on the request body.

        This new core endpoint validate the used details with a third party provider (AgeCheck) 

        and if the validation on the third party fails, an attempt counter is increased. If the maximum 

        number of retry is reached, an error will returned and the user has to go the manual verification process.


        \

        This endpoint does the following GIG Core calls:

        ```

        - /UserDetails/Dge/Update

        - /Countries/{countryCode}

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                address1:
                  type: string
                  example: Avenida de Toros 125
                address2:
                  type: string
                  example: Calle del Carmen 10
                postalCode:
                  type: string
                  example: "68745"
                city:
                  type: string
                  example: London
                mobilePrefix:
                  type: string
                  example: "+34"
                mobile:
                  type: string
                  example: "123456789"
                phonePrefix:
                  type: string
                  example: "+34"
                phone:
                  type: string
                  example: "987654321"
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Lennon
                birthDate:
                  type: string
                  example: 1991-08-10
                country:
                  type: string
                  example: US
                gender:
                  type: string
                  example: M
                language:
                  type: string
                  example: English
                languageAlpha2Code:
                  type: string
                  example: EN
                ssnLastFour:
                  type: string
                  example: 4568
        required: true
      responses:
        default:
          description: The response will always be true if the call succeeded
  /users/updateProfilePgcb:
    post:
      tags:
        - authMethod
      summary: Updates the user profile for PGCB legislation.
      description: >
        Updates the user profile, changing ALL the fields with the values
        required on the request body.

        This new core endpoint validate the used details with a third party provider (AgeCheck) 

        and if the validation on the third party fails, an attempt counter is increased. If the maximum 

        number of retry is reached, an error will returned and the user has to go the manual verification process.


        \

        This endpoint does the following GIG Core calls:

        ```

        - /UserDetails/Pgcb/Update

        - /Countries/{countryCode}

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                address1:
                  type: string
                  example: Avenida de Toros 125
                address2:
                  type: string
                  example: Calle del Carmen 10
                postalCode:
                  type: string
                  example: "68745"
                city:
                  type: string
                  example: London
                mobilePrefix:
                  type: string
                  example: "+34"
                mobile:
                  type: string
                  example: "123456789"
                phonePrefix:
                  type: string
                  example: "+34"
                phone:
                  type: string
                  example: "987654321"
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Lennon
                birthDate:
                  type: string
                  example: 1991-08-10
                country:
                  type: string
                  example: US
                gender:
                  type: string
                  example: M
                language:
                  type: string
                  example: English
                languageAlpha2Code:
                  type: string
                  example: EN
                ssnLastFour:
                  type: string
                  example: 4568
        required: true
      responses:
        default:
          description: if the provided data is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        ACCOUNT_BLOCKED:
          description: If the account is blocked or the user is self-excluded
          content:
            application/json:
              schema:
                type: oject
                properties:
                  err:
                    type: string
                    example: 55b24e5a699bb5e0f9247932
  /users/updateProfileV2:
    post:
      tags:
        - authMethod
      summary: Updates the user profile (v2).
      description: >
        Updates the user profile, changing ALL the fields with the values
        required on the request body.


        `verificationCode` only becomes mandatory if the setting "IsSmsVerificationValidatorEnabled" value is set to true in Core BO.

        \

        This endpoint does the following GIG Core calls:

        ```

        - /v2/User/Update

        - /Currencies

        ```

        If BYPASS_2FA flag turned on

        ```

        - /User/GetKycApprovalTypes

        - /User/GetKycApprovalStatuses

        - /User/GetKycStatus

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                address1:
                  type: string
                  example: Test address
                address2:
                  type: string
                  example: Test address
                subdivisionId:
                  type: string
                  example: 87ded08f-7a02-469f-8b8c-6f024a1fccbf
                postalCode:
                  type: string
                  example: "1234"
                city:
                  type: string
                  example: London
                mobilePrefix:
                  type: string
                  example: "+34"
                mobile:
                  type: string
                  example: "123456789"
                phonePrefix:
                  type: string
                  example: "+34"
                phone:
                  type: string
                  example: "987654321"
                firstName:
                  type: string
                  example: Test
                lastName:
                  type: string
                  example: Test
                birthDate:
                  type: string
                  example: 1991-08-10
                country:
                  type: string
                  example: US
                gender:
                  type: string
                  example: F
                language:
                  type: string
                  example: English
                verificationCode:
                  type: string
                  example: "0157"
        required: true
      responses:
        default:
          description: The response will always be true if the call succeeded
  /users/updateProfileV3:
    post:
      tags:
        - authMethod
      summary: Updates the user profile (v3).
      description: >
        Updates the user profile, changing ALL the fields with the values
        required on the request body.

        This new core endpoint validate the used details with a third party provider (AgeCheck) 

        and if the validation on the third party fails, an attempt counter is increased. If the maximum 

        number of retry is reached, an error will returned and the user has to go the manual verification process.


        \

        This endpoint does the following GIG Core calls:

        ```

        - /v3/User/Update

        - /Countries/{countryCode}

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                address1:
                  type: string
                  example: Avenida de Toros 125
                address2:
                  type: string
                  example: Calle del Carmen 10
                postalCode:
                  type: string
                  example: "68745"
                city:
                  type: string
                  example: London
                mobilePrefix:
                  type: string
                  example: "+34"
                mobile:
                  type: string
                  example: "123456789"
                phonePrefix:
                  type: string
                  example: "+34"
                phone:
                  type: string
                  example: "987654321"
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Lennon
                birthDate:
                  type: string
                  example: 1991-08-10
                country:
                  type: string
                  example: US
                gender:
                  type: string
                  example: M
                language:
                  type: string
                  example: English
        required: true
      responses:
        default:
          description: The response will always be true if the call succeeded
  /users/updateSSN:
    post:
      tags:
        - authMethod
      summary: Update the SSN or ITIN information
      description: |
        Update the SSN or ITIN information

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Kyc/dge/{userId}/updateSsn
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ssn:
                  type: string
                  example: "123456789"
        required: true
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: object
                properties:
                  ssnUpdated:
                    type: boolean
                    example: false
                  ssnVerified:
                    type: boolean
                    example: false
  /users/userConsents:
    post:
      tags:
        - authMethod
      summary: Gets list of user consents with content and user's acceptence
      description: |
        Gets list of user consents with content and user's acceptence

        \
        This endpoint does the following GIG Core calls:
        ```
        - /Consent/UserConsents
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                languageAlpha2Code:
                  type: string
                  example: UK
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: number
                    example: 114630
                  userConsents:
                    type: array
                    items:
                      type: object
                      properties:
                        consentId:
                          type: number
                          example: 1
                        name:
                          type: string
                          example: Sample name
                        version:
                          type: number
                          format: float
                          example: 4
                        isMandatory:
                          type: boolean
                          example: true
                        consented:
                          type: boolean
                          example: true
                        consentContents:
                          type: array
                          items:
                            type: object
                            properties:
                              languageAlpha2Code:
                                type: string
                                example: DE
                              header:
                                type: string
                                example: Sample header
                              content:
                                type: string
                                example: Sample content
  /users/userPendingConsents:
    post:
      tags:
        - authMethod
      summary: Gets mandatory consents with content which user need to consent to by
        language
      description: >
        Gets mandatory consents with content which user need to consent to by
        language


        \

        This endpoint does the following GIG Core calls:

        ```

        - /Consent/UserPendingConsents

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                languageAlpha2Code:
                  type: string
                  example: UK
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: number
                    example: 114630
                  userConsents:
                    type: array
                    items:
                      type: object
                      properties:
                        consentId:
                          type: number
                          example: 1
                        name:
                          type: string
                          example: Sample name
                        version:
                          type: number
                          format: float
                          example: 4
                        isMandatory:
                          type: boolean
                          example: true
                        consented:
                          type: boolean
                          example: true
                        consentContents:
                          type: array
                          items:
                            type: object
                            properties:
                              languageAlpha2Code:
                                type: string
                                example: DE
                              header:
                                type: string
                                example: Sample header
                              content:
                                type: string
                                example: Sample content
  /users/vendorAdminGetBalance:
    post:
      tags:
        - authMethod
      summary: Gets balance at vendor's end
      description: |
        Gets balance at vendor's end

        \
        This endpoint does the following GIG Core calls:
        ```
        - /VendorAdmin/GetBalance
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentTypeId:
                  type: number
                  example: 1
                paymentMethodId:
                  type: number
                  example: 2
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    format: float
                    example: 1
                  vendorErrors:
                    type: array
                    items:
                      type: string
                      example: Sample error
  /users/verifyEmail:
    post:
      tags:
        - authMethod
      summary: Verify user email.
      description: |
        Verifies the user email.

        \
        This endpoint does the following GIG Core calls
        ```
        - /v3/authentication/Verify/Email/${verificationToken}
        - /User
        - /IPWhois
        ```
        If the country is `SE` it also calls:
        ```
         - /v2/ResponsibleGaming/Limits/SetUserLimits
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  example: c3ebbb40-2d32-4f46-bcc6-0a676e3f6f1c
                geoPackage:
                  type: string
                  required: false
                  example: 0L+vFKKm74Dsz/...cw+OSYM7g==
                  description: Encoded token from GeoComply (if feature is enabled)
        required: true
      responses:
        default:
          description: If the key provided is valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginResponse"
  /users/verifySSN:
    post:
      tags:
        - authMethod
      summary: Uses the last 4 digits of the social security number to verify the player
      description: >
        Uses the last 4 digits of the social security number to verify the
        player


        \

        This endpoint does the following GIG Core calls:

        ```

        - /Kyc/VerifySocialSecurityNumber

        ```
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              example: "1234"
      responses:
        default:
          description: null
          content:
            application/json:
              schema:
                type: object
                properties:
                  SsnVerified:
                    type: boolean
                    example: true
  /users/verifyWithDataZoo:
    post:
      tags:
        - authMethod
      summary: Verify a user with DataZoo
      description: >
        Verifies the current user's identity with the driving license
        information.


        \

        This endpoint does the following GIG Core calls:

        ```

        - /User

        - /User/AddUserNote?note={note}

        - /User/KYC/RemoveDocumentRequest/{documentToRemove}

        ```
      requestBody:
        content:
          application/json:
            schema:
              required:
                - driversLicenceNo
                - driversLicenceVersion
              type: object
              properties:
                driversLicenceNo:
                  type: string
                  example: DB512036
                driversLicenceVersion:
                  type: string
                  example: "001"
      responses:
        default:
          description: if the provided data is valid
          content:
            application/json:
              schema:
                type: boolean
                example: true
components:
  schemas:
    authenticateWithChallengeTokenParams:
      type: object
      required:
        - challengeToken
      properties:
        challengeToken:
          type: string
          description: The challenge token provided by GiGCore.
          example: a12947b8-3fe1-4b16-84cf-0074c19dbfa7
    authenticateWithChallengeTokenPayload:
      type: object
      properties:
        isCompleted:
          type: boolean
          example: false
        userName:
          type: string
          example: testUser45
        userId:
          type: number
          example: 54316
    IAmlUploadedFile:
      type: object
      properties:
        kycId:
          type: number
        statusId:
          type: number
        statusMessage:
          type: string
        reasonText:
          type: string
        dateUploaded:
          type: string
        helpText:
          type: string
        sowSupportDocType:
          type: string
        statusText:
          $ref: "#/components/schemas/IAmlStatuses"
    IAmlUploadedFiles:
      type: array
      $ref: "#/components/schemas/IAmlUploadedFile"
    IAmlStatuses:
      type: string
      enum:
        - Processing
        - Pending
        - NotSet
    getAMLStatusPayload:
      type: object
      properties:
        status:
          type: object
          properties:
            photoID:
              $ref: "#/components/schemas/IAmlStatuses"
            address:
              $ref: "#/components/schemas/IAmlStatuses"
            payment:
              $ref: "#/components/schemas/IAmlStatuses"
            SOWQ:
              $ref: "#/components/schemas/IAmlStatuses"
            SOWD:
              $ref: "#/components/schemas/IAmlStatuses"
            SOF:
              $ref: "#/components/schemas/IAmlStatuses"
            KBA:
              $ref: "#/components/schemas/IAmlStatuses"
            SV:
              $ref: "#/components/schemas/IAmlStatuses"
        history:
          type: object
          properties:
            photoId:
              $ref: "#/components/schemas/IAmlUploadedFiles"
            address:
              $ref: "#/components/schemas/IAmlUploadedFiles"
            payment:
              $ref: "#/components/schemas/IAmlUploadedFiles"
            KYCApproval:
              $ref: "#/components/schemas/IAmlUploadedFiles"
            SOWQ:
              $ref: "#/components/schemas/IAmlUploadedFiles"
            SOWD:
              $ref: "#/components/schemas/IAmlUploadedFiles"
            SOF:
              $ref: "#/components/schemas/IAmlUploadedFiles"
            KBA:
              $ref: "#/components/schemas/IAmlUploadedFiles"
            SV:
              $ref: "#/components/schemas/IAmlUploadedFiles"
        uploadCounter:
          type: object
          properties:
            photoId:
              type: number
            address:
              type: number
            payment:
              type: number
        uploadLimit:
          type: object
          properties:
            photoID:
              type: number
            address:
              type: number
            payment:
              type: number
        bankIdBlocked:
          type: boolean
          example: false
    DocumentStatus:
      type: string
      enum:
        - PENDING
        - PROCESSING
        - APPROVED
    getAmlVerificationStatusPayload:
      type: object
      properties:
        SOWQ:
          description: Depending on request status the SOW questionnaire will be populated
            with the status. If none is given then SOWQ has not been requested.
          type: object
          nullable: true
          $ref: "#/components/schemas/DocumentStatus"
        SOWD:
          description: Status for each of the source of wealth supporting documentation
            required. If none is given then SOWQ has not been requested.
          type: object
          nullable: true
          additionalProperties:
            $ref: "#/components/schemas/DocumentStatus"
        SOF:
          description: Source of funds documents requested. If none is given then SOF has
            not been requested.
          type: object
          nullable: true
          $ref: "#/components/schemas/DocumentStatus"
    getBankIdiFrameDetailsPayload:
      type: object
      properties:
        success:
          type: boolean
        redirectOutput:
          type: object
          properties:
            htlm:
              type: string
            url:
              type: string
              example: https://test.trustly.com/_/orderclient.php?SessionID=f77fd78e-8611-4196-8424-87a5148cddb6&OrderID=2202740410&Locale=sv_SE
            method:
              type: string
              example: GET
            container:
              type: string
              example: iframe
            parameters:
              type: object
            height:
              type: number
              example: 750
            width:
              type: number
              example: 600
    getGameSessionSummaryPayload:
      type: object
      properties:
        res:
          type: object
          properties:
            sessionStart:
              type: string
              format: date-time
            betsPlaced:
              type: number
              example: 1.1
            betWins:
              type: number
              example: 1.1
    DocumentVerificationStatus:
      type: string
      enum:
        - PENDING
        - PROCESSING
        - APPROVED
        - REJECTED
    kycDocumentRequestParams:
      type: object
      properties:
        documentType:
          type: number
          example: 1
    kycDocumentRequestPayload:
      type: string
      nullable: true
      example: null
    REGULAR_LOGIN:
      type: object
      properties:
        password:
          type: string
          example: mypassword
        usernameOrEmail:
          type: string
          example: example@email.com
        getEndDateOfActiveResponsibleUser:
          type: boolean
          example: false
        geoPackage:
          type: string
          example: V/4WIIt5W2NddqLGUNO1RaVFq9WVu0blJQa1oZ+qrY4iDvpdozizseDfZhd17xGhRlmtydVhKHtRjg3aU2g67RUp105MsvSF9vTcQ7pj+p0nDsJ/1k4ZX4UZp+QXsE9kLJ1tok6epPhaNE0KneuepCAnnQYZczkrduV5/QllktmsyVboyogSUX2+4yxgFXHYStvxUC2StTyDSQ7/pNM/8tGEQvCOXw1y0ZUwD7qgdoMFxw8PGP9XevlKFAAVFTR9uMCEnYeOglNYGQb5rd8KVFnFNeZiiwPy57l0pqi7V2lLJggiTGfDixSMWopH5RTnvAS65Yn7WGNbgLC2Q0VpKo8d85WVHl7ZxA+jGYXwHL7Gf+Ok1Cg2O10PuBMHZQ+W0jfcfqCkTDTRpgKYn+8xshuM2P6Mgo+0OYYhYeldvkwLVhU4CkoWkJ2y595S2mywvrUJ1PgwB27EdYCAyLC3eOVWHYUHPzT4U6kNZ3TefAELGhpK9jdMddv4yrAYX4s75OeFdYPe7nnHRjwF8QtvOka0bWqKtn9Em0mVQs5HWSy3jaAoGQfPwrQcGY3YLk+td68uAr/L63ncNbOzqIe4ED6jti9+6eSv/5AoV3lwdLjp8J+uzp9SIYrPcNoDoEff5D7KtTy/PEWqHl2lOfctDCxRkS6vBANwSrEEcQvmyU/MeUojgQmnfmuH8FA0PYxzW0AzT44kZIqa3tlkc4ImdUx70jci1Py3RkFkPYHOQCUcfGe3ngQxgAOWP2zuEOsRVj18lQA0Y3NEbM49zetX3TKAG2Bfuk3sWAedopkvjBffM9axE83VMI6s8Dn9Y9iPfpCnu6tWdgIhGeeOxHdpgYLeZoZtuymIoioV/GBnp3R9CEfZI8W6CXeu5YNYXk1UywE2g4u4OgHSW3WUXMwnpdCCmlHb8Xr1jkHsFGCsRRVTqdewXkje1NVIeh5w6BjqmwLMFrAKj3Z+MdUdZjF4tPY3yqcZjtQumj4TKub8qHnWunw1ksH+F8/3DxcQkHclZom8Eir6F/dCuiyL+F8sLSGM+LlytZAMzAuXs+5gOtp6csdduF/FOuUWUoizV+piEMgaHB1+yFRxysZCVYck+KfJbze7DPQ2xrNjTNrcBBF9O+VTjgKbvPCQzfT+XPvwaPdPzZ4GMP2PlDzFfqqjtZM6ugkfSoSmc3lNzi+plpyJkRs7u5cffTYoH7bLgQ4ZhbmycisIkn58/hXhPhOPPXNgpNgxKh7h676kIZikTN9x9uyuLO1ZzWlWy8Xqnlfot9ame6dyIj3MXmbFD9D6KkfaL8OPoPAQkZ40E9taWwJ9zrPnoHVF8X2uePfbhuSHF3RXhWf21OYbtguMqB2/fwmj+IoSPZaB0VBASbwuFcGa4HARQsWjBo61dGM9ukUeUOhAy68DRITW8cS867TooCTC7udyuRFiSNOUjcczLchxLXuPaczVfOkRdl68IXzD6ZioOR7f9V2J4bZEfLzmeuFdbbx0PuDjfww1ip4s2xK4ppzBfbffcPHNjWIIgbPWvl8I4TbeYgxTG2BwJN/X8CM9U9GGjhlW4nWhkau/Zx4OD2xKmoHBo3vR+O9o5JI9DuIJ5RzJFJS4MGNBfYNtX9U57WrMINx8fvtKnPxo26BE+Mv/Hjneh0BnLoMC9oc9KjT6vNFa4TGZ1673q9HuosYUYXZ4H9+yLMiUOSuhdkzYIQJGHkSlUm12B3Uu6v1kX2o5f6kd1rT03mFSbhOSTkGDUn68jtjkMYOVLmjv/ZbJweg14J9ME4pZcETtUZqA
    OTP_LOGIN:
      type: object
      properties:
        password:
          type: string
          example: mypassword
        usernameOrEmail:
          type: string
          example: example@email.com
        getEndDateOfActiveResponsibleUser:
          type: boolean
          example: false
        oneTimePassword:
          description: This parameter has to be sent if OTP login is being used
          type: string
          example: OTPEXAMPLE
        geoPackage:
          type: string
          example: V/4WIIt5W2NddqLGUNO1RaVFq9WVu0blJQa1oZ+qrY4iDvpdozizseDfZhd17xGhRlmtydVhKHtRjg3aU2g67RUp105MsvSF9vTcQ7pj+p0nDsJ/1k4ZX4UZp+QXsE9kLJ1tok6epPhaNE0KneuepCAnnQYZczkrduV5/QllktmsyVboyogSUX2+4yxgFXHYStvxUC2StTyDSQ7/pNM/8tGEQvCOXw1y0ZUwD7qgdoMFxw8PGP9XevlKFAAVFTR9uMCEnYeOglNYGQb5rd8KVFnFNeZiiwPy57l0pqi7V2lLJggiTGfDixSMWopH5RTnvAS65Yn7WGNbgLC2Q0VpKo8d85WVHl7ZxA+jGYXwHL7Gf+Ok1Cg2O10PuBMHZQ+W0jfcfqCkTDTRpgKYn+8xshuM2P6Mgo+0OYYhYeldvkwLVhU4CkoWkJ2y595S2mywvrUJ1PgwB27EdYCAyLC3eOVWHYUHPzT4U6kNZ3TefAELGhpK9jdMddv4yrAYX4s75OeFdYPe7nnHRjwF8QtvOka0bWqKtn9Em0mVQs5HWSy3jaAoGQfPwrQcGY3YLk+td68uAr/L63ncNbOzqIe4ED6jti9+6eSv/5AoV3lwdLjp8J+uzp9SIYrPcNoDoEff5D7KtTy/PEWqHl2lOfctDCxRkS6vBANwSrEEcQvmyU/MeUojgQmnfmuH8FA0PYxzW0AzT44kZIqa3tlkc4ImdUx70jci1Py3RkFkPYHOQCUcfGe3ngQxgAOWP2zuEOsRVj18lQA0Y3NEbM49zetX3TKAG2Bfuk3sWAedopkvjBffM9axE83VMI6s8Dn9Y9iPfpCnu6tWdgIhGeeOxHdpgYLeZoZtuymIoioV/GBnp3R9CEfZI8W6CXeu5YNYXk1UywE2g4u4OgHSW3WUXMwnpdCCmlHb8Xr1jkHsFGCsRRVTqdewXkje1NVIeh5w6BjqmwLMFrAKj3Z+MdUdZjF4tPY3yqcZjtQumj4TKub8qHnWunw1ksH+F8/3DxcQkHclZom8Eir6F/dCuiyL+F8sLSGM+LlytZAMzAuXs+5gOtp6csdduF/FOuUWUoizV+piEMgaHB1+yFRxysZCVYck+KfJbze7DPQ2xrNjTNrcBBF9O+VTjgKbvPCQzfT+XPvwaPdPzZ4GMP2PlDzFfqqjtZM6ugkfSoSmc3lNzi+plpyJkRs7u5cffTYoH7bLgQ4ZhbmycisIkn58/hXhPhOPPXNgpNgxKh7h676kIZikTN9x9uyuLO1ZzWlWy8Xqnlfot9ame6dyIj3MXmbFD9D6KkfaL8OPoPAQkZ40E9taWwJ9zrPnoHVF8X2uePfbhuSHF3RXhWf21OYbtguMqB2/fwmj+IoSPZaB0VBASbwuFcGa4HARQsWjBo61dGM9ukUeUOhAy68DRITW8cS867TooCTC7udyuRFiSNOUjcczLchxLXuPaczVfOkRdl68IXzD6ZioOR7f9V2J4bZEfLzmeuFdbbx0PuDjfww1ip4s2xK4ppzBfbffcPHNjWIIgbPWvl8I4TbeYgxTG2BwJN/X8CM9U9GGjhlW4nWhkau/Zx4OD2xKmoHBo3vR+O9o5JI9DuIJ5RzJFJS4MGNBfYNtX9U57WrMINx8fvtKnPxo26BE+Mv/Hjneh0BnLoMC9oc9KjT6vNFa4TGZ1673q9HuosYUYXZ4H9+yLMiUOSuhdkzYIQJGHkSlUm12B3Uu6v1kX2o5f6kd1rT03mFSbhOSTkGDUn68jtjkMYOVLmjv/ZbJweg14J9ME4pZcETtUZqA
    KBA_LOGIN:
      type: object
      properties:
        password:
          type: string
          example: mypassword
        usernameOrEmail:
          type: string
          example: example@email.com
        getEndDateOfActiveResponsibleUser:
          type: boolean
          example: true
        lastFourDigitsSsnNumber:
          description: This parameter has to be sent if KBA login is being used
          type: string
          example: OTPEXAMPLE
        postalCode:
          description: This parameter has to be sent if KBA login is being used
          type: string
          example: "123456"
        geoPackage:
          type: string
          example: V/4WIIt5W2NddqLGUNO1RaVFq9WVu0blJQa1oZ+qrY4iDvpdozizseDfZhd17xGhRlmtydVhKHtRjg3aU2g67RUp105MsvSF9vTcQ7pj+p0nDsJ/1k4ZX4UZp+QXsE9kLJ1tok6epPhaNE0KneuepCAnnQYZczkrduV5/QllktmsyVboyogSUX2+4yxgFXHYStvxUC2StTyDSQ7/pNM/8tGEQvCOXw1y0ZUwD7qgdoMFxw8PGP9XevlKFAAVFTR9uMCEnYeOglNYGQb5rd8KVFnFNeZiiwPy57l0pqi7V2lLJggiTGfDixSMWopH5RTnvAS65Yn7WGNbgLC2Q0VpKo8d85WVHl7ZxA+jGYXwHL7Gf+Ok1Cg2O10PuBMHZQ+W0jfcfqCkTDTRpgKYn+8xshuM2P6Mgo+0OYYhYeldvkwLVhU4CkoWkJ2y595S2mywvrUJ1PgwB27EdYCAyLC3eOVWHYUHPzT4U6kNZ3TefAELGhpK9jdMddv4yrAYX4s75OeFdYPe7nnHRjwF8QtvOka0bWqKtn9Em0mVQs5HWSy3jaAoGQfPwrQcGY3YLk+td68uAr/L63ncNbOzqIe4ED6jti9+6eSv/5AoV3lwdLjp8J+uzp9SIYrPcNoDoEff5D7KtTy/PEWqHl2lOfctDCxRkS6vBANwSrEEcQvmyU/MeUojgQmnfmuH8FA0PYxzW0AzT44kZIqa3tlkc4ImdUx70jci1Py3RkFkPYHOQCUcfGe3ngQxgAOWP2zuEOsRVj18lQA0Y3NEbM49zetX3TKAG2Bfuk3sWAedopkvjBffM9axE83VMI6s8Dn9Y9iPfpCnu6tWdgIhGeeOxHdpgYLeZoZtuymIoioV/GBnp3R9CEfZI8W6CXeu5YNYXk1UywE2g4u4OgHSW3WUXMwnpdCCmlHb8Xr1jkHsFGCsRRVTqdewXkje1NVIeh5w6BjqmwLMFrAKj3Z+MdUdZjF4tPY3yqcZjtQumj4TKub8qHnWunw1ksH+F8/3DxcQkHclZom8Eir6F/dCuiyL+F8sLSGM+LlytZAMzAuXs+5gOtp6csdduF/FOuUWUoizV+piEMgaHB1+yFRxysZCVYck+KfJbze7DPQ2xrNjTNrcBBF9O+VTjgKbvPCQzfT+XPvwaPdPzZ4GMP2PlDzFfqqjtZM6ugkfSoSmc3lNzi+plpyJkRs7u5cffTYoH7bLgQ4ZhbmycisIkn58/hXhPhOPPXNgpNgxKh7h676kIZikTN9x9uyuLO1ZzWlWy8Xqnlfot9ame6dyIj3MXmbFD9D6KkfaL8OPoPAQkZ40E9taWwJ9zrPnoHVF8X2uePfbhuSHF3RXhWf21OYbtguMqB2/fwmj+IoSPZaB0VBASbwuFcGa4HARQsWjBo61dGM9ukUeUOhAy68DRITW8cS867TooCTC7udyuRFiSNOUjcczLchxLXuPaczVfOkRdl68IXzD6ZioOR7f9V2J4bZEfLzmeuFdbbx0PuDjfww1ip4s2xK4ppzBfbffcPHNjWIIgbPWvl8I4TbeYgxTG2BwJN/X8CM9U9GGjhlW4nWhkau/Zx4OD2xKmoHBo3vR+O9o5JI9DuIJ5RzJFJS4MGNBfYNtX9U57WrMINx8fvtKnPxo26BE+Mv/Hjneh0BnLoMC9oc9KjT6vNFa4TGZ1673q9HuosYUYXZ4H9+yLMiUOSuhdkzYIQJGHkSlUm12B3Uu6v1kX2o5f6kd1rT03mFSbhOSTkGDUn68jtjkMYOVLmjv/ZbJweg14J9ME4pZcETtUZqA
    sendSMSParams:
      type: object
      properties: null
    sendSMSPayload:
      type: boolean
      example: true
    loginResponse:
      type: object
      properties:
        userName:
          type: string
          example: testUser
        country:
          type: string
          example: GB
        location:
          type: string
          example: GB
        currency:
          type: string
          example: GBP
        email:
          type: string
          example: example@gig.com
        firstName:
          type: string
          example: Test
        lastName:
          type: string
          example: Name
        userId:
          type: number
          example: 4546525
        authMethod:
          type: number
          example: 1
        accountVerifiedOn:
          type: string
          format: date-time
        languageLCID:
          type: string
          example: en-GB
        subdivisionID:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        codeSubdivision:
          type: string
          example: NA
        nameSubdivision:
          type: string
          example: NA
        status:
          type: string
          nullable: true
          example: null
        govermentID:
          type: string
          nullable: true
          example: null
        source:
          type: string
          nullable: true
          example: null
        preferences:
          type: object
          properties:
            enableRelicAnimation:
              type: boolean
              example: false
            fpp:
              type: number
              example: 1
        leaderboardName:
          type: string
          example: Test N
        devices:
          type: object
          properties:
            RANDOM_DEVICE_ID:
              type: object
              properties:
                lastUsed:
                  type: number
                  example: 1501757013552
                allowed:
                  type: boolean
                  example: true
            RANDOM_DEVICE_ID2:
              type: object
              properties:
                lastUsed:
                  type: number
                  example: 1501757013552
                allowed:
                  type: boolean
                  example: true
        roles:
          type: array
          items:
            type: string
          example:
            - roleA
            - roleB
            - testrole
        depositCount:
          type: number
          example: 0
        lastVisit:
          type: number
          example: 1540283464164
        sessionLimit:
          type: number
          example: 777777
        referedBy:
          type: string
          example: 157302_$2a$10$PFy.qUXFXfhC.8D1YjH3ueRRXMmry10zQ8qaZF4jG36DLX4gK2ST6
        birthDate:
          type: number
          example: 669686400000
        pinboard:
          type: array
          items:
            type: object
            properties:
              vendor:
                type: string
                example: Yggdrasil
              isTouch:
                type: boolean
                example: false
              title:
                type: string
                example: Spina Colada
              userId:
                type: number
                nullable: true
                example: null
              slug:
                type: string
                example: spina-colada
              desc:
                type: object
                properties:
                  en:
                    type: string
                    example: Test description
        lifeFPP:
          type: number
          example: 0
        sessionLimitCreated:
          type: number
          example: 1506670560261
        refererId:
          type: string
          example: $2a$10$Foh9aQQCT3TzjXHxmHNTCO3ui8f4K2Er/Vr2x3eB2Zdh2AyWpexDO
        excludeFeed:
          type: boolean
          example: false
        segment:
          type: number
          example: 9
        lang:
          type: string
          example: en
        agreedCompliance:
          type: boolean
          example: true
        igcToken:
          type: string
          example: 1f1151a6-ff32-4f55-95b9-25c0de7e1d7a
        emProfileComplete:
          type: boolean
          example: true
        emSessionId:
          type: string
          example: 5c122adaaddd5a6c6aa05f32
        sessionId:
          type: string
          example: 5c122adaaddd5a6c6aa05f32
        reference:
          type: string
          example: null
        createdDate:
          type: string
          format: date-time
        loginTries:
          type: number
          example: null
        dataZoo:
          type: object
          description: Only for SkyCity
          properties:
            isOpenForVerification:
              type: boolean
              example: true
        kycStatus:
          type: object
          properties:
            address:
              $ref: "#/components/schemas/DocumentVerificationStatus"
            payment:
              $ref: "#/components/schemas/DocumentVerificationStatus"
            photoID:
              $ref: "#/components/schemas/DocumentVerificationStatus"
            uploadCounter:
              type: object
              properties:
                photoID:
                  type: number
                address:
                  type: number
                payment:
                  type: number
            uploadLimit:
              type: object
              properties:
                photoID:
                  type: number
                address:
                  type: number
                payment:
                  type: number
            userName:
              type: string
            id:
              type: string
            status:
              type: boolean
            bankIdBlocked:
              type: boolean
        registrationState:
          type: number
          example: 1
        geoPackageTTL:
          type: number
          example: 1200
  responses:
    authenticateWithChallengeTokenRes:
      description: |
        It is the same response that a client gets after
        a successful login with `login` or `loginV2` endpoint.

        This also set the session for the user, so after a successful
        response the client will be authenticated as well.

        If it’s a new user, the frontend will receive an event with the
        `UserDataRequired` type, so do not forget to subscribe for incoming
        messages.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/authenticateWithChallengeTokenPayload"
    getAMLStatusRes:
      description: |
        Get detailed information about the user's AML status
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/getAMLStatusPayload"
    getAmlVerificationStatusRes:
      description: |
        Get detailed information about the user's AML verification status
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/getAmlVerificationStatusPayload"
    getGameSessionSummaryRes:
      description: ""
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/getGameSessionSummaryPayload"
    kycDocumentRequestRes:
      description: ""
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/kycDocumentRequestPayload"
    sendSMSRes:
      description: ""
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/sendSMSPayload"
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    sessionId:
      type: apiKey
      description: sessionId (sid) of a logged in user
      name: x-api-sid
      in: header
  links: {}
  callbacks: {}
security:
  - sessionId: []
tags:
  - name: authMethod
    description: Methods which require login
  - name: method
    description: Methods which do NOT require login
  - name: private
    description: Internal endpoints, not available publicly
channels: {}
